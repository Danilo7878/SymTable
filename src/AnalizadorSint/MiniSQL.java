/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package AnalizadorSint;

import java.awt.Color;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.Reader;
import java.io.StringReader;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileNameExtensionFilter;
import java.util.ArrayList;
import java_cup.runtime.Symbol;
import javax.swing.JOptionPane;
/**
 *
 * @author danil
 */


public class MiniSQL extends javax.swing.JFrame {

    /**
     * Creates new form MiniSQL
     */
    String PathSQL = "";
    
    public MiniSQL() {
        initComponents();
        txtArea_Errores.setForeground(Color.RED);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btn_elegirArchivo = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        txt_ChosenPath = new javax.swing.JTextPane();
        jLabel1 = new javax.swing.JLabel();
        btn_Escanear = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtArea_Errores = new javax.swing.JTextArea();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        btn_elegirArchivo.setBackground(new java.awt.Color(0, 0, 0));
        btn_elegirArchivo.setFont(new java.awt.Font("Tempus Sans ITC", 0, 12)); // NOI18N
        btn_elegirArchivo.setForeground(new java.awt.Color(255, 255, 255));
        btn_elegirArchivo.setText("Examinar");
        btn_elegirArchivo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_elegirArchivoActionPerformed(evt);
            }
        });

        txt_ChosenPath.setEditable(false);
        txt_ChosenPath.setFont(new java.awt.Font("Tempus Sans ITC", 0, 10)); // NOI18N
        jScrollPane1.setViewportView(txt_ChosenPath);

        jLabel1.setFont(new java.awt.Font("Trebuchet MS", 1, 10)); // NOI18N
        jLabel1.setText("elegir archivo con código Mini-SQL");

        btn_Escanear.setBackground(new java.awt.Color(0, 153, 51));
        btn_Escanear.setFont(new java.awt.Font("Segoe WP SemiLight", 1, 11)); // NOI18N
        btn_Escanear.setText("Escanear");
        btn_Escanear.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                btn_EscanearFocusGained(evt);
            }
        });
        btn_Escanear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_EscanearActionPerformed(evt);
            }
        });

        txtArea_Errores.setEditable(false);
        txtArea_Errores.setColumns(20);
        txtArea_Errores.setRows(5);
        jScrollPane2.setViewportView(txtArea_Errores);

        jLabel2.setFont(new java.awt.Font("Kristen ITC", 1, 14)); // NOI18N
        jLabel2.setText("Analizador de Sintáctico Mini-SQL");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(68, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 409, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btn_Escanear, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel2)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 324, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btn_elegirArchivo)))
                .addGap(46, 46, 46))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(43, 43, 43)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_elegirArchivo))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1)
                .addGap(39, 39, 39)
                .addComponent(btn_Escanear)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 172, Short.MAX_VALUE)
                .addGap(47, 47, 47))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btn_elegirArchivoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_elegirArchivoActionPerformed
        // TODO add your handling code here:
        JFileChooser jf = new JFileChooser();
        FileNameExtensionFilter filter = new FileNameExtensionFilter("Archivo Mini-SQL", "sql", "sql");
        jf.setFileFilter(filter);
        int r = jf.showOpenDialog(null);
        if(r==JFileChooser.APPROVE_OPTION){
            File f = jf.getSelectedFile();
            PathSQL = f.getAbsolutePath();
            txt_ChosenPath.setText(PathSQL);
            txtArea_Errores.setText("");
        }
    }//GEN-LAST:event_btn_elegirArchivoActionPerformed

    private void btn_EscanearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_EscanearActionPerformed
    
    txtArea_Errores.setText("");
    if (!PathSQL.equals("")){
        try {
            // TODO add your handling code here:
            Reader escanear = new BufferedReader(new FileReader(PathSQL));
            Lexer lexer = new Lexer(escanear);
            ArrayList<String> ListadoDeSentencias = new ArrayList();
            String sentencia = "";
            String erroresL = "";
            String erroresS = "";
            int LineaActual = 1;
            
            while (true) {
            Tokens token = lexer.yylex();
                if (token == null) {
                    String Comprobar = sentencia.replaceAll("\n", "");
                    if (!Comprobar.equals("")) {
                        sentencia += ";";
                        ListadoDeSentencias.add(sentencia);
                    }
                    break;                                     
                }
                
                int diferencia = lexer.linea - LineaActual;
                for (int i = 0; i < diferencia; i++) {
                    sentencia+= "\n";
                }
                LineaActual+= diferencia;
                //seleccionar el tipo de Token
                switch (token) {
                    //No necesito saber su valor
                     case Float: case Bit: case Int:  case String: case Variable:
                        sentencia+=token + " ";
                        break;
                    //No necesito hacer nada con ellos en el análisis sintáctico
                    case ComentarioSimple: case ComentarioMultilinea:
                        break;
                        
                    case Identificador:
                        if (lexer.yylength() > 31) {
                            String TokenTruncado = lexer.lexeme.substring(0, 31);
                            erroresL+= "ALERTA: Indentificador Truncado|Valor: " + TokenTruncado + "|Linea: " + lexer.linea
                            + "|Columna Inicio: " + lexer.PrimeraColumna + "|Columna Fin: " + lexer.UltimaColumna + "\n";
                        }
                        sentencia+=token + " ";
                        break;
                    //Aquí si necesito el valor específico del token
                    case Simbolo: case Palabra_Reservada:
                        if (lexer.lexeme.equals("GO")||lexer.lexeme.equals(";")) {
                            String Comprobar = sentencia.replaceAll("\n", "");
                            if (!Comprobar.equals("")) {
                                sentencia+=lexer.lexeme;
                                String nuevaSentencia = sentencia;
                                ListadoDeSentencias.add(nuevaSentencia);
                                sentencia = "";
                            }                           
                        }
                        else{
                          sentencia+=lexer.lexeme + " ";
                        }
                        break;
                    
                    //Aún no sé si hacerlos parte del análisis sintáctico                    
                    case StringError:
                        sentencia+="ERROR ";                        
                        erroresL+= "STRING ERROR: Falta <'> o se encontró un salto de linea|Valor: " + lexer.lexeme + "|Linea: " + lexer.linea
                                  + "|Columna Inicio: " + lexer.PrimeraColumna + "|Columna Fin: " + lexer.UltimaColumna + "\n";
                        break;                                                                
                    case ERROR:
                        sentencia+=token + " ";
                        erroresL+= "ERROR: cadena no reconocida|Valor: "+lexer.lexeme+"|Linea: "+lexer.linea
                                +"|Columna Inicio: "+lexer.PrimeraColumna+"|Columna Fin: "+lexer.UltimaColumna+"\n";
                        break;
                    default:
                        throw new AssertionError();
                        
                    //Sólo avisar del error léxico pero no lo necesito en el sintáctico
                    case ComentarioMultilineaError:
                        sentencia+="ERROR "; 
                        erroresL+= "ERROR: Comentario Multilinea sin cerrar|Linea Inicial: " + lexer.linea+"\n";
                        break;
                }
            }
            //COMIENZA EL ANÁLISIS SINTÁCTICO                   
            int i = 0;
            int UltimaLinea = 1;
            while(i<ListadoDeSentencias.size()){
                String SentenciaActual = ListadoDeSentencias.get(i);                                
                boolean HayError = false;
                if (SentenciaActual.contains("ERROR")) {
                    HayError = true;
                }
                if (!HayError) {
                    //Mandar a JCUP
                    Sintax s = new Sintax(new AnalizadorSint.LexerCup(new StringReader(SentenciaActual))); 
                    try {
                        s.parse();
                    } catch (Exception ex) {
                        Symbol sym = s.getS();
                        erroresS += "\nERROR: no se esperaba <"+sym.value+">  en la Línea:  "+(UltimaLinea+sym.right);
                    }
                }
                
      //Me sirve únicamente para mostar correctamente la línea de error
      //pues mandaré statement por statement a JCUP y este devolverá una línea
      //la cual será sumada a la "UltimaLinea" que hace referencia a la linea
      //donde terminó el último statement, sin importar si se parseó correctamente
      //o si no se mandó a analizar
                String Separar = SentenciaActual.replaceAll("\n", " \n ");            
                String Revisar [] = Separar.split(" ");                               
                int Contador = 0;                                                     
                for (String Revisar1 : Revisar) {                                     
                    if (Revisar1.equals("\n")) {                                      
                        Contador++;                                                   
                    }                                                                 
                }                                                                     
                UltimaLinea += Contador;                
                i++;
            }            
            if (erroresS.equals("") && erroresL.equals("")) {
                JOptionPane.showMessageDialog(null,"Se parseó correctamente");
            }
            else{
                JOptionPane.showMessageDialog(null,"Se parseó con errores");
                txtArea_Errores.setText("ERRORES DE LÉXICO: \n"+erroresL +"\n\nERRORES DE SINTAXIS:"+erroresS);
            }
            
        } catch (FileNotFoundException ex) {
            Logger.getLogger(MiniSQL.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(MiniSQL.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    else{
        txtArea_Errores.setText("ALERTA: No se ha seleccionado un Archivo aún");
    }
    }//GEN-LAST:event_btn_EscanearActionPerformed

    private void btn_EscanearFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_btn_EscanearFocusGained
    
    }//GEN-LAST:event_btn_EscanearFocusGained

    
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_Escanear;
    private javax.swing.JButton btn_elegirArchivo;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea txtArea_Errores;
    private javax.swing.JTextPane txt_ChosenPath;
    // End of variables declaration//GEN-END:variables
}
