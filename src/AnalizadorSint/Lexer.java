/* The following code was generated by JFlex 1.7.0 */

package AnalizadorSint;
import static AnalizadorSint.Tokens.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>C:/Users/danil/Desktop/ProyectoTabla/SymTable/src/AnalizadorSint/Lexer.flex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\4\1\33\1\64\1\64\1\33\22\0\1\4\1\22\1\0"+
    "\1\32\1\0\1\20\1\23\1\34\1\26\1\27\1\16\1\15\1\20"+
    "\1\12\1\13\1\17\2\6\10\3\1\0\1\20\1\22\1\21\1\22"+
    "\1\0\1\14\1\35\1\50\1\45\1\36\1\37\1\46\1\54\1\47"+
    "\1\51\1\62\1\56\1\11\1\57\1\7\1\44\1\43\1\63\1\42"+
    "\1\52\1\41\1\10\1\61\1\60\1\40\1\53\1\55\1\24\1\0"+
    "\1\25\1\0\1\2\1\0\4\1\1\5\25\1\1\30\1\4\1\31"+
    "\7\0\1\64\u1fa2\0\1\64\1\64\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\3\2\6\6"+
    "\1\1\4\6\1\7\25\2\1\10\3\2\1\11\10\2"+
    "\1\0\1\12\1\13\1\14\4\2\1\11\3\2\1\11"+
    "\20\2\1\11\17\2\1\11\1\2\1\11\2\2\1\11"+
    "\26\2\1\11\1\2\1\11\21\2\1\11\17\2\1\0"+
    "\14\2\1\11\7\2\1\13\1\0\1\2\1\11\7\2"+
    "\1\11\7\2\1\11\50\2\1\11\26\2\1\11\13\2"+
    "\1\11\1\2\1\11\11\2\1\11\12\2\1\11\4\2"+
    "\1\11\7\2\1\10\1\0\1\11\12\2\1\15\1\0"+
    "\14\2\1\11\3\2\1\0\11\2\1\11\3\2\1\11"+
    "\3\2\1\11\17\2\1\11\2\2\1\11\2\2\1\11"+
    "\17\2\1\11\42\2\2\11\7\2\1\13\1\15\13\2"+
    "\1\0\1\2\1\11\46\2\1\11\30\2\1\11\5\2"+
    "\1\0\1\11\46\2\1\0\11\2\1\11\1\2\1\11"+
    "\11\2\1\11\5\2\1\11\6\2\1\11\3\2\1\11"+
    "\34\2\1\11\23\2";

  private static int [] zzUnpackAction() {
    int [] result = new int[660];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\65\0\152\0\237\0\324\0\237\0\u0109\0\u013e"+
    "\0\u0173\0\u01a8\0\65\0\u01dd\0\u0212\0\u0247\0\u027c\0\u02b1"+
    "\0\u02e6\0\u031b\0\u0350\0\u0385\0\u03ba\0\u03ef\0\u0424\0\u0459"+
    "\0\u048e\0\u04c3\0\u04f8\0\u052d\0\u0562\0\u0597\0\u05cc\0\u0601"+
    "\0\u0636\0\u066b\0\u06a0\0\u06d5\0\u070a\0\u073f\0\u0774\0\u07a9"+
    "\0\u07de\0\u0813\0\u0848\0\u087d\0\u08b2\0\u08e7\0\u091c\0\u0951"+
    "\0\u0986\0\u09bb\0\u09f0\0\u0a25\0\u0a5a\0\u0a8f\0\u0ac4\0\u0af9"+
    "\0\u0b2e\0\u0b63\0\65\0\u0b98\0\u0bcd\0\u0c02\0\u0c37\0\152"+
    "\0\u0c6c\0\u0ca1\0\u0cd6\0\u0d0b\0\u0d40\0\u0d75\0\u0daa\0\u0ddf"+
    "\0\u0e14\0\u0e49\0\u0e7e\0\u0eb3\0\u0ee8\0\u0f1d\0\u0f52\0\u0f87"+
    "\0\u0fbc\0\u0ff1\0\u1026\0\u105b\0\u1090\0\u10c5\0\u10fa\0\u112f"+
    "\0\u1164\0\u1199\0\u11ce\0\u1203\0\u1238\0\u126d\0\u12a2\0\u12d7"+
    "\0\u130c\0\u1341\0\u1376\0\u13ab\0\u13e0\0\u1415\0\u144a\0\u147f"+
    "\0\u14b4\0\u14e9\0\u151e\0\u1553\0\u1588\0\u15bd\0\u15f2\0\u1627"+
    "\0\u165c\0\u1691\0\u16c6\0\u16fb\0\u1730\0\u1765\0\u179a\0\u17cf"+
    "\0\u1804\0\u1839\0\u186e\0\u18a3\0\u18d8\0\u190d\0\u1942\0\u1977"+
    "\0\u19ac\0\u19e1\0\u1a16\0\u1a4b\0\u1a80\0\u1ab5\0\u1aea\0\u1b1f"+
    "\0\u1b54\0\u1b89\0\u1bbe\0\u1bf3\0\u1c28\0\u1c5d\0\u1c92\0\u1cc7"+
    "\0\u1cfc\0\u1d31\0\u1d66\0\u1d9b\0\u1dd0\0\u1e05\0\u1e3a\0\u1e6f"+
    "\0\u1ea4\0\u1ed9\0\u1f0e\0\u1f43\0\u1f78\0\u1fad\0\u1fe2\0\u2017"+
    "\0\u204c\0\u2081\0\u20b6\0\u20eb\0\u2120\0\u2155\0\u218a\0\u21bf"+
    "\0\u21f4\0\u2229\0\u225e\0\u2293\0\u22c8\0\u22fd\0\u2332\0\u2367"+
    "\0\u239c\0\u23d1\0\u2406\0\u243b\0\u2470\0\u24a5\0\u24da\0\u250f"+
    "\0\u2544\0\u2579\0\u25ae\0\u25e3\0\u2618\0\u264d\0\u2682\0\u26b7"+
    "\0\u1090\0\u26ec\0\u2721\0\u2756\0\u278b\0\u27c0\0\u27f5\0\u282a"+
    "\0\u285f\0\u2894\0\u28c9\0\u28fe\0\u2933\0\u2968\0\u299d\0\u29d2"+
    "\0\u2a07\0\u2a3c\0\u2a71\0\u2aa6\0\u2adb\0\u2b10\0\u2b45\0\u2b7a"+
    "\0\u2baf\0\u2be4\0\u2c19\0\u2c4e\0\u2c83\0\u2cb8\0\u2ced\0\u2d22"+
    "\0\u2d57\0\u2d8c\0\u2dc1\0\u2df6\0\u2e2b\0\u2e60\0\u2e95\0\u2eca"+
    "\0\u2eff\0\u2f34\0\u2f69\0\u2f9e\0\u2fd3\0\u3008\0\u303d\0\u3072"+
    "\0\u30a7\0\u30dc\0\u3111\0\u3146\0\u317b\0\u31b0\0\u31e5\0\u321a"+
    "\0\u324f\0\u3284\0\u32b9\0\u32ee\0\u3323\0\u3358\0\u338d\0\u33c2"+
    "\0\u33f7\0\u342c\0\u3461\0\u3496\0\u34cb\0\u3500\0\u3535\0\u356a"+
    "\0\u359f\0\u35d4\0\u3609\0\u363e\0\u3673\0\u36a8\0\u36dd\0\u3712"+
    "\0\u23d1\0\u3747\0\u377c\0\u37b1\0\u37e6\0\u381b\0\u3850\0\u3885"+
    "\0\u38ba\0\u38ef\0\u3924\0\u3959\0\u398e\0\u39c3\0\u39f8\0\u3a2d"+
    "\0\u3a62\0\u3a97\0\u3acc\0\u3b01\0\u3b36\0\u3b6b\0\u3ba0\0\u3bd5"+
    "\0\u3c0a\0\u3c3f\0\u3c74\0\u3ca9\0\u3cde\0\u3d13\0\u3d48\0\u3d7d"+
    "\0\u3db2\0\u3de7\0\u3e1c\0\u3e51\0\u3e86\0\u3ebb\0\u3ef0\0\u3f25"+
    "\0\u3f5a\0\u3f8f\0\u3fc4\0\u3ff9\0\u402e\0\u402e\0\u4063\0\u4098"+
    "\0\u40cd\0\u4102\0\u4137\0\u416c\0\u41a1\0\u41d6\0\u420b\0\u4240"+
    "\0\u4275\0\u42aa\0\u42df\0\u4314\0\u4349\0\u437e\0\u43b3\0\u43e8"+
    "\0\u441d\0\u4452\0\u4487\0\u44bc\0\u44f1\0\u4526\0\u455b\0\u4590"+
    "\0\u45c5\0\u45fa\0\u462f\0\u4664\0\u4699\0\u46ce\0\u4703\0\u4738"+
    "\0\u476d\0\u47a2\0\u47d7\0\u480c\0\u4841\0\u4876\0\u48ab\0\u48e0"+
    "\0\u4915\0\u494a\0\u497f\0\u49b4\0\u49e9\0\u4a1e\0\u4a53\0\u4a88"+
    "\0\u4abd\0\u4af2\0\u4b27\0\u4b5c\0\u4b91\0\u4bc6\0\u4bfb\0\u4c30"+
    "\0\u4c65\0\u4c9a\0\u4ccf\0\u4d04\0\u4d39\0\u4d6e\0\u4da3\0\u4dd8"+
    "\0\u4e0d\0\u4e42\0\u4e77\0\u4eac\0\u4ee1\0\u4f16\0\u4f4b\0\u4f80"+
    "\0\u4fb5\0\u4fea\0\u501f\0\u5054\0\u5089\0\u50be\0\u50f3\0\u5128"+
    "\0\u515d\0\u3e86\0\u5192\0\u51c7\0\u51fc\0\u5231\0\u5266\0\u529b"+
    "\0\u52d0\0\u5305\0\u533a\0\u536f\0\u53a4\0\u53d9\0\u540e\0\u5443"+
    "\0\u5478\0\u54ad\0\u54e2\0\u5517\0\u554c\0\u5581\0\u55b6\0\u55eb"+
    "\0\u5620\0\u5655\0\u568a\0\u56bf\0\u56f4\0\u5729\0\u575e\0\u5793"+
    "\0\u57c8\0\u57fd\0\u5832\0\u5867\0\u589c\0\u58d1\0\u5906\0\u593b"+
    "\0\u5970\0\u59a5\0\u59da\0\u5a0f\0\u5a44\0\u5a79\0\u5aae\0\u42aa"+
    "\0\65\0\u5ae3\0\u5b18\0\u2618\0\u5b4d\0\u5b82\0\u5bb7\0\u5bec"+
    "\0\u5c21\0\u5c56\0\u5c8b\0\u5cc0\0\u5cf5\0\u5d2a\0\u5d5f\0\u5d94"+
    "\0\u5dc9\0\u5dfe\0\u5e33\0\u5e68\0\u5e9d\0\u5ed2\0\u5f07\0\u5f3c"+
    "\0\u5f71\0\u5fa6\0\u5fdb\0\u6010\0\u6045\0\u607a\0\u60af\0\u60e4"+
    "\0\u6119\0\u614e\0\u6183\0\u61b8\0\u61ed\0\u6222\0\u6257\0\u38ba"+
    "\0\u628c\0\u62c1\0\u62f6\0\u632b\0\u6360\0\u6395\0\u63ca\0\u63ff"+
    "\0\u6434\0\u6469\0\u649e\0\u64d3\0\u6508\0\u653d\0\u6572\0\u65a7"+
    "\0\u65dc\0\u6611\0\u6646\0\u667b\0\u66b0\0\u66e5\0\u671a\0\u674f"+
    "\0\u6784\0\u67b9\0\u67ee\0\u6823\0\u6858\0\u688d\0\u68c2\0\u68f7"+
    "\0\u692c\0\u6961\0\u6996\0\u69cb\0\u6a00\0\u6a35\0\u4137\0\u6a6a"+
    "\0\u6a9f\0\u6ad4\0\u6b09\0\u6b3e\0\u6b73\0\u264d\0\u6ba8\0\u6bdd"+
    "\0\u6c12\0\u6c47\0\u6c7c\0\u6cb1\0\u6ce6\0\u6d1b\0\u6d50\0\u6d85"+
    "\0\u6dba\0\u6def\0\u6e24\0\u6e59\0\u6e8e\0\u6ec3\0\u6ef8\0\u6f2d"+
    "\0\u6f62\0\u6f97\0\u6fcc\0\u7001\0\u7036\0\u706b\0\u70a0\0\u70d5"+
    "\0\u710a\0\u713f\0\u7174\0\u71a9\0\u71de\0\u7213\0\u7248\0\u727d"+
    "\0\u72b2\0\u72e7\0\u731c\0\u7351\0\u7386\0\u73bb\0\u73f0\0\u7425"+
    "\0\u745a\0\u748f\0\u74c4\0\u74f9\0\u752e\0\u7563\0\u7598\0\u75cd"+
    "\0\u24da\0\u7602\0\u7637\0\u766c\0\u76a1\0\u76d6\0\u770b\0\u13e0"+
    "\0\u7740\0\u7775\0\u727d\0\u77aa\0\u77df\0\u3b36\0\u7814\0\u7849"+
    "\0\65\0\u787e\0\u78b3\0\u78e8\0\u791d\0\u7952\0\u7987\0\u79bc"+
    "\0\u79f1\0\u7a26\0\u7a5b\0\u7a90\0\u7ac5\0\u7afa\0\u7b2f\0\u7b64"+
    "\0\u7b99\0\u7bce\0\u7c03\0\u7c38\0\u7c6d\0\u7ca2\0\u7cd7\0\u7d0c"+
    "\0\u7d41\0\u7d76\0\u7dab\0\u7de0\0\u7e15\0\u7e4a\0\u7e7f\0\u7eb4"+
    "\0\u7ee9\0\u7f1e\0\u7f53\0\u7f88\0\u7fbd\0\u7ff2\0\u8027\0\u805c"+
    "\0\u8091\0\u80c6\0\u80fb\0\u8130\0\u8165\0\u819a\0\u81cf\0\u8204"+
    "\0\u8239\0\u826e\0\u82a3\0\u82d8\0\u79bc\0\u830d\0\u8342\0\u8377"+
    "\0\u83ac\0\u83e1\0\u8416\0\u844b";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[660];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\2\1\4\1\5\1\3\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\13\1\16"+
    "\1\13\2\17\1\20\1\21\1\13\1\22\1\13\1\23"+
    "\1\13\1\24\1\5\1\25\1\26\1\27\1\30\1\3"+
    "\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40"+
    "\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\1\52\1\3\67\0\3\3\1\0\5\3\23\0"+
    "\27\3\4\0\1\4\2\0\1\4\4\0\1\53\55\0"+
    "\1\5\26\0\1\5\32\0\3\3\1\0\3\3\1\54"+
    "\1\3\23\0\1\55\1\3\1\56\4\3\1\57\1\60"+
    "\16\3\2\0\3\3\1\0\2\3\1\61\2\3\23\0"+
    "\6\3\1\62\6\3\1\63\11\3\2\0\3\3\1\0"+
    "\5\3\23\0\1\64\1\3\1\65\4\3\1\66\4\3"+
    "\1\67\12\3\4\0\1\70\2\0\1\70\3\0\1\71"+
    "\53\0\1\3\3\0\1\3\1\0\3\3\23\0\27\3"+
    "\4\0\1\70\2\0\1\70\74\0\1\72\67\0\1\13"+
    "\66\0\1\13\66\0\1\13\66\0\1\13\66\0\1\13"+
    "\65\0\1\13\32\0\33\25\1\0\1\73\30\25\1\0"+
    "\3\3\1\0\2\3\1\74\1\75\1\76\23\0\1\3"+
    "\1\77\2\3\1\100\1\101\2\3\1\102\2\3\1\103"+
    "\1\3\1\104\6\3\1\105\2\3\2\0\3\3\1\0"+
    "\3\3\1\106\1\3\23\0\1\107\1\3\1\110\2\3"+
    "\1\111\1\3\1\112\3\3\1\113\1\114\12\3\2\0"+
    "\3\3\1\0\2\3\1\115\1\3\1\116\23\0\3\3"+
    "\1\117\1\3\1\120\7\3\1\121\11\3\2\0\3\3"+
    "\1\0\5\3\23\0\1\122\1\3\1\123\2\3\1\124"+
    "\1\3\1\125\2\3\1\126\1\3\1\127\1\130\11\3"+
    "\2\0\3\3\1\0\3\3\1\131\1\3\23\0\1\132"+
    "\1\3\1\133\4\3\1\134\4\3\1\135\12\3\2\0"+
    "\3\3\1\0\3\3\1\136\1\137\23\0\1\140\1\3"+
    "\1\141\2\3\1\142\1\3\1\143\4\3\1\144\12\3"+
    "\2\0\3\3\1\0\2\3\1\145\1\146\1\3\23\0"+
    "\5\3\1\147\1\150\1\3\1\151\1\152\12\3\1\153"+
    "\2\3\2\0\3\3\1\0\3\3\1\154\1\155\23\0"+
    "\1\156\4\3\1\157\1\3\1\160\2\3\1\161\14\3"+
    "\2\0\3\3\1\0\3\3\1\162\1\163\23\0\1\164"+
    "\1\3\1\165\2\3\1\166\1\3\1\167\4\3\1\170"+
    "\12\3\2\0\3\3\1\0\5\3\23\0\1\171\6\3"+
    "\1\172\17\3\2\0\3\3\1\0\3\3\1\173\1\3"+
    "\23\0\1\174\1\3\1\175\2\3\1\176\1\3\1\177"+
    "\4\3\1\200\1\3\1\100\10\3\2\0\3\3\1\0"+
    "\2\3\1\201\2\3\23\0\1\3\1\202\7\3\1\100"+
    "\3\3\1\203\4\3\1\204\4\3\2\0\3\3\1\0"+
    "\3\3\1\205\1\3\23\0\1\206\1\3\1\207\1\3"+
    "\1\210\1\3\1\211\1\212\1\213\1\3\1\214\1\3"+
    "\1\215\1\3\1\216\3\3\1\217\3\3\1\220\2\0"+
    "\3\3\1\0\5\3\23\0\2\3\1\221\24\3\2\0"+
    "\3\3\1\0\4\3\1\222\23\0\2\3\1\223\2\3"+
    "\1\224\1\3\1\225\17\3\2\0\3\3\1\0\5\3"+
    "\23\0\7\3\1\226\17\3\2\0\3\3\1\0\5\3"+
    "\23\0\2\3\1\227\11\3\1\230\12\3\2\0\3\3"+
    "\1\0\5\3\23\0\1\231\1\3\1\232\4\3\1\233"+
    "\4\3\1\234\12\3\2\0\3\3\1\0\5\3\23\0"+
    "\1\235\4\3\1\236\1\3\1\237\2\3\1\240\1\3"+
    "\1\241\12\3\2\0\3\3\1\0\5\3\23\0\1\242"+
    "\13\3\1\243\12\3\2\0\3\3\1\0\5\3\23\0"+
    "\7\3\1\244\17\3\4\0\1\53\1\0\1\245\1\53"+
    "\30\0\1\245\26\0\3\3\1\0\4\3\1\246\23\0"+
    "\22\3\1\247\4\3\2\0\3\3\1\0\5\3\23\0"+
    "\4\3\1\250\15\3\1\251\4\3\2\0\3\3\1\0"+
    "\5\3\23\0\3\3\1\223\23\3\2\0\3\3\1\0"+
    "\2\3\1\252\2\3\23\0\4\3\1\100\3\3\1\253"+
    "\16\3\2\0\3\3\1\0\5\3\23\0\12\3\1\221"+
    "\14\3\2\0\3\3\1\0\5\3\23\0\6\3\1\254"+
    "\5\3\1\255\4\3\1\256\5\3\2\0\3\3\1\0"+
    "\5\3\23\0\1\3\1\257\4\3\1\260\20\3\2\0"+
    "\3\3\1\0\5\3\23\0\1\261\1\3\1\262\11\3"+
    "\1\263\12\3\2\0\3\3\1\0\2\3\1\264\2\3"+
    "\23\0\15\3\1\223\11\3\2\0\3\3\1\0\5\3"+
    "\23\0\1\265\10\3\1\223\12\3\1\266\2\3\2\0"+
    "\3\3\1\0\5\3\23\0\1\267\7\3\1\270\12\3"+
    "\1\260\3\3\2\0\3\3\1\0\2\3\1\271\2\3"+
    "\23\0\21\3\1\101\5\3\4\0\1\70\2\0\1\70"+
    "\4\0\1\53\51\0\33\71\1\0\31\71\16\72\1\272"+
    "\14\72\1\273\31\72\1\0\3\3\1\0\5\3\23\0"+
    "\1\3\1\100\14\3\1\100\10\3\2\0\3\3\1\0"+
    "\5\3\23\0\4\3\1\274\22\3\2\0\3\3\1\0"+
    "\4\3\1\275\23\0\4\3\1\260\22\3\2\0\3\3"+
    "\1\0\5\3\23\0\2\100\25\3\2\0\3\3\1\0"+
    "\5\3\23\0\2\3\1\100\24\3\2\0\3\3\1\0"+
    "\5\3\23\0\4\3\1\276\22\3\2\0\3\3\1\0"+
    "\5\3\23\0\15\3\1\277\11\3\2\0\3\3\1\0"+
    "\5\3\23\0\10\3\1\100\4\3\1\300\11\3\2\0"+
    "\3\3\1\0\5\3\23\0\17\3\1\100\7\3\2\0"+
    "\3\3\1\0\5\3\23\0\22\3\1\301\4\3\2\0"+
    "\3\3\1\0\5\3\23\0\4\3\1\302\11\3\1\100"+
    "\10\3\2\0\3\3\1\0\2\3\1\227\1\3\1\303"+
    "\23\0\1\304\7\3\1\305\1\306\3\3\1\307\11\3"+
    "\2\0\3\3\1\0\5\3\23\0\7\3\1\301\17\3"+
    "\2\0\3\3\1\0\3\3\1\310\1\3\23\0\22\3"+
    "\1\311\4\3\2\0\3\3\1\0\5\3\23\0\10\3"+
    "\1\312\16\3\2\0\3\3\1\0\5\3\23\0\1\313"+
    "\14\3\1\314\11\3\2\0\3\3\1\0\5\3\23\0"+
    "\1\3\1\315\25\3\2\0\3\3\1\0\5\3\23\0"+
    "\15\3\1\101\11\3\2\0\3\3\1\0\5\3\23\0"+
    "\2\3\1\316\1\3\1\317\3\3\1\320\3\3\1\321"+
    "\12\3\2\0\3\3\1\0\5\3\23\0\5\3\1\322"+
    "\21\3\2\0\3\3\1\0\5\3\23\0\10\3\1\323"+
    "\16\3\2\0\3\3\1\0\5\3\23\0\13\3\1\324"+
    "\13\3\2\0\3\3\1\0\5\3\23\0\3\3\1\325"+
    "\16\3\1\326\4\3\2\0\3\3\1\0\3\3\1\327"+
    "\1\3\23\0\1\330\13\3\1\331\1\3\1\332\10\3"+
    "\2\0\3\3\1\0\5\3\23\0\6\3\1\100\20\3"+
    "\2\0\3\3\1\0\5\3\23\0\2\3\1\333\24\3"+
    "\2\0\3\3\1\0\5\3\23\0\22\3\1\334\4\3"+
    "\2\0\3\3\1\0\5\3\23\0\2\3\1\335\24\3"+
    "\2\0\3\3\1\0\4\3\1\101\23\0\27\3\2\0"+
    "\3\3\1\0\5\3\23\0\14\3\1\336\12\3\2\0"+
    "\3\3\1\0\4\3\1\337\23\0\1\340\3\3\1\341"+
    "\1\3\1\342\1\3\1\343\1\344\3\3\1\345\6\3"+
    "\1\346\2\3\2\0\3\3\1\0\4\3\1\347\23\0"+
    "\23\3\1\350\3\3\2\0\3\3\1\0\5\3\23\0"+
    "\17\3\1\351\7\3\2\0\3\3\1\0\5\3\23\0"+
    "\13\3\1\352\13\3\2\0\3\3\1\0\5\3\23\0"+
    "\1\333\26\3\2\0\3\3\1\0\5\3\23\0\1\3"+
    "\1\100\3\3\1\353\7\3\1\354\11\3\2\0\3\3"+
    "\1\0\5\3\23\0\5\3\1\355\21\3\2\0\3\3"+
    "\1\0\5\3\23\0\2\3\1\356\4\3\1\357\4\3"+
    "\1\360\12\3\2\0\3\3\1\0\5\3\23\0\15\3"+
    "\1\361\11\3\2\0\3\3\1\0\5\3\23\0\24\3"+
    "\1\362\2\3\2\0\3\3\1\0\4\3\1\227\23\0"+
    "\27\3\2\0\3\3\1\0\5\3\23\0\4\3\1\363"+
    "\22\3\2\0\3\3\1\0\5\3\23\0\1\3\1\260"+
    "\25\3\2\0\3\3\1\0\5\3\23\0\2\3\1\364"+
    "\1\3\1\276\22\3\2\0\3\3\1\0\5\3\23\0"+
    "\4\3\1\365\22\3\2\0\3\3\1\0\5\3\23\0"+
    "\11\3\1\366\15\3\2\0\3\3\1\0\5\3\23\0"+
    "\2\3\1\367\24\3\2\0\3\3\1\0\5\3\23\0"+
    "\5\3\1\370\21\3\2\0\3\3\1\0\3\3\1\371"+
    "\1\3\23\0\7\3\1\116\17\3\2\0\3\3\1\0"+
    "\5\3\23\0\4\3\1\372\10\3\1\373\11\3\2\0"+
    "\3\3\1\0\5\3\23\0\2\3\1\374\4\3\1\375"+
    "\17\3\2\0\3\3\1\0\2\3\1\376\1\377\1\u0100"+
    "\23\0\1\u0101\4\3\1\u0102\14\3\1\u0103\4\3\2\0"+
    "\3\3\1\0\5\3\23\0\1\u0104\1\3\1\u0105\24\3"+
    "\2\0\3\3\1\0\2\3\1\u0106\1\3\1\u0107\23\0"+
    "\27\3\2\0\3\3\1\0\5\3\23\0\7\3\1\u0108"+
    "\17\3\2\0\3\3\1\0\4\3\1\116\23\0\27\3"+
    "\2\0\3\3\1\0\5\3\23\0\4\3\1\u0109\22\3"+
    "\2\0\3\3\1\0\5\3\23\0\2\3\1\u010a\4\3"+
    "\1\u010b\17\3\2\0\3\3\1\0\3\3\1\u010c\1\3"+
    "\23\0\5\3\1\u010d\21\3\2\0\3\3\1\0\4\3"+
    "\1\u010e\23\0\5\3\1\u010f\21\3\2\0\3\3\1\0"+
    "\5\3\23\0\24\3\1\u0110\2\3\2\0\3\3\1\0"+
    "\3\3\1\u0111\1\u0112\23\0\27\3\2\0\3\3\1\0"+
    "\4\3\1\u0113\23\0\27\3\2\0\3\3\1\0\5\3"+
    "\23\0\10\3\1\u0114\16\3\2\0\3\3\1\0\5\3"+
    "\23\0\4\3\1\u0115\12\3\1\244\7\3\2\0\3\3"+
    "\1\0\5\3\23\0\2\3\1\u0116\4\3\1\u0117\17\3"+
    "\2\0\3\3\1\0\5\3\23\0\4\3\1\u0118\22\3"+
    "\2\0\3\3\1\0\5\3\23\0\4\3\1\u0119\22\3"+
    "\2\0\3\3\1\0\2\3\1\260\2\3\23\0\1\3"+
    "\1\u011a\2\3\1\u011b\1\3\1\u011c\1\3\1\u011d\3\3"+
    "\1\u011e\1\u011f\11\3\2\0\3\3\1\0\5\3\23\0"+
    "\2\3\1\u0120\24\3\2\0\3\3\1\0\5\3\23\0"+
    "\7\3\1\u0121\17\3\2\0\3\3\1\0\5\3\23\0"+
    "\22\3\1\u0122\4\3\2\0\3\3\1\0\5\3\23\0"+
    "\13\3\1\u0123\6\3\1\100\4\3\2\0\3\3\1\0"+
    "\5\3\23\0\24\3\1\101\2\3\2\0\3\3\1\0"+
    "\4\3\1\u0124\23\0\4\3\1\u0125\3\3\1\u0126\4\3"+
    "\1\u0127\4\3\1\u0128\4\3\2\0\3\3\1\0\5\3"+
    "\23\0\1\u0129\26\3\2\0\3\3\1\0\5\3\23\0"+
    "\1\u012a\26\3\2\0\3\3\1\0\5\3\23\0\22\3"+
    "\1\101\4\3\2\0\3\3\1\0\5\3\23\0\5\3"+
    "\1\u012b\4\3\1\u012c\14\3\2\0\3\3\1\0\3\3"+
    "\1\u012d\1\3\23\0\27\3\2\0\3\3\1\0\5\3"+
    "\23\0\20\3\1\101\6\3\2\0\3\3\1\0\5\3"+
    "\23\0\15\3\1\u012e\11\3\2\0\3\3\1\0\5\3"+
    "\23\0\1\u012f\26\3\2\0\3\3\1\0\4\3\1\u0130"+
    "\23\0\27\3\2\0\3\3\1\0\5\3\23\0\1\u0111"+
    "\26\3\2\0\3\3\1\0\5\3\23\0\7\3\1\u0131"+
    "\17\3\2\0\3\3\1\0\5\3\23\0\4\3\1\100"+
    "\22\3\2\0\3\3\1\0\5\3\23\0\1\377\6\3"+
    "\1\u0132\17\3\2\0\3\3\1\0\5\3\23\0\4\3"+
    "\1\u0133\22\3\2\0\3\3\1\0\2\3\1\101\2\3"+
    "\23\0\27\3\2\0\3\3\1\0\5\3\23\0\16\3"+
    "\1\100\10\3\2\0\3\3\1\0\4\3\1\u0107\23\0"+
    "\27\3\2\0\3\3\1\0\5\3\23\0\3\3\1\100"+
    "\1\u0109\22\3\2\0\3\3\1\0\5\3\23\0\5\3"+
    "\1\261\21\3\2\0\3\3\1\0\2\3\1\177\2\3"+
    "\23\0\1\3\1\u0134\25\3\2\0\3\3\1\0\2\3"+
    "\1\u0135\2\3\23\0\27\3\2\0\3\3\1\0\5\3"+
    "\23\0\14\3\1\u0136\12\3\2\0\3\3\1\0\5\3"+
    "\23\0\14\3\1\u0137\12\3\2\0\3\3\1\0\5\3"+
    "\23\0\5\3\1\u0113\21\3\2\0\3\3\1\0\5\3"+
    "\23\0\2\3\1\u0138\11\3\1\131\12\3\2\0\3\3"+
    "\1\0\5\3\23\0\4\3\1\u0139\22\3\2\0\3\3"+
    "\1\0\4\3\1\u013a\23\0\5\3\1\u013b\21\3\2\0"+
    "\3\3\1\0\5\3\23\0\2\3\1\u013c\24\3\2\0"+
    "\3\3\1\0\5\3\23\0\14\3\1\333\12\3\4\0"+
    "\1\u013d\2\0\1\u013d\3\0\1\u013e\2\0\1\u013e\50\0"+
    "\3\3\1\0\4\3\1\u013f\23\0\27\3\2\0\3\3"+
    "\1\0\5\3\23\0\2\3\1\u0140\24\3\2\0\3\3"+
    "\1\0\3\3\1\u0141\1\3\23\0\14\3\1\u0142\12\3"+
    "\2\0\3\3\1\0\5\3\23\0\2\3\1\u0143\24\3"+
    "\2\0\3\3\1\0\5\3\23\0\2\3\1\100\5\3"+
    "\1\u0144\16\3\2\0\3\3\1\0\5\3\23\0\12\3"+
    "\1\u0145\14\3\2\0\3\3\1\0\5\3\23\0\14\3"+
    "\1\144\12\3\2\0\3\3\1\0\5\3\23\0\7\3"+
    "\1\333\16\3\1\u0146\2\0\3\3\1\0\2\3\1\u0147"+
    "\2\3\23\0\27\3\2\0\3\3\1\0\5\3\23\0"+
    "\1\u0137\26\3\2\0\3\3\1\0\5\3\23\0\2\3"+
    "\1\u0111\24\3\2\0\3\3\1\0\5\3\23\0\17\3"+
    "\1\101\7\3\2\0\3\3\1\0\5\3\23\0\5\3"+
    "\1\100\21\3\2\0\3\3\1\0\2\3\1\105\2\3"+
    "\23\0\27\3\2\0\3\3\1\0\5\3\23\0\17\3"+
    "\1\u0148\7\3\2\0\3\3\1\0\5\3\23\0\1\3"+
    "\1\u0110\25\3\2\0\3\3\1\0\5\3\23\0\2\3"+
    "\1\u0107\24\3\2\0\3\3\1\0\5\3\23\0\1\3"+
    "\1\100\25\3\2\0\3\3\1\0\5\3\23\0\1\u0107"+
    "\26\3\2\0\3\3\1\0\5\3\23\0\2\3\1\u0149"+
    "\24\3\1\0\16\72\1\272\1\u014a\13\72\1\273\31\72"+
    "\16\273\1\u014b\46\273\1\0\3\3\1\0\5\3\23\0"+
    "\12\3\1\u014c\14\3\2\0\3\3\1\0\5\3\23\0"+
    "\7\3\1\u014d\17\3\2\0\3\3\1\0\5\3\23\0"+
    "\14\3\1\u014e\12\3\2\0\3\3\1\0\5\3\23\0"+
    "\7\3\1\u014f\17\3\2\0\3\3\1\0\5\3\23\0"+
    "\2\3\1\u0150\24\3\2\0\3\3\1\0\5\3\23\0"+
    "\1\u0151\1\3\1\100\24\3\2\0\3\3\1\0\5\3"+
    "\23\0\2\3\1\u0152\24\3\2\0\3\3\1\0\4\3"+
    "\1\u0153\23\0\27\3\2\0\3\3\1\0\4\3\1\u0154"+
    "\23\0\14\3\1\u0155\12\3\2\0\3\3\1\0\5\3"+
    "\23\0\1\u0156\1\3\1\u0157\24\3\2\0\3\3\1\0"+
    "\5\3\23\0\10\3\1\u0158\16\3\2\0\3\3\1\0"+
    "\5\3\23\0\13\3\1\131\13\3\2\0\3\3\1\0"+
    "\5\3\23\0\1\244\26\3\2\0\3\3\1\0\5\3"+
    "\23\0\10\3\1\100\16\3\2\0\3\3\1\0\5\3"+
    "\23\0\17\3\1\u0159\7\3\2\0\3\3\1\0\5\3"+
    "\23\0\4\3\1\u015a\3\3\1\u015b\10\3\1\100\5\3"+
    "\2\0\3\3\1\0\5\3\1\u015c\22\0\27\3\2\0"+
    "\3\3\1\0\5\3\23\0\10\3\1\u0135\16\3\2\0"+
    "\3\3\1\0\5\3\23\0\2\3\1\u015d\2\3\1\u015e"+
    "\21\3\2\0\3\3\1\0\5\3\23\0\2\3\1\u015f"+
    "\24\3\2\0\3\3\1\0\5\3\23\0\4\3\1\100"+
    "\10\3\1\u0160\11\3\2\0\3\3\1\0\4\3\1\u0161"+
    "\23\0\27\3\2\0\3\3\1\0\5\3\23\0\1\u0162"+
    "\26\3\2\0\3\3\1\0\4\3\1\u0163\23\0\27\3"+
    "\2\0\3\3\1\0\5\3\23\0\4\3\1\u0164\22\3"+
    "\2\0\3\3\1\0\5\3\23\0\6\3\1\u0165\20\3"+
    "\2\0\3\3\1\0\2\3\1\u014d\2\3\23\0\2\3"+
    "\1\100\24\3\2\0\3\3\1\0\2\3\1\u0166\2\3"+
    "\23\0\14\3\1\u0167\12\3\2\0\3\3\1\0\5\3"+
    "\23\0\17\3\1\u0168\2\3\1\100\4\3\2\0\1\3"+
    "\1\u0169\1\3\1\0\5\3\23\0\27\3\2\0\3\3"+
    "\1\0\2\3\1\100\2\3\23\0\27\3\2\0\3\3"+
    "\1\0\5\3\23\0\2\3\1\u016a\24\3\2\0\3\3"+
    "\1\0\5\3\23\0\26\3\1\u016b\2\0\3\3\1\0"+
    "\5\3\23\0\15\3\1\u016c\11\3\2\0\3\3\1\0"+
    "\5\3\23\0\1\u016d\26\3\2\0\3\3\1\0\4\3"+
    "\1\100\23\0\1\3\1\u016e\25\3\2\0\3\3\1\0"+
    "\3\3\1\u016f\1\3\23\0\27\3\2\0\3\3\1\0"+
    "\4\3\1\u0170\23\0\27\3\2\0\3\3\1\0\5\3"+
    "\23\0\7\3\1\u0171\17\3\2\0\3\3\1\0\5\3"+
    "\23\0\2\3\1\u0172\24\3\2\0\3\3\1\0\5\3"+
    "\23\0\4\3\1\u0173\22\3\2\0\3\3\1\0\5\3"+
    "\23\0\2\3\1\u0174\4\3\1\u0175\17\3\2\0\3\3"+
    "\1\0\4\3\1\u0176\23\0\27\3\2\0\3\3\1\0"+
    "\5\3\23\0\10\3\1\u0177\4\3\1\100\1\3\1\u0178"+
    "\7\3\2\0\3\3\1\0\5\3\23\0\12\3\1\223"+
    "\14\3\2\0\3\3\1\0\4\3\1\u0179\23\0\27\3"+
    "\2\0\3\3\1\0\5\3\23\0\4\3\1\u017a\22\3"+
    "\2\0\3\3\1\0\5\3\23\0\10\3\1\270\16\3"+
    "\2\0\3\3\1\0\5\3\23\0\10\3\1\u017b\16\3"+
    "\2\0\3\3\1\0\5\3\23\0\6\3\1\u0154\1\3"+
    "\1\u017c\4\3\1\u017d\11\3\2\0\3\3\1\0\5\3"+
    "\23\0\10\3\1\u017e\16\3\2\0\3\3\1\0\2\3"+
    "\1\223\2\3\23\0\7\3\1\u0111\12\3\1\u017f\1\3"+
    "\1\u0180\2\3\2\0\3\3\1\0\5\3\23\0\14\3"+
    "\1\102\12\3\2\0\3\3\1\0\5\3\23\0\7\3"+
    "\1\223\17\3\2\0\3\3\1\0\5\3\23\0\2\3"+
    "\1\u0111\3\3\1\u011c\20\3\2\0\3\3\1\0\2\3"+
    "\1\u0181\2\3\23\0\27\3\2\0\3\3\1\0\5\3"+
    "\23\0\2\3\1\u0182\24\3\2\0\3\3\1\0\5\3"+
    "\23\0\15\3\1\u0183\11\3\2\0\3\3\1\0\5\3"+
    "\23\0\5\3\1\u0184\21\3\2\0\3\3\1\0\5\3"+
    "\23\0\5\3\1\u0185\7\3\1\u0186\11\3\2\0\3\3"+
    "\1\0\5\3\23\0\15\3\1\u0187\11\3\2\0\3\3"+
    "\1\0\5\3\23\0\1\u0188\26\3\2\0\3\3\1\0"+
    "\5\3\23\0\2\3\1\100\1\3\1\100\3\3\1\u0189"+
    "\16\3\2\0\3\3\1\0\5\3\23\0\1\u0152\26\3"+
    "\2\0\3\3\1\0\5\3\23\0\15\3\1\u0143\11\3"+
    "\2\0\3\3\1\0\2\3\1\u018a\2\3\23\0\4\3"+
    "\1\u018b\10\3\1\u018c\6\3\1\u018d\2\3\2\0\3\3"+
    "\1\0\2\3\1\223\2\3\23\0\27\3\2\0\3\3"+
    "\1\0\3\3\1\u018e\1\u018f\23\0\27\3\2\0\3\3"+
    "\1\0\4\3\1\u0190\23\0\27\3\2\0\3\3\1\0"+
    "\5\3\23\0\5\3\1\u0191\21\3\2\0\3\3\1\0"+
    "\5\3\23\0\6\3\1\u0192\13\3\1\u0193\4\3\2\0"+
    "\3\3\1\0\5\3\23\0\5\3\1\u0194\21\3\2\0"+
    "\3\3\1\0\5\3\23\0\10\3\1\u0195\16\3\2\0"+
    "\3\3\1\0\5\3\23\0\10\3\1\102\16\3\2\0"+
    "\3\3\1\0\4\3\1\100\23\0\27\3\2\0\3\3"+
    "\1\0\5\3\23\0\1\223\26\3\2\0\3\3\1\0"+
    "\5\3\23\0\10\3\1\u0118\16\3\2\0\3\3\1\0"+
    "\5\3\23\0\2\3\1\u0196\24\3\2\0\3\3\1\0"+
    "\5\3\23\0\22\3\1\100\4\3\2\0\3\3\1\0"+
    "\2\3\1\267\2\3\23\0\27\3\2\0\3\3\1\0"+
    "\5\3\23\0\2\3\1\u0197\1\3\1\u0198\22\3\2\0"+
    "\3\3\1\0\4\3\1\u0199\23\0\2\3\1\100\24\3"+
    "\2\0\3\3\1\0\5\3\23\0\15\3\1\223\11\3"+
    "\2\0\3\3\1\0\5\3\23\0\14\3\1\263\12\3"+
    "\2\0\3\3\1\0\5\3\23\0\1\3\1\u019a\25\3"+
    "\2\0\3\3\1\0\5\3\23\0\21\3\1\100\5\3"+
    "\2\0\3\3\1\0\5\3\23\0\21\3\1\u0132\5\3"+
    "\2\0\3\3\1\0\5\3\23\0\23\3\1\u019b\3\3"+
    "\2\0\3\3\1\0\5\3\23\0\1\u0113\26\3\2\0"+
    "\3\3\1\0\5\3\23\0\23\3\1\116\3\3\2\0"+
    "\3\3\1\0\5\3\23\0\12\3\1\100\14\3\2\0"+
    "\1\3\1\u019c\1\3\1\0\5\3\23\0\27\3\2\0"+
    "\3\3\1\0\5\3\23\0\2\3\1\u019d\11\3\1\u019e"+
    "\12\3\2\0\3\3\1\0\5\3\23\0\2\3\1\u019f"+
    "\4\3\1\100\17\3\2\0\3\3\1\0\3\3\1\223"+
    "\1\3\23\0\27\3\2\0\3\3\1\0\4\3\1\u01a0"+
    "\23\0\27\3\2\0\3\3\1\0\5\3\23\0\4\3"+
    "\1\u01a1\22\3\2\0\3\3\1\0\5\3\23\0\2\3"+
    "\1\u01a2\24\3\2\0\3\3\1\0\2\3\1\u01a3\2\3"+
    "\23\0\27\3\2\0\3\3\1\0\4\3\1\u01a4\23\0"+
    "\27\3\2\0\3\3\1\0\5\3\23\0\2\3\1\u01a5"+
    "\24\3\2\0\3\3\1\0\5\3\23\0\15\3\1\u01a6"+
    "\11\3\2\0\3\3\1\0\5\3\23\0\2\3\1\u01a7"+
    "\24\3\2\0\3\3\1\0\3\3\1\u01a8\1\3\23\0"+
    "\27\3\2\0\3\3\1\0\3\3\1\u01a9\1\3\23\0"+
    "\4\3\1\276\2\3\1\u010c\17\3\2\0\3\3\1\0"+
    "\5\3\23\0\15\3\1\u01aa\11\3\2\0\3\3\1\0"+
    "\5\3\23\0\1\u01ab\26\3\2\0\3\3\1\0\5\3"+
    "\23\0\4\3\1\u01ac\22\3\2\0\3\3\1\0\5\3"+
    "\23\0\10\3\1\101\16\3\2\0\3\3\1\0\5\3"+
    "\23\0\7\3\1\230\17\3\2\0\3\3\1\0\5\3"+
    "\23\0\2\3\1\u01ad\24\3\2\0\3\3\1\0\5\3"+
    "\23\0\4\3\1\u01ae\22\3\2\0\3\3\1\0\5\3"+
    "\23\0\4\3\1\u01af\22\3\2\0\3\3\1\0\4\3"+
    "\1\u01b0\23\0\27\3\2\0\3\3\1\0\5\3\23\0"+
    "\2\3\1\u01b1\5\3\1\u01b2\4\3\1\u01b3\5\3\1\u01b4"+
    "\3\3\2\0\3\3\1\0\5\3\23\0\13\3\1\270"+
    "\13\3\2\0\3\3\1\0\3\3\1\301\1\3\23\0"+
    "\27\3\2\0\3\3\1\0\5\3\23\0\7\3\1\100"+
    "\17\3\2\0\3\3\1\0\3\3\1\131\1\3\23\0"+
    "\27\3\2\0\3\3\1\0\3\3\1\u0152\1\3\23\0"+
    "\27\3\2\0\3\3\1\0\5\3\23\0\4\3\1\u01b5"+
    "\22\3\2\0\3\3\1\0\5\3\23\0\4\3\1\u01b6"+
    "\22\3\2\0\3\3\1\0\2\3\1\u01b7\2\3\23\0"+
    "\5\3\1\101\21\3\2\0\3\3\1\0\5\3\23\0"+
    "\12\3\1\u01b8\14\3\2\0\3\3\1\0\3\3\1\u01b9"+
    "\1\3\23\0\27\3\2\0\3\3\1\0\5\3\23\0"+
    "\10\3\1\60\5\3\1\u0110\10\3\2\0\3\3\1\0"+
    "\5\3\23\0\23\3\1\100\3\3\4\0\1\u013d\2\0"+
    "\1\u013d\57\0\3\3\1\0\5\3\23\0\14\3\1\u01ba"+
    "\12\3\2\0\3\3\1\0\5\3\23\0\5\3\1\u0179"+
    "\21\3\2\0\3\3\1\0\5\3\23\0\5\3\1\270"+
    "\21\3\2\0\3\3\1\0\5\3\23\0\7\3\1\u01bb"+
    "\17\3\2\0\3\3\1\0\5\3\23\0\15\3\1\100"+
    "\11\3\2\0\3\3\1\0\4\3\1\u01bc\23\0\27\3"+
    "\2\0\3\3\1\0\5\3\23\0\2\3\1\u01bd\24\3"+
    "\2\0\3\3\1\0\3\3\1\101\1\3\23\0\27\3"+
    "\2\0\3\3\1\0\5\3\23\0\7\3\1\u01be\17\3"+
    "\2\0\3\3\1\0\3\3\1\u01bf\1\3\23\0\27\3"+
    "\2\0\3\3\1\0\2\3\1\u0133\2\3\23\0\27\3"+
    "\1\0\33\u01c0\1\0\31\u01c0\16\273\1\u014b\1\u01c1\45\273"+
    "\1\0\3\3\1\0\5\3\23\0\7\3\1\u01c2\17\3"+
    "\2\0\3\3\1\0\5\3\23\0\10\3\1\374\16\3"+
    "\2\0\3\3\1\0\5\3\23\0\7\3\1\333\17\3"+
    "\2\0\3\3\1\0\4\3\1\u0192\23\0\27\3\2\0"+
    "\3\3\1\0\5\3\23\0\5\3\1\102\21\3\2\0"+
    "\3\3\1\0\5\3\23\0\13\3\1\u01c3\13\3\2\0"+
    "\3\3\1\0\5\3\23\0\4\3\1\101\22\3\2\0"+
    "\3\3\1\0\4\3\1\u01c4\23\0\27\3\2\0\3\3"+
    "\1\0\5\3\23\0\1\u01c5\26\3\2\0\3\3\1\0"+
    "\5\3\23\0\22\3\1\270\4\3\2\0\3\3\1\0"+
    "\3\3\1\u01c6\1\3\23\0\27\3\2\0\3\3\1\0"+
    "\5\3\23\0\5\3\1\u01c7\21\3\2\0\3\3\1\0"+
    "\5\3\23\0\5\3\1\u01c8\21\3\2\0\3\3\1\0"+
    "\2\3\1\u01c9\2\3\23\0\27\3\2\0\3\3\1\0"+
    "\5\3\23\0\5\3\1\u01ca\6\3\1\u01cb\12\3\2\0"+
    "\3\3\1\0\5\3\23\0\7\3\1\u01cc\17\3\40\0"+
    "\1\u01cd\26\0\3\3\1\0\5\3\23\0\5\3\1\u01bb"+
    "\21\3\2\0\3\3\1\0\5\3\23\0\1\u01a7\26\3"+
    "\2\0\3\3\1\0\5\3\23\0\6\3\1\u01ce\20\3"+
    "\2\0\3\3\1\0\5\3\23\0\4\3\1\u0143\22\3"+
    "\2\0\3\3\1\0\5\3\23\0\24\3\1\u0107\2\3"+
    "\2\0\3\3\1\0\5\3\23\0\6\3\1\101\20\3"+
    "\2\0\3\3\1\0\5\3\23\0\2\3\1\u01cf\24\3"+
    "\2\0\3\3\1\0\5\3\23\0\15\3\1\u01d0\11\3"+
    "\2\0\3\3\1\0\5\3\23\0\7\3\1\u01d1\17\3"+
    "\2\0\3\3\1\0\5\3\23\0\15\3\1\u01d2\11\3"+
    "\2\0\3\3\1\0\4\3\1\u0110\23\0\27\3\2\0"+
    "\3\3\1\0\5\3\23\0\17\3\1\260\7\3\2\0"+
    "\3\3\1\0\5\3\23\0\10\3\1\u01d3\16\3\2\0"+
    "\3\3\1\0\5\3\23\0\15\3\1\u01d4\2\3\1\u01d5"+
    "\6\3\2\0\3\3\1\0\3\3\1\270\1\3\23\0"+
    "\27\3\2\0\3\3\1\0\5\3\23\0\2\3\1\u01b1"+
    "\24\3\2\0\3\3\1\0\5\3\23\0\4\3\1\u01d6"+
    "\22\3\2\0\3\3\1\0\5\3\23\0\4\3\1\u01d7"+
    "\22\3\2\0\3\3\1\0\5\3\23\0\5\3\1\333"+
    "\21\3\2\0\3\3\1\0\5\3\23\0\14\3\1\u01d8"+
    "\12\3\2\0\3\3\1\0\2\3\1\u01d9\2\3\23\0"+
    "\27\3\2\0\3\3\1\0\5\3\23\0\5\3\1\u01da"+
    "\21\3\2\0\3\3\1\0\5\3\23\0\5\3\1\u01db"+
    "\1\3\1\u01c5\17\3\2\0\3\3\1\0\5\3\23\0"+
    "\5\3\1\223\21\3\2\0\3\3\1\0\5\3\23\0"+
    "\21\3\1\101\5\3\2\0\3\3\1\0\5\3\23\0"+
    "\13\3\1\u01dc\13\3\2\0\3\3\1\0\5\3\23\0"+
    "\7\3\1\u01dd\17\3\2\0\3\3\1\0\3\3\1\u01de"+
    "\1\3\23\0\27\3\2\0\3\3\1\0\5\3\23\0"+
    "\14\3\1\312\12\3\2\0\3\3\1\0\5\3\23\0"+
    "\14\3\1\270\12\3\2\0\3\3\1\0\5\3\23\0"+
    "\2\3\1\377\24\3\2\0\3\3\1\0\5\3\23\0"+
    "\14\3\1\u01df\12\3\2\0\3\3\1\0\5\3\23\0"+
    "\2\3\1\u01e0\24\3\2\0\3\3\1\0\5\3\23\0"+
    "\2\3\1\u01e1\24\3\2\0\3\3\1\0\5\3\23\0"+
    "\1\u01e2\26\3\2\0\3\3\1\0\5\3\23\0\14\3"+
    "\1\u01e3\12\3\2\0\3\3\1\0\5\3\23\0\1\3"+
    "\1\u01e4\1\3\1\u01e5\1\3\1\u01e6\20\3\1\u01e7\2\0"+
    "\3\3\1\0\5\3\23\0\4\3\1\u01e8\22\3\2\0"+
    "\3\3\1\0\5\3\23\0\2\3\1\u0160\24\3\2\0"+
    "\3\3\1\0\4\3\1\u01e9\23\0\27\3\2\0\3\3"+
    "\1\0\5\3\23\0\2\3\1\u01ea\24\3\2\0\3\3"+
    "\1\0\5\3\23\0\7\3\1\u0111\17\3\2\0\3\3"+
    "\1\0\5\3\23\0\4\3\1\u01eb\22\3\2\0\3\3"+
    "\1\0\4\3\1\u01ec\23\0\27\3\2\0\3\3\1\0"+
    "\5\3\23\0\1\u01ed\26\3\2\0\3\3\1\0\5\3"+
    "\23\0\2\3\1\u01ee\24\3\2\0\3\3\1\0\5\3"+
    "\23\0\1\u01ef\13\3\1\u01f0\12\3\2\0\3\3\1\0"+
    "\5\3\23\0\4\3\1\u01f1\22\3\2\0\3\3\1\0"+
    "\5\3\23\0\2\3\1\u0174\24\3\2\0\3\3\1\0"+
    "\5\3\23\0\22\3\1\333\4\3\2\0\3\3\1\0"+
    "\5\3\23\0\1\u01f2\26\3\2\0\3\3\1\0\5\3"+
    "\23\0\2\3\1\u01f3\24\3\2\0\3\3\1\0\5\3"+
    "\23\0\2\3\1\u01f4\24\3\2\0\3\3\1\0\5\3"+
    "\23\0\14\3\1\223\12\3\2\0\1\3\1\u019c\1\3"+
    "\1\0\5\3\23\0\1\u01f5\26\3\2\0\3\3\1\0"+
    "\5\3\23\0\21\3\1\u01f6\5\3\2\0\3\3\1\0"+
    "\5\3\23\0\4\3\1\u01f7\22\3\2\0\3\3\1\0"+
    "\5\3\23\0\14\3\1\u01f8\12\3\2\0\3\3\1\0"+
    "\5\3\23\0\5\3\1\137\21\3\2\0\3\3\1\0"+
    "\5\3\23\0\11\3\1\u01f9\15\3\2\0\3\3\1\0"+
    "\4\3\1\u01fa\23\0\27\3\2\0\3\3\1\0\5\3"+
    "\23\0\2\3\1\126\24\3\2\0\3\3\1\0\4\3"+
    "\1\u01fb\23\0\27\3\2\0\3\3\1\0\5\3\23\0"+
    "\3\3\1\100\23\3\2\0\3\3\1\0\5\3\23\0"+
    "\10\3\1\u01fc\16\3\2\0\3\3\1\0\5\3\23\0"+
    "\5\3\1\u01fd\11\3\1\260\7\3\2\0\3\3\1\0"+
    "\3\3\1\u01fe\1\3\23\0\27\3\2\0\3\3\1\0"+
    "\5\3\23\0\14\3\1\u01ff\12\3\2\0\3\3\1\0"+
    "\2\3\1\u0200\2\3\23\0\5\3\1\223\21\3\2\0"+
    "\3\3\1\0\5\3\23\0\4\3\1\u0201\22\3\2\0"+
    "\3\3\1\0\5\3\23\0\1\102\26\3\2\0\3\3"+
    "\1\0\5\3\23\0\1\3\1\u0202\25\3\2\0\3\3"+
    "\1\0\5\3\23\0\4\3\1\u0203\22\3\2\0\3\3"+
    "\1\0\5\3\23\0\10\3\1\223\16\3\2\0\3\3"+
    "\1\0\5\3\23\0\15\3\1\260\11\3\2\0\3\3"+
    "\1\0\5\3\23\0\5\3\1\u0204\21\3\2\0\3\3"+
    "\1\0\5\3\23\0\14\3\1\u0205\12\3\2\0\3\3"+
    "\1\0\2\3\1\u0206\2\3\23\0\27\3\2\0\3\3"+
    "\1\0\5\3\23\0\14\3\1\u0207\12\3\2\0\3\3"+
    "\1\0\5\3\23\0\22\3\1\u0208\4\3\2\0\3\3"+
    "\1\0\5\3\23\0\1\3\1\u0147\25\3\2\0\3\3"+
    "\1\0\5\3\23\0\2\3\1\u0209\24\3\2\0\3\3"+
    "\1\0\4\3\1\u020a\23\0\27\3\2\0\3\3\1\0"+
    "\5\3\23\0\5\3\1\u020b\21\3\2\0\3\3\1\0"+
    "\5\3\23\0\1\100\6\3\1\u01fe\17\3\2\0\3\3"+
    "\1\0\5\3\23\0\4\3\1\374\22\3\2\0\3\3"+
    "\1\0\5\3\23\0\1\u020c\26\3\2\0\3\3\1\0"+
    "\5\3\23\0\11\3\1\u0186\15\3\2\0\3\3\1\0"+
    "\5\3\23\0\2\3\1\u016e\24\3\2\0\3\3\1\0"+
    "\5\3\23\0\2\3\1\u020d\24\3\2\0\3\3\1\0"+
    "\5\3\23\0\14\3\1\u020e\12\3\2\0\3\3\1\0"+
    "\5\3\23\0\2\3\1\u020f\24\3\2\0\3\3\1\0"+
    "\5\3\23\0\11\3\1\100\15\3\2\0\3\3\1\0"+
    "\2\3\1\270\2\3\23\0\27\3\2\0\3\3\1\0"+
    "\3\3\1\371\1\3\23\0\27\3\2\0\3\3\1\0"+
    "\5\3\23\0\10\3\1\u0113\16\3\2\0\3\3\1\0"+
    "\5\3\23\0\23\3\1\333\3\3\2\0\3\3\1\0"+
    "\5\3\23\0\1\261\26\3\2\0\3\3\1\0\5\3"+
    "\23\0\5\3\1\u0210\21\3\2\0\3\3\1\0\5\3"+
    "\23\0\1\116\26\3\2\0\3\3\1\0\5\3\23\0"+
    "\5\3\1\101\21\3\2\0\3\3\1\0\4\3\1\223"+
    "\23\0\27\3\2\0\3\3\1\0\5\3\23\0\5\3"+
    "\1\u0211\21\3\2\0\3\3\1\0\5\3\23\0\14\3"+
    "\1\u0212\12\3\2\0\3\3\1\0\5\3\23\0\7\3"+
    "\1\u0207\17\3\2\0\3\3\1\0\5\3\23\0\14\3"+
    "\1\u0213\12\3\2\0\3\3\1\0\2\3\1\u01a7\2\3"+
    "\23\0\27\3\2\0\3\3\1\0\2\3\1\u0214\2\3"+
    "\23\0\27\3\41\0\1\u0215\25\0\3\3\1\0\5\3"+
    "\23\0\4\3\1\u0216\22\3\2\0\3\3\1\0\5\3"+
    "\23\0\15\3\1\u0217\11\3\2\0\3\3\1\0\5\3"+
    "\23\0\14\3\1\215\12\3\2\0\3\3\1\0\5\3"+
    "\23\0\5\3\1\u017f\21\3\2\0\3\3\1\0\4\3"+
    "\1\u018f\23\0\1\u0106\26\3\2\0\3\3\1\0\5\3"+
    "\23\0\7\3\1\u0218\17\3\2\0\3\3\1\0\5\3"+
    "\23\0\4\3\1\u0219\22\3\2\0\3\3\1\0\5\3"+
    "\23\0\7\3\1\u021a\17\3\2\0\3\3\1\0\5\3"+
    "\23\0\14\3\1\206\12\3\2\0\3\3\1\0\5\3"+
    "\23\0\2\3\1\56\24\3\2\0\3\3\1\0\5\3"+
    "\23\0\10\3\1\u01a4\16\3\2\0\3\3\1\0\5\3"+
    "\23\0\11\3\1\u021b\15\3\2\0\3\3\1\0\5\3"+
    "\23\0\2\3\1\u021c\24\3\2\0\3\3\1\0\5\3"+
    "\23\0\14\3\1\u01a7\12\3\2\0\3\3\1\0\5\3"+
    "\23\0\1\u01bd\26\3\2\0\3\3\1\0\3\3\1\377"+
    "\1\3\23\0\27\3\2\0\3\3\1\0\5\3\23\0"+
    "\14\3\1\u021d\12\3\2\0\3\3\1\0\5\3\23\0"+
    "\15\3\1\276\11\3\2\0\3\3\1\0\5\3\23\0"+
    "\5\3\1\206\21\3\2\0\3\3\1\0\5\3\23\0"+
    "\1\3\1\u021e\25\3\2\0\3\3\1\0\5\3\23\0"+
    "\5\3\1\227\21\3\2\0\3\3\1\0\4\3\1\u021f"+
    "\23\0\27\3\2\0\3\3\1\0\5\3\23\0\1\u0220"+
    "\26\3\2\0\3\3\1\0\5\3\23\0\22\3\1\u0107"+
    "\4\3\2\0\3\3\1\0\5\3\23\0\7\3\1\u0221"+
    "\17\3\2\0\3\3\1\0\3\3\1\u0222\1\3\23\0"+
    "\27\3\2\0\3\3\1\0\5\3\23\0\1\u0223\26\3"+
    "\2\0\3\3\1\0\2\3\1\u0224\2\3\23\0\27\3"+
    "\2\0\3\3\1\0\5\3\23\0\2\3\1\u0225\24\3"+
    "\2\0\3\3\1\0\5\3\23\0\7\3\1\105\17\3"+
    "\2\0\3\3\1\0\5\3\23\0\1\3\1\u0226\25\3"+
    "\2\0\3\3\1\0\5\3\23\0\10\3\1\u01ce\16\3"+
    "\2\0\3\3\1\0\5\3\23\0\14\3\1\u0227\12\3"+
    "\2\0\3\3\1\0\2\3\1\u0146\2\3\23\0\27\3"+
    "\2\0\3\3\1\0\5\3\23\0\5\3\1\u0228\21\3"+
    "\2\0\3\3\1\0\5\3\23\0\4\3\1\u0229\22\3"+
    "\2\0\3\3\1\0\5\3\23\0\15\3\1\u012a\11\3"+
    "\2\0\3\3\1\0\5\3\23\0\15\3\1\u022a\11\3"+
    "\2\0\3\3\1\0\5\3\23\0\10\3\1\u022b\16\3"+
    "\2\0\3\3\1\0\5\3\23\0\6\3\1\u022c\20\3"+
    "\2\0\3\3\1\0\5\3\23\0\2\3\1\u022d\24\3"+
    "\2\0\3\3\1\0\5\3\23\0\17\3\1\333\7\3"+
    "\2\0\3\3\1\0\5\3\23\0\1\u022e\26\3\2\0"+
    "\3\3\1\0\5\3\23\0\7\3\1\u01bd\17\3\2\0"+
    "\3\3\1\0\5\3\23\0\2\3\1\u022f\24\3\2\0"+
    "\3\3\1\0\5\3\23\0\1\u0230\26\3\2\0\3\3"+
    "\1\0\5\3\23\0\15\3\1\u0124\6\3\1\270\2\3"+
    "\2\0\3\3\1\0\5\3\23\0\1\3\1\101\25\3"+
    "\2\0\3\3\1\0\5\3\23\0\1\u0231\26\3\2\0"+
    "\3\3\1\0\5\3\23\0\15\3\1\u0232\11\3\2\0"+
    "\3\3\1\0\5\3\23\0\14\3\1\u0233\12\3\2\0"+
    "\3\3\1\0\5\3\23\0\14\3\1\374\12\3\2\0"+
    "\3\3\1\0\5\3\23\0\5\3\1\u0110\21\3\2\0"+
    "\3\3\1\0\5\3\23\0\14\3\1\u0234\12\3\2\0"+
    "\3\3\1\0\5\3\23\0\7\3\1\u0235\17\3\2\0"+
    "\3\3\1\0\5\3\23\0\4\3\1\u0236\22\3\2\0"+
    "\3\3\1\0\5\3\23\0\15\3\1\u0237\11\3\2\0"+
    "\3\3\1\0\5\3\23\0\1\100\26\3\2\0\3\3"+
    "\1\0\5\3\23\0\22\3\1\u0238\4\3\2\0\3\3"+
    "\1\0\5\3\23\0\14\3\1\377\12\3\2\0\3\3"+
    "\1\0\5\3\23\0\5\3\1\u0186\21\3\2\0\3\3"+
    "\1\0\5\3\23\0\5\3\1\u0239\21\3\2\0\3\3"+
    "\1\0\5\3\23\0\24\3\1\260\2\3\2\0\3\3"+
    "\1\0\2\3\1\u023a\2\3\23\0\27\3\2\0\3\3"+
    "\1\0\5\3\23\0\14\3\1\u023b\12\3\2\0\3\3"+
    "\1\0\5\3\23\0\1\310\1\3\1\267\24\3\2\0"+
    "\3\3\1\0\5\3\23\0\6\3\1\u0230\4\3\1\101"+
    "\13\3\2\0\3\3\1\0\5\3\23\0\13\3\1\u023c"+
    "\13\3\2\0\3\3\1\0\2\3\1\u0124\2\3\23\0"+
    "\27\3\40\0\1\u023d\26\0\3\3\1\0\5\3\23\0"+
    "\1\u023e\26\3\2\0\3\3\1\0\2\3\1\u023f\2\3"+
    "\23\0\27\3\2\0\3\3\1\0\5\3\23\0\1\106"+
    "\26\3\2\0\3\3\1\0\2\3\1\u0240\2\3\23\0"+
    "\27\3\2\0\3\3\1\0\5\3\23\0\14\3\1\u0241"+
    "\12\3\2\0\3\3\1\0\2\3\1\u0242\2\3\23\0"+
    "\27\3\2\0\3\3\1\0\5\3\23\0\1\3\1\u0243"+
    "\25\3\2\0\3\3\1\0\3\3\1\u01c5\1\3\23\0"+
    "\27\3\2\0\3\3\1\0\5\3\23\0\2\3\1\u0244"+
    "\24\3\2\0\3\3\1\0\5\3\23\0\4\3\1\u0245"+
    "\22\3\2\0\3\3\1\0\5\3\23\0\23\3\1\u0246"+
    "\3\3\2\0\3\3\1\0\5\3\23\0\2\3\1\u01e2"+
    "\24\3\2\0\3\3\1\0\5\3\23\0\6\3\1\u0143"+
    "\20\3\2\0\3\3\1\0\5\3\23\0\4\3\1\u0247"+
    "\22\3\2\0\3\3\1\0\5\3\23\0\5\3\1\u0248"+
    "\21\3\2\0\3\3\1\0\5\3\23\0\2\3\1\u0249"+
    "\24\3\2\0\3\3\1\0\2\3\1\u024a\2\3\23\0"+
    "\27\3\2\0\3\3\1\0\5\3\23\0\1\u024b\26\3"+
    "\2\0\3\3\1\0\5\3\23\0\2\3\1\100\11\3"+
    "\1\u014e\12\3\2\0\3\3\1\0\5\3\23\0\6\3"+
    "\1\u024c\20\3\2\0\3\3\1\0\5\3\23\0\4\3"+
    "\1\u024d\22\3\2\0\3\3\1\0\5\3\23\0\7\3"+
    "\1\u020a\17\3\2\0\3\3\1\0\5\3\23\0\3\3"+
    "\1\u024e\23\3\2\0\3\3\1\0\5\3\23\0\10\3"+
    "\1\u0230\16\3\2\0\3\3\1\0\2\3\1\u024f\2\3"+
    "\23\0\27\3\2\0\3\3\1\0\5\3\23\0\4\3"+
    "\1\u0186\22\3\2\0\3\3\1\0\4\3\1\u0250\23\0"+
    "\27\3\2\0\3\3\1\0\5\3\23\0\14\3\1\u016d"+
    "\12\3\2\0\3\3\1\0\5\3\23\0\4\3\1\u0251"+
    "\22\3\2\0\3\3\1\0\5\3\23\0\4\3\1\u0252"+
    "\22\3\2\0\3\3\1\0\2\3\1\u0253\2\3\23\0"+
    "\27\3\2\0\3\3\1\0\5\3\23\0\14\3\1\u0254"+
    "\12\3\2\0\3\3\1\0\5\3\23\0\4\3\1\u0255"+
    "\22\3\2\0\1\3\1\u0256\1\3\1\0\5\3\23\0"+
    "\27\3\2\0\3\3\1\0\2\3\1\u0110\2\3\23\0"+
    "\27\3\2\0\3\3\1\0\5\3\23\0\17\3\1\u0257"+
    "\7\3\2\0\3\3\1\0\5\3\23\0\20\3\1\u01a4"+
    "\6\3\2\0\3\3\1\0\3\3\1\u0258\1\3\23\0"+
    "\27\3\46\0\1\u0259\20\0\3\3\1\0\5\3\23\0"+
    "\22\3\1\u025a\4\3\2\0\3\3\1\0\5\3\23\0"+
    "\24\3\1\u018d\2\3\2\0\3\3\1\0\5\3\23\0"+
    "\2\3\1\u025b\24\3\2\0\3\3\1\0\5\3\23\0"+
    "\17\3\1\u021e\7\3\2\0\3\3\1\0\5\3\23\0"+
    "\10\3\1\251\16\3\2\0\3\3\1\0\5\3\23\0"+
    "\10\3\1\u025c\16\3\2\0\3\3\1\0\5\3\23\0"+
    "\17\3\1\251\7\3\2\0\3\3\1\0\5\3\23\0"+
    "\1\u025d\26\3\2\0\3\3\1\0\5\3\23\0\15\3"+
    "\1\u025e\11\3\2\0\1\3\1\u025f\1\3\1\0\5\3"+
    "\23\0\27\3\2\0\3\3\1\0\5\3\23\0\2\3"+
    "\1\267\24\3\2\0\3\3\1\0\5\3\23\0\15\3"+
    "\1\u0260\11\3\2\0\3\3\1\0\5\3\23\0\14\3"+
    "\1\u0261\12\3\2\0\3\3\1\0\5\3\23\0\7\3"+
    "\1\u0262\17\3\2\0\3\3\1\0\5\3\23\0\2\3"+
    "\1\u0263\24\3\2\0\3\3\1\0\5\3\23\0\4\3"+
    "\1\u0260\22\3\2\0\3\3\1\0\5\3\23\0\17\3"+
    "\1\177\7\3\2\0\3\3\1\0\5\3\23\0\16\3"+
    "\1\u0264\10\3\2\0\3\3\1\0\5\3\23\0\16\3"+
    "\1\u0265\10\3\2\0\3\3\1\0\5\3\23\0\10\3"+
    "\1\u0266\16\3\2\0\3\3\1\0\5\3\23\0\14\3"+
    "\1\u0267\12\3\2\0\3\3\1\0\5\3\23\0\5\3"+
    "\1\u0268\21\3\2\0\3\3\1\0\5\3\23\0\4\3"+
    "\1\u0248\22\3\2\0\3\3\1\0\5\3\23\0\6\3"+
    "\1\131\20\3\2\0\1\3\1\u0269\1\3\1\0\5\3"+
    "\23\0\27\3\2\0\3\3\1\0\5\3\23\0\7\3"+
    "\1\u0107\17\3\2\0\3\3\1\0\5\3\23\0\15\3"+
    "\1\u026a\11\3\2\0\3\3\1\0\5\3\23\0\2\3"+
    "\1\223\24\3\2\0\3\3\1\0\3\3\1\u01a8\1\3"+
    "\23\0\1\3\1\374\2\3\1\u026b\22\3\2\0\3\3"+
    "\1\0\5\3\23\0\4\3\1\u026c\22\3\2\0\3\3"+
    "\1\0\2\3\1\u026d\2\3\23\0\27\3\2\0\3\3"+
    "\1\0\2\3\1\265\2\3\23\0\27\3\2\0\3\3"+
    "\1\0\5\3\23\0\5\3\1\u0119\21\3\2\0\1\3"+
    "\1\u026e\1\3\1\0\5\3\23\0\10\3\1\u025c\16\3"+
    "\2\0\3\3\1\0\5\3\23\0\1\u026f\26\3\2\0"+
    "\3\3\1\0\5\3\23\0\15\3\1\u0270\3\3\1\u0271"+
    "\5\3\2\0\3\3\1\0\5\3\23\0\10\3\1\u0143"+
    "\16\3\2\0\3\3\1\0\5\3\23\0\7\3\1\u0132"+
    "\17\3\2\0\3\3\1\0\5\3\23\0\12\3\1\u0272"+
    "\7\3\1\u0273\4\3\2\0\3\3\1\0\5\3\23\0"+
    "\7\3\1\u0274\17\3\2\0\3\3\1\0\5\3\23\0"+
    "\14\3\1\u0275\12\3\2\0\3\3\1\0\5\3\23\0"+
    "\1\310\26\3\2\0\3\3\1\0\5\3\23\0\4\3"+
    "\1\u020f\22\3\2\0\3\3\1\0\5\3\23\0\14\3"+
    "\1\u0276\12\3\2\0\3\3\1\0\3\3\1\u0277\1\3"+
    "\23\0\27\3\2\0\3\3\1\0\5\3\23\0\14\3"+
    "\1\u0278\12\3\2\0\3\3\1\0\5\3\23\0\2\3"+
    "\1\u0279\24\3\2\0\3\3\1\0\5\3\23\0\7\3"+
    "\1\u027a\17\3\2\0\3\3\1\0\5\3\23\0\14\3"+
    "\1\u027b\12\3\2\0\3\3\1\0\3\3\1\u027c\1\3"+
    "\23\0\27\3\2\0\3\3\1\0\5\3\23\0\22\3"+
    "\1\u027d\4\3\2\0\3\3\1\0\2\3\1\u027e\2\3"+
    "\23\0\27\3\2\0\3\3\1\0\5\3\23\0\1\3"+
    "\1\u0193\25\3\2\0\3\3\1\0\5\3\23\0\22\3"+
    "\1\u027f\4\3\2\0\3\3\1\0\5\3\23\0\16\3"+
    "\1\u0280\10\3\2\0\3\3\1\0\3\3\1\u0111\1\3"+
    "\23\0\27\3\2\0\3\3\1\0\2\3\1\u0192\2\3"+
    "\23\0\27\3\2\0\3\3\1\0\5\3\23\0\5\3"+
    "\1\u012a\21\3\2\0\3\3\1\0\5\3\23\0\2\3"+
    "\1\u0281\24\3\2\0\3\3\1\0\5\3\23\0\15\3"+
    "\1\u018d\11\3\2\0\3\3\1\0\5\3\23\0\14\3"+
    "\1\u0282\12\3\2\0\3\3\1\0\5\3\23\0\6\3"+
    "\1\u0283\20\3\2\0\3\3\1\0\5\3\23\0\15\3"+
    "\1\u01d4\11\3\2\0\3\3\1\0\4\3\1\u0284\23\0"+
    "\27\3\2\0\3\3\1\0\5\3\23\0\12\3\1\u0285"+
    "\14\3\2\0\3\3\1\0\5\3\23\0\1\u0286\26\3"+
    "\2\0\3\3\1\0\5\3\23\0\5\3\1\u0287\21\3"+
    "\2\0\3\3\1\0\5\3\23\0\5\3\1\u0288\21\3"+
    "\2\0\3\3\1\0\5\3\23\0\1\u0289\26\3\2\0"+
    "\3\3\1\0\5\3\23\0\14\3\1\u028a\12\3\2\0"+
    "\3\3\1\0\5\3\23\0\15\3\1\u028b\11\3\2\0"+
    "\3\3\1\0\5\3\23\0\4\3\1\u028c\22\3\2\0"+
    "\3\3\1\0\5\3\23\0\2\3\1\u028d\24\3\2\0"+
    "\3\3\1\0\5\3\23\0\16\3\1\u028e\10\3\2\0"+
    "\3\3\1\0\5\3\23\0\1\3\1\u028f\2\3\1\u026c"+
    "\22\3\2\0\3\3\1\0\5\3\23\0\2\3\1\u0290"+
    "\24\3\2\0\3\3\1\0\5\3\23\0\4\3\1\u0291"+
    "\22\3\2\0\3\3\1\0\5\3\23\0\1\u0292\26\3"+
    "\2\0\3\3\1\0\5\3\23\0\14\3\1\u0293\12\3"+
    "\2\0\3\3\1\0\4\3\1\u0294\23\0\27\3\2\0"+
    "\3\3\1\0\5\3\23\0\15\3\1\u028d\11\3\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[33920];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\10\1\1\11\54\1\1\0\2\1\1\11"+
    "\151\1\1\0\25\1\1\0\202\1\1\0\14\1\1\0"+
    "\20\1\1\0\144\1\1\11\13\1\1\0\107\1\1\0"+
    "\47\1\1\0\33\1\1\11\73\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[660];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
public String lexeme;
public int linea;
public int PrimeraColumna;
public int UltimaColumna;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 184) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Tokens yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { lexeme=yytext(); linea=yyline + 1; PrimeraColumna=yycolumn + 1; UltimaColumna=yycolumn+yylength(); return ERROR;
            } 
            // fall through
          case 14: break;
          case 2: 
            { lexeme=yytext(); linea=yyline + 1; PrimeraColumna=yycolumn +1 ; UltimaColumna=yycolumn+yylength(); return Identificador;
            } 
            // fall through
          case 15: break;
          case 3: 
            { lexeme=yytext(); linea=yyline + 1; PrimeraColumna=yycolumn + 1; UltimaColumna=yycolumn+yylength(); return Int;
            } 
            // fall through
          case 16: break;
          case 4: 
            { /*Ignore*/
            } 
            // fall through
          case 17: break;
          case 5: 
            { lexeme=yytext(); linea=yyline + 1; PrimeraColumna=yycolumn + 1; UltimaColumna=yycolumn+yylength(); return Bit;
            } 
            // fall through
          case 18: break;
          case 6: 
            { lexeme=yytext(); linea=yyline + 1; PrimeraColumna=yycolumn + 1; UltimaColumna=yycolumn+yylength(); return Simbolo;
            } 
            // fall through
          case 19: break;
          case 7: 
            { lexeme=yytext(); linea=yyline + 1; PrimeraColumna=yycolumn + 1; UltimaColumna=yycolumn+yylength(); return StringError;
            } 
            // fall through
          case 20: break;
          case 8: 
            { lexeme=yytext(); linea=yyline + 1; PrimeraColumna=yycolumn + 1; UltimaColumna=yycolumn+yylength(); return Float;
            } 
            // fall through
          case 21: break;
          case 9: 
            { lexeme=yytext(); linea=yyline + 1; PrimeraColumna=yycolumn +1; UltimaColumna=yycolumn+yylength(); return Palabra_Reservada;
            } 
            // fall through
          case 22: break;
          case 10: 
            { lexeme=yytext(); linea=yyline + 1; PrimeraColumna=yycolumn + 1; UltimaColumna=yycolumn+yylength(); return ComentarioSimple;
            } 
            // fall through
          case 23: break;
          case 11: 
            { lexeme=yytext(); linea=yyline + 1; PrimeraColumna=yycolumn + 1; UltimaColumna=yycolumn+yylength(); return ComentarioMultilineaError;
            } 
            // fall through
          case 24: break;
          case 12: 
            { lexeme=yytext(); linea=yyline + 1; PrimeraColumna=yycolumn + 1; UltimaColumna=yycolumn+yylength(); return String;
            } 
            // fall through
          case 25: break;
          case 13: 
            { lexeme=yytext(); linea=yyline + 1; PrimeraColumna=yycolumn + 1; UltimaColumna=yycolumn+yylength(); return ComentarioMultilinea;
            } 
            // fall through
          case 26: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
