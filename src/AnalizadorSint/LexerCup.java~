/* The following code was generated by JFlex 1.7.0 */

package AnalizadorSint;
import java_cup.runtime.Symbol;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>C:/Users/danil/Desktop/ASin-MiniSQL-master/ASin_SQL/src/AnalizadorSint/LexerCup.flex</tt>
 */
class LexerCup implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\1\1\1\1\72\1\72\1\1\22\0\1\1\1\5\3\0"+
    "\1\12\1\12\1\0\1\65\1\66\1\10\1\6\1\63\1\7\1\62"+
    "\1\11\12\0\1\67\1\64\1\2\1\3\1\4\2\0\1\21\1\26"+
    "\1\20\1\23\1\22\1\34\1\43\1\42\1\30\1\0\1\44\1\35"+
    "\1\36\1\17\1\24\1\25\1\41\1\15\1\27\1\14\1\16\1\32"+
    "\1\33\1\31\1\37\1\40\1\70\1\0\1\71\1\12\2\0\1\54"+
    "\1\57\1\53\1\45\1\46\1\52\1\61\1\0\1\51\2\0\1\60"+
    "\1\0\1\47\1\55\2\0\1\56\1\0\1\50\7\0\1\13\10\0"+
    "\1\72\u1fa2\0\1\72\1\72\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\3\1\1\1\5"+
    "\1\6\1\7\1\10\1\1\1\2\24\1\1\11\1\12"+
    "\1\13\1\14\1\15\1\1\1\16\1\17\1\3\1\20"+
    "\13\0\1\21\11\0\1\22\7\0\1\23\1\24\6\0"+
    "\1\25\6\0\1\26\1\0\1\27\1\30\22\0\1\31"+
    "\2\0\1\32\3\0\1\33\13\0\1\34\14\0\1\35"+
    "\1\0\1\36\1\37\1\40\1\0\1\41\12\0\1\42"+
    "\3\0\1\43\1\44\1\45\1\0\1\46\3\0\1\47"+
    "\6\0\1\50\10\0\1\51\5\0\1\52\1\53\2\0"+
    "\1\54\1\0\1\55\1\0\1\56\7\0\1\57\1\60"+
    "\22\0\1\61\1\0\1\62\4\0\1\63\4\0\1\64"+
    "\1\0\1\65\1\0\1\66\10\0\1\67\3\0\1\70"+
    "\1\71\1\0\1\72\2\0\1\73\5\0\1\74\4\0"+
    "\1\75\2\0\1\76\6\0\1\77\5\0\1\100\1\101"+
    "\1\0\1\102\5\0\1\103\3\0\1\104\2\0\1\105"+
    "\1\0\1\106\6\0\1\107\1\110\1\0\1\111\1\112"+
    "\1\113\1\114\7\0\1\115\1\116\2\0\1\117\1\0"+
    "\1\120\2\0\1\121\1\0\1\122\1\0\1\123\1\124"+
    "\2\0\1\125\4\0\1\126\1\127\1\0\1\130\3\0"+
    "\1\131\2\0\1\132\7\0\1\133\1\134\1\135\1\0"+
    "\1\136\2\0\1\137\2\0\1\140\1\141\1\142\2\0"+
    "\1\143\1\0\1\144\1\145\4\0\1\146\3\0\1\147"+
    "\1\150\1\0\1\151\1\0\1\152\6\0\1\153\1\154"+
    "\3\0\1\155\1\156\1\0\1\157\1\0\1\160\1\161"+
    "\2\0\1\162\1\0\1\163";

  private static int [] zzUnpackAction() {
    int [] result = new int[425];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\73\0\166\0\261\0\73\0\354\0\u0127\0\u0162"+
    "\0\u0162\0\u0162\0\u0162\0\u0162\0\u019d\0\u01d8\0\u0213\0\u024e"+
    "\0\u0289\0\u02c4\0\u02ff\0\u033a\0\u0375\0\u03b0\0\u03eb\0\u0426"+
    "\0\u0461\0\u049c\0\u04d7\0\u0512\0\u054d\0\u0588\0\u05c3\0\u05fe"+
    "\0\u0639\0\73\0\73\0\73\0\73\0\73\0\u0674\0\73"+
    "\0\73\0\73\0\73\0\u06af\0\u06ea\0\u0725\0\u0760\0\u079b"+
    "\0\u07d6\0\u0811\0\u084c\0\u0887\0\u08c2\0\u08fd\0\u0938\0\u0973"+
    "\0\u09ae\0\u09e9\0\u0a24\0\u0a5f\0\u0a9a\0\u0ad5\0\u0b10\0\u0b4b"+
    "\0\u0b86\0\u0bc1\0\u0bfc\0\u0c37\0\u0c72\0\u0cad\0\u0ce8\0\u0d23"+
    "\0\u0d5e\0\u0d99\0\u0dd4\0\u0e0f\0\u0e4a\0\u0e85\0\u0ec0\0\u0efb"+
    "\0\73\0\u0f36\0\u0f71\0\u0fac\0\u0fe7\0\u1022\0\u105d\0\u1098"+
    "\0\u10d3\0\73\0\73\0\u110e\0\u1149\0\u1184\0\u11bf\0\u11fa"+
    "\0\u1235\0\u1270\0\u12ab\0\u12e6\0\u1321\0\u135c\0\u1397\0\u13d2"+
    "\0\u140d\0\u1448\0\u1483\0\u14be\0\u14f9\0\73\0\u1534\0\u156f"+
    "\0\73\0\u15aa\0\u15e5\0\u1620\0\73\0\u165b\0\u1696\0\u16d1"+
    "\0\u170c\0\u1747\0\u1782\0\u17bd\0\u17f8\0\u1833\0\u186e\0\u18a9"+
    "\0\73\0\u18e4\0\u191f\0\u195a\0\u1995\0\u19d0\0\u1a0b\0\u1a46"+
    "\0\u1a81\0\u1abc\0\u1af7\0\u1b32\0\u1b6d\0\73\0\u1ba8\0\73"+
    "\0\73\0\73\0\u1be3\0\73\0\u1c1e\0\u1c59\0\u1c94\0\u1ccf"+
    "\0\u1d0a\0\u1d45\0\u1d80\0\u1dbb\0\u1df6\0\u1e31\0\73\0\u1e6c"+
    "\0\u1ea7\0\u1ee2\0\73\0\73\0\73\0\u1f1d\0\73\0\u1f58"+
    "\0\u1f93\0\u1fce\0\u2009\0\u2044\0\u207f\0\u20ba\0\u20f5\0\u2130"+
    "\0\u216b\0\73\0\u21a6\0\u21e1\0\u221c\0\u2257\0\u2292\0\u22cd"+
    "\0\u2308\0\u2343\0\u237e\0\u23b9\0\u23f4\0\u242f\0\u246a\0\u24a5"+
    "\0\73\0\73\0\u24e0\0\u251b\0\73\0\u2556\0\u2591\0\u25cc"+
    "\0\73\0\u2607\0\u2642\0\u267d\0\u26b8\0\u26f3\0\u272e\0\u2769"+
    "\0\73\0\73\0\u27a4\0\u27df\0\u281a\0\u2855\0\u2890\0\u28cb"+
    "\0\u2906\0\u2941\0\u297c\0\u29b7\0\u29f2\0\u2a2d\0\u2a68\0\u2aa3"+
    "\0\u2ade\0\u2b19\0\u2b54\0\u2b8f\0\73\0\u2bca\0\73\0\u2c05"+
    "\0\u2c40\0\u2c7b\0\u2cb6\0\73\0\u2cf1\0\u2d2c\0\u2d67\0\u2da2"+
    "\0\73\0\u2ddd\0\73\0\u2e18\0\73\0\u2e53\0\u2e8e\0\u2ec9"+
    "\0\u2f04\0\u2f3f\0\u2f7a\0\u2fb5\0\u2ff0\0\73\0\u302b\0\u3066"+
    "\0\u30a1\0\73\0\73\0\u30dc\0\73\0\u3117\0\u3152\0\73"+
    "\0\u318d\0\u31c8\0\u3203\0\u323e\0\u3279\0\73\0\u32b4\0\u32ef"+
    "\0\u332a\0\u3365\0\73\0\u33a0\0\u33db\0\73\0\u3416\0\u3451"+
    "\0\u348c\0\u34c7\0\u3502\0\u353d\0\73\0\u3578\0\u35b3\0\u35ee"+
    "\0\u3629\0\u3664\0\73\0\73\0\u369f\0\73\0\u36da\0\u3715"+
    "\0\u3750\0\u378b\0\u37c6\0\73\0\u3801\0\u383c\0\u3877\0\73"+
    "\0\u38b2\0\u38ed\0\73\0\u3928\0\73\0\u3963\0\u399e\0\u39d9"+
    "\0\u3a14\0\u3a4f\0\u3a8a\0\73\0\73\0\u3ac5\0\73\0\73"+
    "\0\73\0\73\0\u3b00\0\u3b3b\0\u3b76\0\u3bb1\0\u3bec\0\u3c27"+
    "\0\u3c62\0\73\0\73\0\u3c9d\0\u3cd8\0\73\0\u3d13\0\73"+
    "\0\u3d4e\0\u3d89\0\73\0\u3dc4\0\73\0\u3dff\0\73\0\73"+
    "\0\u3e3a\0\u3e75\0\73\0\u3eb0\0\u3eeb\0\u3f26\0\u3f61\0\73"+
    "\0\73\0\u3f9c\0\73\0\u3fd7\0\u4012\0\u404d\0\73\0\u4088"+
    "\0\u40c3\0\73\0\u40fe\0\u4139\0\u4174\0\u41af\0\u41ea\0\u4225"+
    "\0\u4260\0\73\0\73\0\73\0\u429b\0\73\0\u42d6\0\u4311"+
    "\0\73\0\u434c\0\u4387\0\73\0\73\0\73\0\u43c2\0\u43fd"+
    "\0\73\0\u4438\0\73\0\73\0\u4473\0\u44ae\0\u44e9\0\u4524"+
    "\0\73\0\u455f\0\u459a\0\u45d5\0\73\0\73\0\u4610\0\73"+
    "\0\u464b\0\73\0\u4686\0\u46c1\0\u46fc\0\u4737\0\u4772\0\u47ad"+
    "\0\73\0\73\0\u47e8\0\u4823\0\u485e\0\73\0\73\0\u4899"+
    "\0\73\0\u48d4\0\73\0\73\0\u490f\0\u494a\0\73\0\u4985"+
    "\0\73";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[425];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\2\1\33\1\34\1\35\1\36\1\37\4\2"+
    "\1\40\1\41\15\2\1\42\1\43\1\44\1\45\1\46"+
    "\1\47\1\50\1\51\75\0\1\3\11\0\1\3\62\0"+
    "\2\52\71\0\1\52\71\0\3\52\71\0\1\53\70\0"+
    "\1\3\1\0\1\53\7\0\1\3\74\0\1\54\3\0"+
    "\1\55\2\0\1\56\70\0\1\57\1\0\1\60\3\0"+
    "\1\61\61\0\1\62\5\0\1\63\1\0\1\64\61\0"+
    "\1\65\2\0\1\66\2\0\1\67\63\0\1\70\1\71"+
    "\2\0\1\72\2\0\1\73\10\0\1\74\4\0\1\75"+
    "\47\0\1\76\1\77\2\0\1\100\3\0\1\101\2\0"+
    "\1\102\2\0\1\103\66\0\1\104\56\0\1\105\3\0"+
    "\1\106\1\107\5\0\1\110\57\0\1\111\1\0\1\112"+
    "\5\0\1\113\6\0\1\114\53\0\1\115\4\0\1\116"+
    "\72\0\1\117\5\0\1\120\6\0\1\121\11\0\1\122"+
    "\37\0\1\123\2\0\1\124\1\125\5\0\1\126\17\0"+
    "\1\127\41\0\1\130\3\0\1\131\3\0\1\132\4\0"+
    "\1\133\10\0\1\134\1\0\1\135\44\0\1\136\6\0"+
    "\1\137\23\0\1\140\33\0\1\141\24\0\1\142\45\0"+
    "\1\143\1\144\5\0\1\145\3\0\1\146\4\0\1\147"+
    "\22\0\1\150\34\0\1\151\1\0\1\152\67\0\1\153"+
    "\6\0\1\154\57\0\1\155\6\0\1\156\10\0\1\157"+
    "\57\0\1\160\137\0\1\161\21\0\1\162\2\0\1\163"+
    "\77\0\1\164\71\0\1\165\66\0\1\166\3\0\1\167"+
    "\6\0\1\170\71\0\1\171\1\0\1\172\100\0\1\173"+
    "\57\0\1\174\65\0\1\175\71\0\1\176\105\0\1\177"+
    "\73\0\1\200\50\0\1\201\2\0\1\202\1\203\74\0"+
    "\1\204\65\0\1\205\104\0\1\206\61\0\1\207\1\210"+
    "\15\0\1\211\1\212\52\0\1\213\5\0\1\214\70\0"+
    "\1\215\73\0\1\216\63\0\1\217\101\0\1\220\67\0"+
    "\1\221\115\0\1\222\43\0\1\223\20\0\1\224\65\0"+
    "\1\225\66\0\1\226\62\0\1\227\105\0\1\230\4\0"+
    "\1\231\1\232\64\0\1\233\66\0\1\234\104\0\1\235"+
    "\57\0\1\236\104\0\1\237\66\0\1\240\57\0\1\241"+
    "\120\0\1\242\43\0\1\243\126\0\1\244\60\0\1\245"+
    "\66\0\1\246\54\0\1\247\20\0\1\250\75\0\1\251"+
    "\110\0\1\252\30\0\1\253\2\0\1\254\1\255\2\0"+
    "\1\256\3\0\1\257\65\0\1\260\116\0\1\261\74\0"+
    "\1\262\37\0\1\263\17\0\1\264\57\0\1\265\126\0"+
    "\1\266\44\0\1\267\64\0\1\270\74\0\1\271\103\0"+
    "\1\272\52\0\1\273\112\0\1\274\61\0\1\275\123\0"+
    "\1\276\51\0\1\277\56\0\1\300\103\0\1\301\60\0"+
    "\1\302\77\0\1\303\72\0\1\304\105\0\1\305\52\0"+
    "\1\306\72\0\1\307\110\0\1\310\60\0\1\311\104\0"+
    "\1\312\57\0\1\313\113\0\1\314\64\0\1\315\77\0"+
    "\1\316\71\0\1\317\52\0\1\320\66\0\1\321\112\0"+
    "\1\322\57\0\1\323\70\0\1\324\114\0\1\325\51\0"+
    "\1\326\66\0\1\327\11\0\1\330\63\0\1\331\71\0"+
    "\1\332\102\0\1\333\61\0\1\334\16\0\1\335\73\0"+
    "\1\336\63\0\1\337\72\0\1\340\63\0\1\341\102\0"+
    "\1\342\64\0\1\343\77\0\1\344\70\0\1\345\66\0"+
    "\1\346\71\0\1\347\73\0\1\350\73\0\1\351\64\0"+
    "\1\352\100\0\1\353\107\0\1\354\52\0\1\355\111\0"+
    "\1\356\54\0\1\357\102\0\1\360\64\0\1\361\72\0"+
    "\1\362\72\0\1\363\121\0\1\364\45\0\1\365\70\0"+
    "\1\366\105\0\1\367\57\0\1\370\72\0\1\371\67\0"+
    "\1\372\122\0\1\373\43\0\1\374\70\0\1\375\107\0"+
    "\1\376\110\0\1\377\35\0\1\u0100\73\0\1\u0101\113\0"+
    "\1\u0102\71\0\1\u0103\57\0\1\u0104\72\0\1\u0105\71\0"+
    "\1\u0106\125\0\1\u0107\32\0\1\u0108\77\0\1\u0109\67\0"+
    "\1\u010a\102\0\1\u010b\64\0\1\u010c\101\0\1\u010d\65\0"+
    "\1\u010e\100\0\1\u010f\57\0\1\u0110\73\0\1\u0111\102\0"+
    "\1\u0112\60\0\1\u0113\74\0\1\u0114\70\0\1\u0115\105\0"+
    "\1\u0116\100\0\1\u0117\57\0\1\u0118\64\0\1\u0119\100\0"+
    "\1\u011a\74\0\1\u011b\67\0\1\u011c\65\0\1\u011d\72\0"+
    "\1\u011e\114\0\1\u011f\55\0\1\u0120\101\0\1\u0121\56\0"+
    "\1\u0122\100\0\1\u0123\114\0\1\u0124\52\0\1\u0125\63\0"+
    "\1\u0126\71\0\1\u0127\104\0\1\u0128\62\0\1\u0129\70\0"+
    "\1\u012a\106\0\1\u012b\57\0\1\u012c\116\0\1\u012d\52\0"+
    "\1\u012e\73\0\1\u012f\67\0\1\u0130\73\0\1\u0131\121\0"+
    "\1\u0132\40\0\1\u0133\73\0\1\u0134\105\0\1\u0135\56\0"+
    "\1\u0136\71\0\1\u0137\126\0\1\u0138\64\0\1\u0139\52\0"+
    "\1\u013a\124\0\1\u013b\40\0\1\u013c\72\0\1\u013d\100\0"+
    "\1\u013e\56\0\1\u013f\126\0\1\u0140\57\0\1\u0141\62\0"+
    "\1\u0142\66\0\1\u0143\72\0\1\u0144\72\0\1\u0145\71\0"+
    "\1\u0146\74\0\1\u0147\100\0\1\u0148\63\0\1\u0149\73\0"+
    "\1\u014a\72\0\1\u014b\66\0\1\u014c\74\0\1\u014d\74\0"+
    "\1\u014e\67\0\1\u014f\70\0\1\u0150\100\0\1\u0151\64\0"+
    "\1\u0152\74\0\1\u0153\67\0\1\u0154\72\0\1\u0155\100\0"+
    "\1\u0156\67\0\1\u0157\102\0\1\u0158\64\0\1\u0159\106\0"+
    "\1\u015a\57\0\1\u015b\67\0\1\u015c\71\0\1\u015d\71\0"+
    "\1\u015e\74\0\1\u015f\67\0\1\u0160\137\0\1\u0161\34\0"+
    "\1\u0162\63\0\1\u0163\106\0\1\u0164\113\0\1\u0165\42\0"+
    "\1\u0166\100\0\1\u0167\122\0\1\u0168\56\0\1\u0169\64\0"+
    "\1\u016a\51\0\1\u016b\76\0\1\u016c\73\0\1\u016d\70\0"+
    "\1\u016e\76\0\1\u016f\67\0\1\u0170\101\0\1\u0171\107\0"+
    "\1\u0172\42\0\1\u0173\100\0\1\u0174\71\0\1\u0175\73\0"+
    "\1\u0176\65\0\1\u0177\104\0\1\u0178\57\0\1\u0179\76\0"+
    "\1\u017a\74\0\1\u017b\107\0\1\u017c\47\0\1\u017d\100\0"+
    "\1\u017e\64\0\1\u017f\130\0\1\u0180\35\0\1\u0181\135\0"+
    "\1\u0182\31\0\1\u0183\75\0\1\u0184\64\0\1\u0185\72\0"+
    "\1\u0186\76\0\1\u0187\72\0\1\u0188\116\0\1\u0189\42\0"+
    "\1\u018a\106\0\1\u018b\64\0\1\u018c\72\0\1\u018d\64\0"+
    "\1\u018e\73\0\1\u018f\114\0\1\u0190\104\0\1\u0191\67\0"+
    "\1\u0192\54\0\1\u0193\72\0\1\u0194\64\0\1\u0195\74\0"+
    "\1\u0196\70\0\1\u0197\67\0\1\u0198\76\0\1\u0199\106\0"+
    "\1\u019a\106\0\1\u019b\43\0\1\u019c\72\0\1\u019d\75\0"+
    "\1\u019e\100\0\1\u019f\52\0\1\u01a0\71\0\1\u01a1\132\0"+
    "\1\u01a2\35\0\1\u01a3\72\0\1\u01a4\75\0\1\u01a5\115\0"+
    "\1\u01a6\50\0\1\u01a7\124\0\1\u01a8\73\0\1\u01a9\14\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[18880];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\2\1\1\11\34\1\5\11\1\1\4\11"+
    "\13\0\1\1\11\0\1\1\7\0\2\1\6\0\1\11"+
    "\6\0\1\1\1\0\2\11\22\0\1\11\2\0\1\11"+
    "\3\0\1\11\13\0\1\11\14\0\1\11\1\0\3\11"+
    "\1\0\1\11\12\0\1\11\3\0\3\11\1\0\1\11"+
    "\3\0\1\1\6\0\1\11\10\0\1\1\5\0\2\11"+
    "\2\0\1\11\1\0\1\1\1\0\1\11\7\0\2\11"+
    "\22\0\1\11\1\0\1\11\4\0\1\11\4\0\1\11"+
    "\1\0\1\11\1\0\1\11\10\0\1\11\3\0\2\11"+
    "\1\0\1\11\2\0\1\11\5\0\1\11\4\0\1\11"+
    "\2\0\1\11\6\0\1\11\5\0\2\11\1\0\1\11"+
    "\5\0\1\11\3\0\1\11\2\0\1\11\1\0\1\11"+
    "\6\0\2\11\1\0\4\11\7\0\2\11\2\0\1\11"+
    "\1\0\1\11\2\0\1\11\1\0\1\11\1\0\2\11"+
    "\2\0\1\11\4\0\2\11\1\0\1\11\3\0\1\11"+
    "\2\0\1\11\7\0\3\11\1\0\1\11\2\0\1\11"+
    "\2\0\3\11\2\0\1\11\1\0\2\11\4\0\1\11"+
    "\3\0\2\11\1\0\1\11\1\0\1\11\6\0\2\11"+
    "\3\0\2\11\1\0\1\11\1\0\2\11\2\0\1\11"+
    "\1\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[425];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    private Symbol symbol(int type, Object value){
       return new Symbol(type, yyline, yycolumn, value);
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  LexerCup(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 202) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return new Symbol(sym.Error, yychar, yyline, yytext());
            } 
            // fall through
          case 116: break;
          case 2: 
            { /*Ignore*/
            } 
            // fall through
          case 117: break;
          case 3: 
            { return new Symbol(sym.Comparador, yychar, yyline, yytext());
            } 
            // fall through
          case 118: break;
          case 4: 
            { return new Symbol(sym.Igual, yychar, yyline, yytext());
            } 
            // fall through
          case 119: break;
          case 5: 
            { return new Symbol(sym.Mas, yychar, yyline, yytext());
            } 
            // fall through
          case 120: break;
          case 6: 
            { return new Symbol(sym.Menos, yychar, yyline, yytext());
            } 
            // fall through
          case 121: break;
          case 7: 
            { return new Symbol(sym.Asterisco, yychar, yyline, yytext());
            } 
            // fall through
          case 122: break;
          case 8: 
            { return new Symbol(sym.Dividir, yychar, yyline, yytext());
            } 
            // fall through
          case 123: break;
          case 9: 
            { return new Symbol(sym.Punto, yychar, yyline, yytext());
            } 
            // fall through
          case 124: break;
          case 10: 
            { return new Symbol(sym.Coma, yychar, yyline, yytext());
            } 
            // fall through
          case 125: break;
          case 11: 
            { return new Symbol(sym.Punto_Coma, yychar, yyline, yytext());
            } 
            // fall through
          case 126: break;
          case 12: 
            { return new Symbol(sym.Parentesis_a, yychar, yyline, yytext());
            } 
            // fall through
          case 127: break;
          case 13: 
            { return new Symbol(sym.Parentesis_c, yychar, yyline, yytext());
            } 
            // fall through
          case 128: break;
          case 14: 
            { return new Symbol(sym.Bracket_a, yychar, yyline, yytext());
            } 
            // fall through
          case 129: break;
          case 15: 
            { return new Symbol(sym.Bracket_c, yychar, yyline, yytext());
            } 
            // fall through
          case 130: break;
          case 16: 
            { return new Symbol(sym.Incrementador, yychar, yyline, yytext());
            } 
            // fall through
          case 131: break;
          case 17: 
            { return new Symbol(sym.No, yychar, yyline, yytext());
            } 
            // fall through
          case 132: break;
          case 18: 
            { return new Symbol(sym.As, yychar, yyline, yytext());
            } 
            // fall through
          case 133: break;
          case 19: 
            { return new Symbol(sym.Or, yychar, yyline, yytext());
            } 
            // fall through
          case 134: break;
          case 20: 
            { return new Symbol(sym.On, yychar, yyline, yytext());
            } 
            // fall through
          case 135: break;
          case 21: 
            { return new Symbol(sym.By, yychar, yyline, yytext());
            } 
            // fall through
          case 136: break;
          case 22: 
            { return new Symbol(sym.In, yychar, yyline, yytext());
            } 
            // fall through
          case 137: break;
          case 23: 
            { return new Symbol(sym.Is, yychar, yyline, yytext());
            } 
            // fall through
          case 138: break;
          case 24: 
            { return new Symbol(sym.If, yychar, yyline, yytext());
            } 
            // fall through
          case 139: break;
          case 25: 
            { return new Symbol(sym.Go, yychar, yyline, yytext());
            } 
            // fall through
          case 140: break;
          case 26: 
            { return new Symbol(sym.Cuadro, yychar, yyline, yytext());
            } 
            // fall through
          case 141: break;
          case 27: 
            { return new Symbol(sym.Top, yychar, yyline, yytext());
            } 
            // fall through
          case 142: break;
          case 28: 
            { return new Symbol(sym.Not, yychar, yyline, yytext());
            } 
            // fall through
          case 143: break;
          case 29: 
            { return new Symbol(sym.And, yychar, yyline, yytext());
            } 
            // fall through
          case 144: break;
          case 30: 
            { return new Symbol(sym.Add, yychar, yyline, yytext());
            } 
            // fall through
          case 145: break;
          case 31: 
            { return new Symbol(sym.Asc, yychar, yyline, yytext());
            } 
            // fall through
          case 146: break;
          case 32: 
            { return new Symbol(sym.Avg, yychar, yyline, yytext());
            } 
            // fall through
          case 147: break;
          case 33: 
            { return new Symbol(sym.All, yychar, yyline, yytext());
            } 
            // fall through
          case 148: break;
          case 34: 
            { return new Symbol(sym.Off, yychar, yyline, yytext());
            } 
            // fall through
          case 149: break;
          case 35: 
            { return new Symbol(sym.BitR, yychar, yyline, yytext());
            } 
            // fall through
          case 150: break;
          case 36: 
            { return new Symbol(sym.Bit, yychar, yyline, yytext());
            } 
            // fall through
          case 151: break;
          case 37: 
            { return new Symbol(sym.Sum, yychar, yyline, yytext());
            } 
            // fall through
          case 152: break;
          case 38: 
            { return new Symbol(sym.Set, yychar, yyline, yytext());
            } 
            // fall through
          case 153: break;
          case 39: 
            { return new Symbol(sym.IntR, yychar, yyline, yytext());
            } 
            // fall through
          case 154: break;
          case 40: 
            { return new Symbol(sym.Int, yychar, yyline, yytext());
            } 
            // fall through
          case 155: break;
          case 41: 
            { return new Symbol(sym.For, yychar, yyline, yytext());
            } 
            // fall through
          case 156: break;
          case 42: 
            { return new Symbol(sym.Max, yychar, yyline, yytext());
            } 
            // fall through
          case 157: break;
          case 43: 
            { return new Symbol(sym.Min, yychar, yyline, yytext());
            } 
            // fall through
          case 158: break;
          case 44: 
            { return new Symbol(sym.Key, yychar, yyline, yytext());
            } 
            // fall through
          case 159: break;
          case 45: 
            { return new Symbol(sym.Tran, yychar, yyline, yytext());
            } 
            // fall through
          case 160: break;
          case 46: 
            { return new Symbol(sym.Read, yychar, yyline, yytext());
            } 
            // fall through
          case 161: break;
          case 47: 
            { return new Symbol(sym.User, yychar, yyline, yytext());
            } 
            // fall through
          case 162: break;
          case 48: 
            { return new Symbol(sym.Null, yychar, yyline, yytext());
            } 
            // fall through
          case 163: break;
          case 49: 
            { return new Symbol(sym.Drop, yychar, yyline, yytext());
            } 
            // fall through
          case 164: break;
          case 50: 
            { return new Symbol(sym.Desc, yychar, yyline, yytext());
            } 
            // fall through
          case 165: break;
          case 51: 
            { return new Symbol(sym.Only, yychar, yyline, yytext());
            } 
            // fall through
          case 166: break;
          case 52: 
            { return new Symbol(sym.Save, yychar, yyline, yytext());
            } 
            // fall through
          case 167: break;
          case 53: 
            { return new Symbol(sym.Size, yychar, yyline, yytext());
            } 
            // fall through
          case 168: break;
          case 54: 
            { return new Symbol(sym.Into, yychar, yyline, yytext());
            } 
            // fall through
          case 169: break;
          case 55: 
            { return new Symbol(sym.View, yychar, yyline, yytext());
            } 
            // fall through
          case 170: break;
          case 56: 
            { return new Symbol(sym.From, yychar, yyline, yytext());
            } 
            // fall through
          case 171: break;
          case 57: 
            { return new Symbol(sym.Full, yychar, yyline, yytext());
            } 
            // fall through
          case 172: break;
          case 58: 
            { return new Symbol(sym.File, yychar, yyline, yytext());
            } 
            // fall through
          case 173: break;
          case 59: 
            { return new Symbol(sym.Left, yychar, yyline, yytext());
            } 
            // fall through
          case 174: break;
          case 60: 
            { return new Symbol(sym.Table, yychar, yyline, yytext());
            } 
            // fall through
          case 175: break;
          case 61: 
            { return new Symbol(sym.Right, yychar, yyline, yytext());
            } 
            // fall through
          case 176: break;
          case 62: 
            { return new Symbol(sym.Names, yychar, yyline, yytext());
            } 
            // fall through
          case 177: break;
          case 63: 
            { return new Symbol(sym.Count, yychar, yyline, yytext());
            } 
            // fall through
          case 178: break;
          case 64: 
            { return new Symbol(sym.Close, yychar, yyline, yytext());
            } 
            // fall through
          case 179: break;
          case 65: 
            { return new Symbol(sym.Check, yychar, yyline, yytext());
            } 
            // fall through
          case 180: break;
          case 66: 
            { return new Symbol(sym.Alter, yychar, yyline, yytext());
            } 
            // fall through
          case 181: break;
          case 67: 
            { return new Symbol(sym.Order, yychar, yyline, yytext());
            } 
            // fall through
          case 182: break;
          case 68: 
            { return new Symbol(sym.Begin, yychar, yyline, yytext());
            } 
            // fall through
          case 183: break;
          case 69: 
            { return new Symbol(sym.Inner, yychar, yyline, yytext());
            } 
            // fall through
          case 184: break;
          case 70: 
            { return new Symbol(sym.Index, yychar, yyline, yytext());
            } 
            // fall through
          case 185: break;
          case 71: 
            { return new Symbol(sym.Write, yychar, yyline, yytext());
            } 
            // fall through
          case 186: break;
          case 72: 
            { return new Symbol(sym.Where, yychar, yyline, yytext());
            } 
            // fall through
          case 187: break;
          case 73: 
            { return new Symbol(sym.FloatR, yychar, yyline, yytext());
            } 
            // fall through
          case 188: break;
          case 74: 
            { return new Symbol(sym.Float, yychar, yyline, yytext());
            } 
            // fall through
          case 189: break;
          case 75: 
            { return new Symbol(sym.Local, yychar, yyline, yytext());
            } 
            // fall through
          case 190: break;
          case 76: 
            { return new Symbol(sym.Group, yychar, yyline, yytext());
            } 
            // fall through
          case 191: break;
          case 77: 
            { return new Symbol(sym.Unique, yychar, yyline, yytext());
            } 
            // fall through
          case 192: break;
          case 78: 
            { return new Symbol(sym.Update, yychar, yyline, yytext());
            } 
            // fall through
          case 193: break;
          case 79: 
            { return new Symbol(sym.Create, yychar, yyline, yytext());
            } 
            // fall through
          case 194: break;
          case 80: 
            { return new Symbol(sym.Cursor, yychar, yyline, yytext());
            } 
            // fall through
          case 195: break;
          case 81: 
            { return new Symbol(sym.Column, yychar, yyline, yytext());
            } 
            // fall through
          case 196: break;
          case 82: 
            { return new Symbol(sym.Commit, yychar, yyline, yytext());
            } 
            // fall through
          case 197: break;
          case 83: 
            { return new Symbol(sym.Action, yychar, yyline, yytext());
            } 
            // fall through
          case 198: break;
          case 84: 
            { return new Symbol(sym.Exists, yychar, yyline, yytext());
            } 
            // fall through
          case 199: break;
          case 85: 
            { return new Symbol(sym.Delete, yychar, yyline, yytext());
            } 
            // fall through
          case 200: break;
          case 86: 
            { return new Symbol(sym.Select, yychar, yyline, yytext());
            } 
            // fall through
          case 201: break;
          case 87: 
            { return new Symbol(sym.String, yychar, yyline, yytext());
            } 
            // fall through
          case 202: break;
          case 88: 
            { return new Symbol(sym.Insert, yychar, yyline, yytext());
            } 
            // fall through
          case 203: break;
          case 89: 
            { return new Symbol(sym.Values, yychar, yyline, yytext());
            } 
            // fall through
          case 204: break;
          case 90: 
            { return new Symbol(sym.Global, yychar, yyline, yytext());
            } 
            // fall through
          case 205: break;
          case 91: 
            { return new Symbol(sym.Nocheck, yychar, yyline, yytext());
            } 
            // fall through
          case 206: break;
          case 92: 
            { return new Symbol(sym.Current, yychar, yyline, yytext());
            } 
            // fall through
          case 207: break;
          case 93: 
            { return new Symbol(sym.Cascade, yychar, yyline, yytext());
            } 
            // fall through
          case 208: break;
          case 94: 
            { return new Symbol(sym.Collate, yychar, yyline, yytext());
            } 
            // fall through
          case 209: break;
          case 95: 
            { return new Symbol(sym.Default, yychar, yyline, yytext());
            } 
            // fall through
          case 210: break;
          case 96: 
            { return new Symbol(sym.Primary, yychar, yyline, yytext());
            } 
            // fall through
          case 211: break;
          case 97: 
            { return new Symbol(sym.Percent, yychar, yyline, yytext());
            } 
            // fall through
          case 212: break;
          case 98: 
            { return new Symbol(sym.Include, yychar, yyline, yytext());
            } 
            // fall through
          case 213: break;
          case 99: 
            { return new Symbol(sym.Varchar, yychar, yyline, yytext());
            } 
            // fall through
          case 214: break;
          case 100: 
            { return new Symbol(sym.Foreign, yychar, yyline, yytext());
            } 
            // fall through
          case 215: break;
          case 101: 
            { return new Symbol(sym.Truncate, yychar, yyline, yytext());
            } 
            // fall through
          case 216: break;
          case 102: 
            { return new Symbol(sym.Rollback, yychar, yyline, yytext());
            } 
            // fall through
          case 217: break;
          case 103: 
            { return new Symbol(sym.Database, yychar, yyline, yytext());
            } 
            // fall through
          case 218: break;
          case 104: 
            { return new Symbol(sym.Distinct, yychar, yyline, yytext());
            } 
            // fall through
          case 219: break;
          case 105: 
            { return new Symbol(sym.Identity, yychar, yyline, yytext());
            } 
            // fall through
          case 220: break;
          case 106: 
            { {return new Symbol(sym.Var, yychar, yyline, yytext());}
            } 
            // fall through
          case 221: break;
          case 107: 
            { return new Symbol(sym.Clustered, yychar, yyline, yytext());
            } 
            // fall through
          case 222: break;
          case 108: 
            { return new Symbol(sym.Openquery, yychar, yyline, yytext());
            } 
            // fall through
          case 223: break;
          case 109: 
            { return new Symbol(sym.References, yychar, yyline, yytext());
            } 
            // fall through
          case 224: break;
          case 110: 
            { return new Symbol(sym.Rowguidcol, yychar, yyline, yytext());
            } 
            // fall through
          case 225: break;
          case 111: 
            { return new Symbol(sym.Constraint, yychar, yyline, yytext());
            } 
            // fall through
          case 226: break;
          case 112: 
            { return new Symbol(sym.Transaction, yychar, yyline, yytext());
            } 
            // fall through
          case 227: break;
          case 113: 
            { return new Symbol(sym.Replication, yychar, yyline, yytext());
            } 
            // fall through
          case 228: break;
          case 114: 
            { return new Symbol(sym.Nonclustered, yychar, yyline, yytext());
            } 
            // fall through
          case 229: break;
          case 115: 
            { return new Symbol(sym.Id, yychar, yyline, yytext());
            } 
            // fall through
          case 230: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
