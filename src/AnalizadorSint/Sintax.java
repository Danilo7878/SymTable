
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Nov 19 13:00:06 CST 2019
//----------------------------------------------------

package AnalizadorSint;

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Nov 19 13:00:06 CST 2019
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\241\000\002\002\004\000\002\002\004\000\002\003" +
    "\003\000\002\003\003\000\002\003\003\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\003\003\000" +
    "\002\023\004\000\002\060\005\000\002\035\003\000\002" +
    "\035\005\000\002\012\005\000\002\006\003\000\002\006" +
    "\003\000\002\006\003\000\002\006\003\000\002\072\005" +
    "\000\002\072\005\000\002\072\004\000\002\076\003\000" +
    "\002\076\003\000\002\073\004\000\002\073\003\000\002" +
    "\073\005\000\002\073\005\000\002\074\004\000\002\074" +
    "\005\000\002\074\005\000\002\075\004\000\002\075\005" +
    "\000\002\075\005\000\002\004\003\000\002\010\012\000" +
    "\002\010\011\000\002\050\003\000\002\050\003\000\002" +
    "\051\003\000\002\051\005\000\002\052\004\000\002\053" +
    "\003\000\002\053\005\000\002\053\005\000\002\053\005" +
    "\000\002\053\003\000\002\053\003\000\002\054\004\000" +
    "\002\054\003\000\002\054\006\000\002\055\003\000\002" +
    "\055\004\000\002\056\006\000\002\057\003\000\002\057" +
    "\003\000\002\057\003\000\002\057\003\000\002\057\003" +
    "\000\002\062\003\000\002\062\005\000\002\063\005\000" +
    "\002\063\005\000\002\063\006\000\002\063\004\000\002" +
    "\064\003\000\002\064\004\000\002\064\005\000\002\064" +
    "\006\000\002\065\010\000\002\065\010\000\002\066\003" +
    "\000\002\066\005\000\002\066\004\000\002\066\004\000" +
    "\002\066\005\000\002\066\004\000\002\066\005\000\002" +
    "\066\004\000\002\070\005\000\002\070\002\000\002\071" +
    "\005\000\002\071\002\000\002\020\004\000\002\020\006" +
    "\000\002\011\003\000\002\011\003\000\002\011\002\000" +
    "\002\013\010\000\002\036\007\000\002\036\002\000\002" +
    "\037\003\000\002\037\002\000\002\040\003\000\002\040" +
    "\002\000\002\041\003\000\002\041\010\000\002\042\003" +
    "\000\002\042\005\000\002\042\007\000\002\042\011\000" +
    "\002\043\005\000\002\043\002\000\002\047\004\000\002" +
    "\047\004\000\002\047\003\000\002\044\005\000\002\044" +
    "\007\000\002\045\003\000\002\045\005\000\002\046\004" +
    "\000\002\046\003\000\002\046\003\000\002\005\003\000" +
    "\002\014\005\000\002\016\003\000\002\016\005\000\002" +
    "\015\003\000\002\015\005\000\002\015\007\000\002\067" +
    "\005\000\002\067\007\000\002\017\004\000\002\017\002" +
    "\000\002\021\003\000\002\021\005\000\002\021\005\000" +
    "\002\022\003\000\002\022\003\000\002\024\007\000\002" +
    "\027\003\000\002\027\005\000\002\026\003\000\002\026" +
    "\003\000\002\026\003\000\002\026\003\000\002\026\003" +
    "\000\002\025\005\000\002\025\005\000\002\030\003\000" +
    "\002\030\003\000\002\030\003\000\002\030\004\000\002" +
    "\032\005\000\002\032\005\000\002\032\003\000\002\033" +
    "\005\000\002\033\005\000\002\033\003\000\002\034\003" +
    "\000\002\034\003\000\002\034\003\000\002\034\003\000" +
    "\002\034\003\000\002\034\003\000\002\034\005\000\002" +
    "\061\003\000\002\061\003\000\002\061\003\000\002\061" +
    "\003\000\002\031\003\000\002\031\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u010a\000\024\004\006\022\030\027\021\074\031\076" +
    "\032\107\007\112\014\113\005\114\004\001\002\000\004" +
    "\031\u010c\001\002\000\006\110\357\111\356\001\002\000" +
    "\004\005\u0107\001\002\000\006\110\357\111\356\001\002" +
    "\000\006\030\ufffe\040\ufffe\001\002\000\006\030\uff91\040" +
    "\uff91\001\002\000\006\030\uffff\040\uffff\001\002\000\006" +
    "\030\u0102\040\u0103\001\002\000\006\110\357\111\356\001" +
    "\002\000\006\030\ufff0\040\ufff0\001\002\000\006\030\ufffc" +
    "\040\ufffc\001\002\000\006\030\ufff1\040\ufff1\001\002\000" +
    "\006\030\ufff2\040\ufff2\001\002\000\004\052\366\001\002" +
    "\000\006\030\ufff3\040\ufff3\001\002\000\006\030\uffe0\040" +
    "\uffe0\001\002\000\006\030\ufffa\040\ufffa\001\002\000\006" +
    "\030\ufffd\040\ufffd\001\002\000\006\030\ufffb\040\ufffb\001" +
    "\002\000\006\030\ufff9\040\ufff9\001\002\000\004\041\363" +
    "\001\002\000\012\030\uffe9\040\uffe9\110\357\111\356\001" +
    "\002\000\012\031\uffa8\077\035\101\uffa8\102\uffa8\001\002" +
    "\000\004\002\034\001\002\000\004\002\001\001\002\000" +
    "\004\042\351\001\002\000\010\031\uffa4\101\037\102\uffa4" +
    "\001\002\000\006\031\uffa5\102\uffa5\001\002\000\006\031" +
    "\042\102\041\001\002\000\004\042\344\001\002\000\014" +
    "\021\uffa1\036\336\042\uffa1\060\uffa1\103\uffa1\001\002\000" +
    "\012\021\uff9c\042\045\060\uff9c\103\uff9c\001\002\000\012" +
    "\021\uffa3\042\uffa3\060\uffa3\103\uffa3\001\002\000\004\031" +
    "\303\001\002\000\010\021\050\060\052\103\047\001\002" +
    "\000\004\042\320\001\002\000\004\103\316\001\002\000" +
    "\006\030\uffaa\040\uffaa\001\002\000\026\031\uffa8\046\uffa8" +
    "\054\056\061\uffa8\062\uffa8\063\uffa8\064\uffa8\065\uffa8\075" +
    "\055\077\035\001\002\000\006\030\uff99\040\uff99\001\002" +
    "\000\022\031\uffa8\046\uffa8\061\uffa8\062\uffa8\063\uffa8\064" +
    "\uffa8\065\uffa8\077\035\001\002\000\022\031\uffdd\046\uffdd" +
    "\061\uffdd\062\uffdd\063\uffdd\064\uffdd\065\uffdd\077\uffdd\001" +
    "\002\000\022\031\uffdc\046\uffdc\061\uffdc\062\uffdc\063\uffdc" +
    "\064\uffdc\065\uffdc\077\uffdc\001\002\000\020\031\060\046" +
    "\066\061\064\062\062\063\071\064\061\065\065\001\002" +
    "\000\042\011\uffd3\020\uffd3\030\uffd3\031\uffd3\036\306\040" +
    "\uffd3\042\uffd3\043\uffd3\055\177\066\uffd3\067\uffd3\070\uffd3" +
    "\072\uffd3\073\uffd3\104\uffd3\105\uffd3\001\002\000\004\042" +
    "\uffc9\001\002\000\004\042\uffcb\001\002\000\004\053\141" +
    "\001\002\000\004\042\uffcc\001\002\000\004\042\uffc8\001" +
    "\002\000\040\011\uffd8\020\uffd8\030\uffd8\031\uffd8\040\uffd8" +
    "\041\uffd8\042\uffd8\043\uffd8\066\uffd8\067\uffd8\070\uffd8\072" +
    "\uffd8\073\uffd8\104\uffd8\105\uffd8\001\002\000\006\020\130" +
    "\031\127\001\002\000\006\037\125\053\uffdb\001\002\000" +
    "\004\042\uffca\001\002\000\004\042\074\001\002\000\040" +
    "\011\uffd4\020\uffd4\030\uffd4\031\uffd4\040\uffd4\041\uffd4\042" +
    "\uffd4\043\uffd4\066\uffd4\067\uffd4\070\uffd4\072\uffd4\073\uffd4" +
    "\104\uffd4\105\uffd4\001\002\000\020\031\076\032\102\033" +
    "\101\034\075\035\103\042\100\052\106\001\002\000\040" +
    "\012\uff6c\014\uff6c\016\uff6c\030\uff6c\037\uff6c\040\uff6c\041" +
    "\uff6c\043\uff6c\044\uff6c\045\uff6c\046\uff6c\047\uff6c\050\uff6c" +
    "\104\uff6c\105\uff6c\001\002\000\040\012\uff69\014\uff69\016" +
    "\uff69\030\uff69\037\uff69\040\uff69\041\uff69\043\uff69\044\uff69" +
    "\045\uff69\046\uff69\047\uff69\050\uff69\104\uff69\105\uff69\001" +
    "\002\000\040\012\uff71\014\uff71\016\uff71\030\uff71\037\uff71" +
    "\040\uff71\041\uff71\043\uff71\044\uff71\045\uff71\046\116\047" +
    "\115\050\uff71\104\uff71\105\uff71\001\002\000\020\031\076" +
    "\032\102\033\101\034\075\035\103\042\100\052\106\001" +
    "\002\000\040\012\uff6d\014\uff6d\016\uff6d\030\uff6d\037\uff6d" +
    "\040\uff6d\041\uff6d\043\uff6d\044\uff6d\045\uff6d\046\uff6d\047" +
    "\uff6d\050\uff6d\104\uff6d\105\uff6d\001\002\000\040\012\uff6b" +
    "\014\uff6b\016\uff6b\030\uff6b\037\uff6b\040\uff6b\041\uff6b\043" +
    "\uff6b\044\uff6b\045\uff6b\046\uff6b\047\uff6b\050\uff6b\104\uff6b" +
    "\105\uff6b\001\002\000\040\012\uff6a\014\uff6a\016\uff6a\030" +
    "\uff6a\037\uff6a\040\uff6a\041\uff6a\043\uff6a\044\uff6a\045\uff6a" +
    "\046\uff6a\047\uff6a\050\uff6a\104\uff6a\105\uff6a\001\002\000" +
    "\040\012\uff6e\014\uff6e\016\uff6e\030\uff6e\037\uff6e\040\uff6e" +
    "\041\uff6e\043\uff6e\044\uff6e\045\uff6e\046\uff6e\047\uff6e\050" +
    "\uff6e\104\uff6e\105\uff6e\001\002\000\004\043\122\001\002" +
    "\000\040\012\uff68\014\uff68\016\uff68\030\uff68\037\uff68\040" +
    "\uff68\041\uff68\043\uff68\044\uff68\045\uff68\046\uff68\047\uff68" +
    "\050\uff68\104\uff68\105\uff68\001\002\000\012\037\112\043" +
    "\uffc7\044\111\045\110\001\002\000\020\031\076\032\102" +
    "\033\101\034\075\035\103\042\100\052\106\001\002\000" +
    "\020\031\076\032\102\033\101\034\075\035\103\042\100" +
    "\052\106\001\002\000\020\031\076\032\102\033\101\034" +
    "\075\035\103\042\100\052\106\001\002\000\004\043\uffc6" +
    "\001\002\000\040\012\uff73\014\uff73\016\uff73\030\uff73\037" +
    "\uff73\040\uff73\041\uff73\043\uff73\044\uff73\045\uff73\046\116" +
    "\047\115\050\uff73\104\uff73\105\uff73\001\002\000\020\031" +
    "\076\032\102\033\101\034\075\035\103\042\100\052\106" +
    "\001\002\000\020\031\076\032\102\033\101\034\075\035" +
    "\103\042\100\052\106\001\002\000\040\012\uff70\014\uff70" +
    "\016\uff70\030\uff70\037\uff70\040\uff70\041\uff70\043\uff70\044" +
    "\uff70\045\uff70\046\uff70\047\uff70\050\uff70\104\uff70\105\uff70" +
    "\001\002\000\040\012\uff6f\014\uff6f\016\uff6f\030\uff6f\037" +
    "\uff6f\040\uff6f\041\uff6f\043\uff6f\044\uff6f\045\uff6f\046\uff6f" +
    "\047\uff6f\050\uff6f\104\uff6f\105\uff6f\001\002\000\040\012" +
    "\uff72\014\uff72\016\uff72\030\uff72\037\uff72\040\uff72\041\uff72" +
    "\043\uff72\044\uff72\045\uff72\046\116\047\115\050\uff72\104" +
    "\uff72\105\uff72\001\002\000\040\011\uffcd\020\uffcd\030\uffcd" +
    "\031\uffcd\040\uffcd\041\uffcd\042\uffcd\043\uffcd\066\uffcd\067" +
    "\uffcd\070\uffcd\072\uffcd\073\uffcd\104\uffcd\105\uffcd\001\002" +
    "\000\010\043\124\044\111\045\110\001\002\000\040\012" +
    "\uff67\014\uff67\016\uff67\030\uff67\037\uff67\040\uff67\041\uff67" +
    "\043\uff67\044\uff67\045\uff67\046\uff67\047\uff67\050\uff67\104" +
    "\uff67\105\uff67\001\002\000\020\031\060\046\066\061\064" +
    "\062\062\063\071\064\061\065\065\001\002\000\004\053" +
    "\uffda\001\002\000\036\006\uffd1\011\uffd1\030\uffd1\037\uffd1" +
    "\040\uffd1\042\uffd1\053\uffd1\066\uffd1\067\uffd1\070\uffd1\072" +
    "\uffd1\073\uffd1\104\uffd1\105\uffd1\001\002\000\006\031\132" +
    "\056\133\001\002\000\010\006\uffd9\037\uffd9\053\uffd9\001" +
    "\002\000\036\006\uffd2\011\uffd2\030\uffd2\037\uffd2\040\uffd2" +
    "\042\uffd2\053\uffd2\066\uffd2\067\uffd2\070\uffd2\072\uffd2\073" +
    "\uffd2\104\uffd2\105\uffd2\001\002\000\004\031\134\001\002" +
    "\000\006\031\134\057\uffcf\001\002\000\004\057\136\001" +
    "\002\000\036\006\uffd0\011\uffd0\030\uffd0\037\uffd0\040\uffd0" +
    "\042\uffd0\053\uffd0\066\uffd0\067\uffd0\070\uffd0\072\uffd0\073" +
    "\uffd0\104\uffd0\105\uffd0\001\002\000\004\057\uffce\001\002" +
    "\000\014\011\221\030\uff87\040\uff87\104\uff87\105\uff87\001" +
    "\002\000\004\031\143\001\002\000\034\011\uffc2\020\130" +
    "\030\uffc2\031\127\040\uffc2\042\153\066\154\067\160\070" +
    "\155\072\156\073\161\104\uffc2\105\uffc2\001\002\000\040" +
    "\011\uff8d\020\uff8d\030\uff8d\031\uff8d\036\144\040\uff8d\042" +
    "\uff8d\043\uff8d\066\uff8d\067\uff8d\070\uff8d\072\uff8d\073\uff8d" +
    "\104\uff8d\105\uff8d\001\002\000\004\031\145\001\002\000" +
    "\040\011\uff8c\020\uff8c\030\uff8c\031\uff8c\036\146\040\uff8c" +
    "\042\uff8c\043\uff8c\066\uff8c\067\uff8c\070\uff8c\072\uff8c\073" +
    "\uff8c\104\uff8c\105\uff8c\001\002\000\004\031\147\001\002" +
    "\000\040\011\uff8b\020\uff8b\030\uff8b\031\uff8b\040\uff8b\042" +
    "\uff8b\043\uff8b\050\uff8b\066\uff8b\067\uff8b\070\uff8b\072\uff8b" +
    "\073\uff8b\104\uff8b\105\uff8b\001\002\000\014\011\uffc4\030" +
    "\uffc4\040\uffc4\104\uffc4\105\uffc4\001\002\000\032\011\uffc1" +
    "\030\uffc1\040\uffc1\042\153\043\uffc1\066\154\067\160\070" +
    "\155\072\156\073\161\104\uffc1\105\uffc1\001\002\000\030" +
    "\011\uffc5\030\uffc5\040\uffc5\042\153\066\154\067\160\070" +
    "\155\072\156\073\161\104\uffc5\105\uffc5\001\002\000\014" +
    "\066\154\067\160\070\155\072\156\073\161\001\002\000" +
    "\020\031\uffbb\046\uffbb\061\uffbb\062\uffbb\063\uffbb\064\uffbb" +
    "\065\uffbb\001\002\000\006\066\207\071\210\001\002\000" +
    "\006\066\204\071\205\001\002\000\020\031\060\046\066" +
    "\061\064\062\062\063\071\064\061\065\065\001\002\000" +
    "\004\066\165\001\002\000\006\066\162\071\163\001\002" +
    "\000\020\031\uffb9\046\uffb9\061\uffb9\062\uffb9\063\uffb9\064" +
    "\uffb9\065\uffb9\001\002\000\004\066\164\001\002\000\020" +
    "\031\uffba\046\uffba\061\uffba\062\uffba\063\uffba\064\uffba\065" +
    "\uffba\001\002\000\020\031\uffb4\046\uffb4\061\uffb4\062\uffb4" +
    "\063\uffb4\064\uffb4\065\uffb4\001\002\000\004\006\167\001" +
    "\002\000\020\031\170\046\066\061\064\062\062\063\071" +
    "\064\061\065\065\001\002\000\012\036\200\041\uffd3\050" +
    "\uff8d\055\177\001\002\000\004\041\175\001\002\000\004" +
    "\050\173\001\002\000\004\031\143\001\002\000\032\011" +
    "\uffbc\030\uffbc\040\uffbc\042\uffbc\043\uffbc\066\uffbc\067\uffbc" +
    "\070\uffbc\072\uffbc\073\uffbc\104\uffbc\105\uffbc\001\002\000" +
    "\020\031\060\046\066\061\064\062\062\063\071\064\061" +
    "\065\065\001\002\000\032\011\uffbd\030\uffbd\040\uffbd\042" +
    "\uffbd\043\uffbd\066\uffbd\067\uffbd\070\uffbd\072\uffbd\073\uffbd" +
    "\104\uffbd\105\uffbd\001\002\000\004\031\203\001\002\000" +
    "\006\031\201\046\202\001\002\000\010\036\146\041\uffd6" +
    "\050\uff8c\001\002\000\040\011\uffd7\020\uffd7\030\uffd7\031" +
    "\uffd7\040\uffd7\041\uffd7\042\uffd7\043\uffd7\066\uffd7\067\uffd7" +
    "\070\uffd7\072\uffd7\073\uffd7\104\uffd7\105\uffd7\001\002\000" +
    "\040\011\uffd5\020\uffd5\030\uffd5\031\uffd5\040\uffd5\041\uffd5" +
    "\042\uffd5\043\uffd5\066\uffd5\067\uffd5\070\uffd5\072\uffd5\073" +
    "\uffd5\104\uffd5\105\uffd5\001\002\000\020\031\uffb6\046\uffb6" +
    "\061\uffb6\062\uffb6\063\uffb6\064\uffb6\065\uffb6\001\002\000" +
    "\004\066\206\001\002\000\020\031\uffb5\046\uffb5\061\uffb5" +
    "\062\uffb5\063\uffb5\064\uffb5\065\uffb5\001\002\000\020\031" +
    "\uffb8\046\uffb8\061\uffb8\062\uffb8\063\uffb8\064\uffb8\065\uffb8" +
    "\001\002\000\004\066\211\001\002\000\020\031\uffb7\046" +
    "\uffb7\061\uffb7\062\uffb7\063\uffb7\064\uffb7\065\uffb7\001\002" +
    "\000\020\042\153\043\214\066\154\067\160\070\155\072" +
    "\156\073\161\001\002\000\004\043\215\001\002\000\016" +
    "\011\uffbf\030\uffbf\040\uffbf\043\uffbf\104\uffbf\105\uffbf\001" +
    "\002\000\016\011\uffbe\030\uffbe\040\uffbe\043\uffbe\104\uffbe" +
    "\105\uffbe\001\002\000\014\011\uffc3\030\uffc3\040\uffc3\104" +
    "\uffc3\105\uffc3\001\002\000\016\011\uffc0\030\uffc0\040\uffc0" +
    "\043\uffc0\104\uffc0\105\uffc0\001\002\000\012\030\uffb2\040" +
    "\uffb2\104\265\105\uffb2\001\002\000\020\031\225\032\102" +
    "\033\101\034\075\035\103\042\100\052\106\001\002\000" +
    "\016\012\uff82\016\uff82\030\uff82\040\uff82\104\uff82\105\uff82" +
    "\001\002\000\016\012\uff83\016\uff83\030\uff83\040\uff83\104" +
    "\uff83\105\uff83\001\002\000\016\012\261\016\262\030\uff86" +
    "\040\uff86\104\uff86\105\uff86\001\002\000\024\013\241\014" +
    "\uff69\036\242\041\uff69\044\uff69\045\uff69\046\uff69\047\uff69" +
    "\050\uff69\001\002\000\012\030\uff88\040\uff88\104\uff88\105" +
    "\uff88\001\002\000\010\014\233\041\234\050\232\001\002" +
    "\000\014\014\233\041\234\044\111\045\110\050\232\001" +
    "\002\000\020\031\076\032\102\033\101\034\075\035\103" +
    "\042\100\052\106\001\002\000\020\031\uff77\032\uff77\033" +
    "\uff77\034\uff77\035\uff77\042\uff77\052\uff77\001\002\000\022" +
    "\015\235\031\uff75\032\uff75\033\uff75\034\uff75\035\uff75\042" +
    "\uff75\052\uff75\001\002\000\020\031\uff76\032\uff76\033\uff76" +
    "\034\uff76\035\uff76\042\uff76\052\uff76\001\002\000\020\031" +
    "\uff74\032\uff74\033\uff74\034\uff74\035\uff74\042\uff74\052\uff74" +
    "\001\002\000\022\012\uff79\016\uff79\030\uff79\040\uff79\044" +
    "\111\045\110\104\uff79\105\uff79\001\002\000\020\031\076" +
    "\032\102\033\101\034\075\035\103\042\100\052\106\001" +
    "\002\000\022\012\uff78\016\uff78\030\uff78\040\uff78\044\111" +
    "\045\110\104\uff78\105\uff78\001\002\000\004\042\246\001" +
    "\002\000\004\031\243\001\002\000\012\014\uff8a\036\244" +
    "\041\uff8a\050\uff8a\001\002\000\004\031\245\001\002\000" +
    "\010\014\uff89\041\uff89\050\uff89\001\002\000\014\017\255" +
    "\032\253\033\254\034\252\035\247\001\002\000\006\037" +
    "\uff7d\043\uff7d\001\002\000\004\043\260\001\002\000\006" +
    "\037\256\043\uff80\001\002\000\006\037\uff7b\043\uff7b\001" +
    "\002\000\006\037\uff7c\043\uff7c\001\002\000\006\037\uff7e" +
    "\043\uff7e\001\002\000\006\037\uff7a\043\uff7a\001\002\000" +
    "\014\017\255\032\253\033\254\034\252\035\247\001\002" +
    "\000\004\043\uff7f\001\002\000\016\012\uff81\016\uff81\030" +
    "\uff81\040\uff81\104\uff81\105\uff81\001\002\000\020\031\225" +
    "\032\102\033\101\034\075\035\103\042\100\052\106\001" +
    "\002\000\020\031\225\032\102\033\101\034\075\035\103" +
    "\042\100\052\106\001\002\000\012\030\uff84\040\uff84\104" +
    "\uff84\105\uff84\001\002\000\012\030\uff85\040\uff85\104\uff85" +
    "\105\uff85\001\002\000\004\106\301\001\002\000\010\030" +
    "\uffb0\040\uffb0\105\267\001\002\000\004\106\271\001\002" +
    "\000\006\030\uffde\040\uffde\001\002\000\004\031\272\001" +
    "\002\000\014\007\274\010\276\030\uffab\037\uffab\040\uffab" +
    "\001\002\000\006\030\uffb1\040\uffb1\001\002\000\010\030" +
    "\uffad\037\uffad\040\uffad\001\002\000\010\030\uffaf\037\277" +
    "\040\uffaf\001\002\000\010\030\uffac\037\uffac\040\uffac\001" +
    "\002\000\004\031\272\001\002\000\006\030\uffae\040\uffae" +
    "\001\002\000\004\031\303\001\002\000\010\030\uffb3\040" +
    "\uffb3\105\uffb3\001\002\000\014\030\uff8f\037\304\040\uff8f" +
    "\043\uff8f\105\uff8f\001\002\000\004\031\303\001\002\000" +
    "\012\030\uff8e\040\uff8e\043\uff8e\105\uff8e\001\002\000\006" +
    "\031\307\046\202\001\002\000\036\011\uffd6\020\uffd6\030" +
    "\uffd6\031\uffd6\040\uffd6\042\uffd6\043\uffd6\066\uffd6\067\uffd6" +
    "\070\uffd6\072\uffd6\073\uffd6\104\uffd6\105\uffd6\001\002\000" +
    "\020\031\060\046\066\061\064\062\062\063\071\064\061" +
    "\065\065\001\002\000\004\053\141\001\002\000\014\011" +
    "\221\030\uff87\040\uff87\104\uff87\105\uff87\001\002\000\012" +
    "\030\uffb2\040\uffb2\104\265\105\uffb2\001\002\000\010\030" +
    "\uffb0\040\uffb0\105\267\001\002\000\006\030\uffdf\040\uffdf" +
    "\001\002\000\006\030\uff9a\040\uff9a\001\002\000\006\030" +
    "\uff9b\040\uff9b\001\002\000\024\017\324\021\323\031\076" +
    "\032\102\033\101\034\075\035\103\042\100\052\106\001" +
    "\002\000\004\043\331\001\002\000\006\037\327\043\uff96" +
    "\001\002\000\004\103\326\001\002\000\006\037\uff93\043" +
    "\uff93\001\002\000\012\037\uff92\043\uff92\044\111\045\110" +
    "\001\002\000\006\037\uff94\043\uff94\001\002\000\024\017" +
    "\324\021\323\031\076\032\102\033\101\034\075\035\103" +
    "\042\100\052\106\001\002\000\004\043\uff95\001\002\000" +
    "\010\030\uff98\037\332\040\uff98\001\002\000\004\042\320" +
    "\001\002\000\006\030\uff97\040\uff97\001\002\000\004\043" +
    "\335\001\002\000\010\021\uff9d\060\uff9d\103\uff9d\001\002" +
    "\000\004\031\337\001\002\000\014\021\uffa0\036\340\042" +
    "\uffa0\060\uffa0\103\uffa0\001\002\000\004\031\341\001\002" +
    "\000\014\021\uff9f\036\342\042\uff9f\060\uff9f\103\uff9f\001" +
    "\002\000\004\031\343\001\002\000\012\021\uff9e\042\uff9e" +
    "\060\uff9e\103\uff9e\001\002\000\004\031\345\001\002\000" +
    "\004\037\346\001\002\000\004\035\347\001\002\000\004" +
    "\043\350\001\002\000\012\021\uffa2\042\uffa2\060\uffa2\103" +
    "\uffa2\001\002\000\020\031\076\032\102\033\101\034\075" +
    "\035\103\042\100\052\106\001\002\000\010\043\353\044" +
    "\111\045\110\001\002\000\026\031\uffa6\046\uffa6\061\uffa6" +
    "\062\uffa6\063\uffa6\064\uffa6\065\uffa6\100\355\101\uffa6\102" +
    "\uffa6\001\002\000\024\031\uffa9\046\uffa9\061\uffa9\062\uffa9" +
    "\063\uffa9\064\uffa9\065\uffa9\101\uffa9\102\uffa9\001\002\000" +
    "\024\031\uffa7\046\uffa7\061\uffa7\062\uffa7\063\uffa7\064\uffa7" +
    "\065\uffa7\101\uffa7\102\uffa7\001\002\000\012\030\uffeb\031" +
    "\uffeb\040\uffeb\052\uffeb\001\002\000\012\030\uffec\031\uffec" +
    "\040\uffec\052\uffec\001\002\000\012\030\uffea\031\361\040" +
    "\uffea\052\362\001\002\000\006\030\uffe7\040\uffe7\001\002" +
    "\000\006\030\uffe8\040\uffe8\001\002\000\020\031\076\032" +
    "\102\033\101\034\075\035\103\042\100\052\106\001\002" +
    "\000\012\030\ufff4\040\ufff4\044\111\045\110\001\002\000" +
    "\012\023\373\024\375\025\374\026\371\001\002\000\014" +
    "\023\ufff6\024\ufff6\025\ufff6\026\ufff6\037\367\001\002\000" +
    "\004\052\366\001\002\000\012\023\ufff5\024\ufff5\025\ufff5" +
    "\026\ufff5\001\002\000\006\030\uff63\040\uff63\001\002\000" +
    "\006\030\ufff7\040\ufff7\001\002\000\006\030\uff65\040\uff65" +
    "\001\002\000\006\030\uff66\040\uff66\001\002\000\006\030" +
    "\uff64\040\uff64\001\002\000\012\030\uffe6\031\377\040\uffe6" +
    "\052\u0100\001\002\000\006\030\uffe4\040\uffe4\001\002\000" +
    "\006\030\uffe5\040\uffe5\001\002\000\004\002\000\001\002" +
    "\000\004\002\uff61\001\002\000\004\002\uff62\001\002\000" +
    "\012\030\uffed\031\u0105\040\uffed\052\u0106\001\002\000\006" +
    "\030\uffee\040\uffee\001\002\000\006\030\uffef\040\uffef\001" +
    "\002\000\004\031\143\001\002\000\006\030\uff90\040\uff90" +
    "\001\002\000\012\030\uffe3\031\u010a\040\uffe3\052\u010b\001" +
    "\002\000\006\030\uffe1\040\uffe1\001\002\000\006\030\uffe2" +
    "\040\uffe2\001\002\000\006\030\ufff8\040\ufff8\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u010a\000\040\002\032\003\012\004\011\005\007\006" +
    "\024\007\015\012\023\013\022\014\010\023\026\060\025" +
    "\072\021\073\017\074\016\075\014\001\001\000\002\001" +
    "\001\000\004\076\u0108\001\001\000\002\001\001\000\004" +
    "\076\u0103\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\031\u0100\001\001\000\004\076\375" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\035\364\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\076\357\001\001\000\004\036\035\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\040\037\001\001\000\002\001\001\000\006\041\042\042" +
    "\043\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\043\045\001\001\000\002\001\001\000\004\016\333\001" +
    "\001\000\006\010\052\047\050\001\001\000\004\044\316" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\036" +
    "\056\050\053\001\001\000\002\001\001\000\004\036\307" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\051" +
    "\062\052\067\053\066\056\072\057\071\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\063" +
    "\137\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\054\130\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\032\106\033\076\034\103\062\104\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\032\122" +
    "\033\076\034\103\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\033\120\034" +
    "\103\001\001\000\006\033\113\034\103\001\001\000\012" +
    "\032\106\033\076\034\103\062\112\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\034\117\001\001\000\004" +
    "\034\116\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\051\125\052\067\053\066\056\072\057" +
    "\071\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\055" +
    "\134\001\001\000\004\055\136\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\017\217\001" +
    "\001\000\004\015\141\001\001\000\012\054\151\064\147" +
    "\065\150\066\156\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\064\216\065\150\066\156\001" +
    "\001\000\010\064\215\065\150\066\156\001\001\000\006" +
    "\065\211\066\156\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\052\165\053\066\056\072" +
    "\057\071\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\015\171\053\170\056" +
    "\072\057\071\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\015\173\001\001\000\002\001" +
    "\001\000\010\053\175\056\072\057\071\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\064\212\065\150" +
    "\066\156\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\070\265\001\001\000\022\021\225\022\223\024\222\025" +
    "\221\032\227\033\076\034\103\067\226\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\030\236\001\001\000\004" +
    "\030\230\001\001\000\010\032\235\033\076\034\103\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\032\237\033" +
    "\076\034\103\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\026\250\027\247\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\026\250\027\256\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\021\263\022\223\024\222\025\221" +
    "\032\227\033\076\034\103\067\226\001\001\000\022\021" +
    "\262\022\223\024\222\025\221\032\227\033\076\034\103" +
    "\067\226\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\071\267\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\020\272\001\001\000\004\011" +
    "\274\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\020\277\001\001\000" +
    "\002\001\001\000\004\016\301\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\016\304\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\051\310" +
    "\052\067\053\066\056\072\057\071\001\001\000\004\063" +
    "\311\001\001\000\004\017\312\001\001\000\004\070\313" +
    "\001\001\000\004\071\314\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\032\324\033\076" +
    "\034\103\045\320\046\321\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\032\324\033\076\034" +
    "\103\045\327\046\321\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\044\332\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\032\351\033\076\034\103\001\001\000\002\001\001" +
    "\000\004\037\353\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\032\363\033" +
    "\076\034\103\001\001\000\002\001\001\000\004\061\371" +
    "\001\001\000\002\001\001\000\004\035\367\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\015\u0107\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;

    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // FIN ::= Go 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FIN",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // FIN ::= Punto_Coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FIN",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // TIPO_DATO ::= BitR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPO_DATO",47, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // TIPO_DATO ::= Varchar 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPO_DATO",47, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // TIPO_DATO ::= FloatR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPO_DATO",47, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // TIPO_DATO ::= IntR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPO_DATO",47, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // F ::= Parentesis_a COLUMN_EXPRESION Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("F",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // F ::= Var 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("F",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // F ::= Id 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("F",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // F ::= String 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("F",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // F ::= Bit 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("F",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // F ::= Float 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("F",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // F ::= Int 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("F",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // T ::= F 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("T",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // T ::= T Dividir F 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("T",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // T ::= T Asterisco F 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("T",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // COLUMN_EXPRESION ::= T 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COLUMN_EXPRESION",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // COLUMN_EXPRESION ::= COLUMN_EXPRESION Menos T 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COLUMN_EXPRESION",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // COLUMN_EXPRESION ::= COLUMN_EXPRESION Mas T 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COLUMN_EXPRESION",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // COMPARADOR ::= Is Not 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COMPARADOR",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // COMPARADOR ::= Is 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COMPARADOR",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // COMPARADOR ::= Igual 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COMPARADOR",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // COMPARADOR ::= Comparador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COMPARADOR",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // COMPARACION ::= TABLENAME_3 COMPARADOR COLUMN_EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COMPARACION",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // COMPARACION ::= COLUMN_EXPRESION COMPARADOR COLUMN_EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COMPARACION",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // CONSTANT ::= Null 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONSTANT",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // CONSTANT ::= Float 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONSTANT",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // CONSTANT ::= Bit 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONSTANT",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // CONSTANT ::= String 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONSTANT",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // CONSTANT ::= Int 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONSTANT",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // CONSTANTS ::= CONSTANT Coma CONSTANTS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONSTANTS",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // CONSTANTS ::= CONSTANT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONSTANTS",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // DISJUNCT ::= Id In Parentesis_a CONSTANTS Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DISJUNCT",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // CONJUNCT ::= COMPARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONJUNCT",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // CONJUNCT ::= DISJUNCT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONJUNCT",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // FILTER ::= CONJUNCT Or FILTER 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FILTER",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // FILTER ::= CONJUNCT And FILTER 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FILTER",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // FILTER ::= CONJUNCT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FILTER",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // WHERE_INDEX ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WHERE_INDEX",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // WHERE_INDEX ::= Where FILTER 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WHERE_INDEX",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // TABLENAME_3 ::= Id Punto Id Punto Id 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TABLENAME_3",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // TABLENAME_3 ::= Id Punto Id 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TABLENAME_3",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // TABLENAME ::= Id Punto Id Punto Id 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TABLENAME",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // TABLENAME ::= Id Punto Id 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TABLENAME",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // TABLENAME ::= Id 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TABLENAME",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // DATABASE_NAMES ::= Id Coma DATABASE_NAMES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DATABASE_NAMES",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // DATABASE_NAMES ::= Id 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DATABASE_NAMES",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // TRUNCATE ::= Truncate Table TABLENAME 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TRUNCATE",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // DDL ::= TRUNCATE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DDL",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // VALUES_OPTION ::= COLUMN_EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VALUES_OPTION",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // VALUES_OPTION ::= Null 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VALUES_OPTION",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // VALUES_OPTION ::= Default Values 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VALUES_OPTION",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // VALUES_OPTIONS ::= VALUES_OPTION Coma VALUES_OPTIONS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VALUES_OPTIONS",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // VALUES_OPTIONS ::= VALUES_OPTION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VALUES_OPTIONS",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // VALUES ::= Parentesis_a VALUES_OPTIONS Parentesis_c Coma VALUES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VALUES",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // VALUES ::= Parentesis_a VALUES_OPTIONS Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VALUES",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // VALUES_2 ::= SELECT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VALUES_2",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // VALUES_2 ::= Default Values 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VALUES_2",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // VALUES_2 ::= Values VALUES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VALUES_2",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // COLUMN_LIST ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COLUMN_LIST",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // COLUMN_LIST ::= Parentesis_a DATABASE_NAMES Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COLUMN_LIST",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // TABLENAME_2 ::= Id Punto Id Punto Id Punto Id 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TABLENAME_2",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // TABLENAME_2 ::= Id Punto Id Punto Id 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TABLENAME_2",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // TABLENAME_2 ::= Id Punto Id 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TABLENAME_2",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // TABLENAME_2 ::= Id 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TABLENAME_2",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // OBJECT ::= Openquery Parentesis_a Id Coma String Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OBJECT",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // OBJECT ::= TABLENAME_2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OBJECT",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // INTO ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INTO",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // INTO ::= Into 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INTO",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // PERCENT ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PERCENT",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // PERCENT ::= Percent 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PERCENT",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // TOP ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TOP",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // TOP ::= Top Parentesis_a COLUMN_EXPRESION Parentesis_c PERCENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TOP",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // INSERT ::= Insert TOP INTO OBJECT COLUMN_LIST VALUES_2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSERT",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // ASC ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASC",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // ASC ::= Desc 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASC",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // ASC ::= Asc 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASC",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // COLUMN_NAMES_ASC ::= Id ASC Coma COLUMN_NAMES_ASC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COLUMN_NAMES_ASC",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // COLUMN_NAMES_ASC ::= Id ASC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COLUMN_NAMES_ASC",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // ORDER_BY ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ORDER_BY",55, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // ORDER_BY ::= Order By COLUMN_NAMES_ASC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ORDER_BY",55, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // GROUP_BY ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("GROUP_BY",54, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // GROUP_BY ::= Group By DATABASE_NAMES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("GROUP_BY",54, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // JOIN_TYPE ::= Inner Join 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("JOIN_TYPE",52, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // JOIN_TYPE ::= Right Outer Join 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("JOIN_TYPE",52, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // JOIN_TYPE ::= Right Join 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("JOIN_TYPE",52, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // JOIN_TYPE ::= Left Outer Join 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("JOIN_TYPE",52, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // JOIN_TYPE ::= Left Join 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("JOIN_TYPE",52, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // JOIN_TYPE ::= Full Join 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("JOIN_TYPE",52, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // JOIN_TYPE ::= Full Outer Join 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("JOIN_TYPE",52, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // JOIN_TYPE ::= Join 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("JOIN_TYPE",52, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // JOIN ::= JOIN_TYPE CAMPO_AS On TABLENAME Comparador TABLENAME 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("JOIN",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // JOIN ::= JOIN_TYPE CAMPO_AS On CAMPO Igual CAMPO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("JOIN",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // JOINS ::= Parentesis_a JOIN JOINS Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("JOINS",50, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // JOINS ::= Parentesis_a JOIN Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("JOINS",50, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // JOINS ::= JOIN JOINS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("JOINS",50, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // JOINS ::= JOIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("JOINS",50, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // FROM ::= From TABLENAME 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FROM",49, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // FROM ::= From TABLENAME ALIAS JOINS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FROM",49, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // FROM ::= From TABLENAME JOINS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FROM",49, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // FROM ::= From TABLENAME ALIAS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FROM",49, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // PARAMETROS ::= COLUMN_EXPRESION Coma PARAMETROS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROS",48, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // PARAMETROS ::= COLUMN_EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROS",48, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // METHOD_NAME ::= Sum 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("METHOD_NAME",45, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // METHOD_NAME ::= Count 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("METHOD_NAME",45, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // METHOD_NAME ::= Max 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("METHOD_NAME",45, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // METHOD_NAME ::= Min 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("METHOD_NAME",45, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // METHOD_NAME ::= Avg 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("METHOD_NAME",45, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // METHOD ::= METHOD_NAME Parentesis_a PARAMETROS Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("METHOD",44, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // ID_M ::= Id ID_M 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ID_M",43, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // ID_M ::= Id 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ID_M",43, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // ALIAS ::= As Bracket_a ID_M Bracket_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ALIAS",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // ALIAS ::= Id 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ALIAS",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // ALIAS ::= As Id 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ALIAS",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // CAMPO ::= Id 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CAMPO",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // CAMPO ::= METHOD 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CAMPO",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // CAMPO ::= Id Cuadro Id 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CAMPO",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // CAMPO ::= Id Punto Id 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CAMPO",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // CAMPO ::= Id Punto Asterisco 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CAMPO",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // CAMPO ::= Asterisco 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CAMPO",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // CAMPO_AS ::= CAMPO ALIAS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CAMPO_AS",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // SELECT_LIST ::= CAMPO_AS Coma SELECT_LIST 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SELECT_LIST",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // SELECT_LIST ::= CAMPO_AS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SELECT_LIST",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // ALL_DISTINCT ::= Distinct 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ALL_DISTINCT",38, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ALL_DISTINCT ::= All 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ALL_DISTINCT",38, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // SELECT ::= Select TOP SELECT_LIST FROM WHERE_INDEX GROUP_BY ORDER_BY 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SELECT",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // SELECT ::= Select ALL_DISTINCT TOP SELECT_LIST FROM WHERE_INDEX GROUP_BY ORDER_BY 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SELECT",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // DML ::= INSERT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DML",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // SAVEPOINT ::= Save TRAN Id 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SAVEPOINT",59, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // SAVEPOINT ::= Save TRAN Var 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SAVEPOINT",59, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // SAVEPOINT ::= Save TRAN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SAVEPOINT",59, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ROLLBACK ::= Rollback TRAN Id 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ROLLBACK",58, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ROLLBACK ::= Rollback TRAN Var 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ROLLBACK",58, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ROLLBACK ::= Rollback TRAN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ROLLBACK",58, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // COMMIT ::= Commit TRAN Id 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COMMIT",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // COMMIT ::= Commit TRAN Var 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COMMIT",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // COMMIT ::= Commit 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COMMIT",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // COMMIT ::= Commit TRAN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COMMIT",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // TRAN ::= Transaction 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TRAN",60, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // TRAN ::= Tran 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TRAN",60, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // BEGIN ::= Begin TRAN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BEGIN",56, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // BEGIN ::= Begin TRAN Id 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BEGIN",56, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // BEGIN ::= Begin TRAN Var 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BEGIN",56, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // TCL ::= SAVEPOINT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TCL",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // TCL ::= ROLLBACK 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TCL",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // TCL ::= COMMIT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TCL",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // TCL ::= BEGIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TCL",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SET ::= Set Igual COLUMN_EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SET",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // VARIABLES ::= Var Coma VARIABLES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLES",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // VARIABLES ::= Var 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLES",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // DECLA ::= Declare VARIABLES TIPO_DATO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLA",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // USE ::= Use Id 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("USE",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // SENTENCIA ::= USE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // SENTENCIA ::= SET 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // SENTENCIA ::= DECLA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // SENTENCIA ::= TSQL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // SENTENCIA ::= TCL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // SENTENCIA ::= DDL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // SENTENCIA ::= DML 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= SENTENCIA FIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

