
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Oct 31 18:40:01 CST 2019
//----------------------------------------------------

package AnalizadorSint;

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Oct 31 18:40:01 CST 2019
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\u0164\000\002\002\004\000\002\002\004\000\002\003" +
    "\003\000\002\003\003\000\002\003\003\000\002\003\003" +
    "\000\002\006\003\000\002\006\003\000\002\006\003\000" +
    "\002\006\003\000\002\224\005\000\002\224\006\000\002" +
    "\230\003\000\002\230\003\000\002\225\004\000\002\225" +
    "\003\000\002\225\005\000\002\225\005\000\002\226\004" +
    "\000\002\226\005\000\002\226\005\000\002\227\004\000" +
    "\002\227\005\000\002\227\005\000\002\004\003\000\002" +
    "\004\003\000\002\004\003\000\002\004\003\000\002\010" +
    "\012\000\002\010\011\000\002\203\003\000\002\203\003" +
    "\000\002\204\003\000\002\204\005\000\002\205\004\000" +
    "\002\206\003\000\002\206\005\000\002\206\005\000\002" +
    "\206\005\000\002\206\003\000\002\206\003\000\002\207" +
    "\004\000\002\207\003\000\002\207\006\000\002\210\003" +
    "\000\002\210\004\000\002\211\006\000\002\212\003\000" +
    "\002\212\003\000\002\212\003\000\002\212\003\000\002" +
    "\212\003\000\002\213\003\000\002\213\005\000\002\214" +
    "\005\000\002\214\005\000\002\214\006\000\002\214\004" +
    "\000\002\215\003\000\002\215\004\000\002\215\005\000" +
    "\002\215\006\000\002\216\010\000\002\216\010\000\002" +
    "\217\003\000\002\217\005\000\002\217\004\000\002\217" +
    "\004\000\002\217\005\000\002\217\004\000\002\217\005" +
    "\000\002\217\004\000\002\221\005\000\002\221\002\000" +
    "\002\222\005\000\002\222\002\000\002\015\010\000\002" +
    "\164\007\000\002\164\002\000\002\165\003\000\002\165" +
    "\002\000\002\166\003\000\002\166\002\000\002\167\003" +
    "\000\002\167\010\000\002\170\003\000\002\170\005\000" +
    "\002\170\007\000\002\170\011\000\002\171\005\000\002" +
    "\171\002\000\002\175\004\000\002\175\004\000\002\172" +
    "\005\000\002\172\007\000\002\173\003\000\002\173\005" +
    "\000\002\174\004\000\002\174\003\000\002\174\003\000" +
    "\002\016\010\000\002\176\003\000\002\176\003\000\002" +
    "\177\003\000\002\177\005\000\002\200\003\000\002\200" +
    "\003\000\002\201\005\000\002\201\005\000\002\201\005" +
    "\000\002\201\005\000\002\202\005\000\002\202\005\000" +
    "\002\202\005\000\002\011\005\000\002\011\006\000\002" +
    "\223\003\000\002\223\002\000\002\005\003\000\002\005" +
    "\003\000\002\005\003\000\002\005\003\000\002\020\005" +
    "\000\002\017\004\000\002\033\003\000\002\033\003\000" +
    "\002\033\003\000\002\033\003\000\002\033\003\000\002" +
    "\026\005\000\002\032\005\000\002\030\005\000\002\031" +
    "\005\000\002\027\005\000\002\027\005\000\002\045\005" +
    "\000\002\045\007\000\002\046\005\000\002\046\007\000" +
    "\002\046\007\000\002\046\011\000\002\021\003\000\002" +
    "\021\003\000\002\021\003\000\002\021\003\000\002\021" +
    "\003\000\002\034\007\000\002\041\005\000\002\041\002" +
    "\000\002\042\004\000\002\042\002\000\002\043\003\000" +
    "\002\043\002\000\002\044\014\000\002\044\016\000\002" +
    "\013\006\000\002\013\006\000\002\040\005\000\002\035" +
    "\017\000\002\050\003\000\002\050\002\000\002\051\003" +
    "\000\002\051\003\000\002\051\002\000\002\054\004\000" +
    "\002\054\006\000\002\055\003\000\002\055\003\000\002" +
    "\055\002\000\002\053\006\000\002\053\002\000\002\047" +
    "\004\000\002\047\002\000\002\056\003\000\002\056\005" +
    "\000\002\056\005\000\002\057\003\000\002\057\003\000" +
    "\002\062\007\000\002\065\003\000\002\065\005\000\002" +
    "\064\003\000\002\064\003\000\002\064\003\000\002\064" +
    "\003\000\002\064\003\000\002\063\005\000\002\063\005" +
    "\000\002\066\003\000\002\066\003\000\002\066\003\000" +
    "\002\066\004\000\002\052\007\000\002\052\004\000\002" +
    "\052\004\000\002\052\002\000\002\037\012\000\002\060" +
    "\004\000\002\060\002\000\002\072\003\000\002\072\005" +
    "\000\002\071\003\000\002\071\003\000\002\071\003\000" +
    "\002\071\003\000\002\061\013\000\002\073\004\000\002" +
    "\121\003\000\002\121\003\000\002\121\003\000\002\121" +
    "\003\000\002\104\005\000\002\104\002\000\002\014\003" +
    "\000\002\014\005\000\002\014\003\000\002\067\003\000" +
    "\002\067\002\000\002\070\004\000\002\100\004\000\002" +
    "\100\002\000\002\101\007\000\002\101\002\000\002\106" +
    "\003\000\002\106\003\000\002\102\003\000\002\102\004" +
    "\000\002\102\006\000\002\102\007\000\002\102\005\000" +
    "\002\102\002\000\002\103\003\000\002\103\002\000\002" +
    "\107\004\000\002\107\002\000\002\110\004\000\002\110" +
    "\002\000\002\114\005\000\002\114\010\000\002\114\007" +
    "\000\002\116\004\000\002\116\003\000\002\117\004\000" +
    "\002\117\002\000\002\120\005\000\002\120\003\000\002" +
    "\111\005\000\002\111\002\000\002\122\005\000\002\122" +
    "\010\000\002\122\005\000\002\122\002\000\002\124\004" +
    "\000\002\124\003\000\002\124\004\000\002\124\004\000" +
    "\002\105\005\000\002\105\002\000\002\115\005\000\002" +
    "\115\002\000\002\074\006\000\002\074\005\000\002\125" +
    "\005\000\002\125\005\000\002\125\003\000\002\126\005" +
    "\000\002\126\005\000\002\126\003\000\002\127\003\000" +
    "\002\127\003\000\002\127\003\000\002\127\003\000\002" +
    "\127\003\000\002\127\003\000\002\127\005\000\002\075" +
    "\004\000\002\130\010\000\002\130\014\000\002\130\005" +
    "\000\002\076\010\000\002\036\011\000\002\112\004\000" +
    "\002\112\002\000\002\113\005\000\002\113\002\000\002" +
    "\022\004\000\002\131\003\000\002\131\003\000\002\131" +
    "\003\000\002\131\003\000\002\131\003\000\002\132\005" +
    "\000\002\140\003\000\002\140\005\000\002\140\003\000" +
    "\002\145\003\000\002\145\005\000\002\146\010\000\002" +
    "\147\007\000\002\147\003\000\002\147\002\000\002\141" +
    "\004\000\002\141\006\000\002\142\007\000\002\142\005" +
    "\000\002\142\004\000\002\142\004\000\002\143\003\000" +
    "\002\143\003\000\002\144\003\000\002\144\003\000\002" +
    "\137\003\000\002\137\003\000\002\135\004\000\002\133" +
    "\005\000\002\157\003\000\002\157\003\000\002\157\003" +
    "\000\002\157\003\000\002\151\007\000\002\151\006\000" +
    "\002\154\003\000\002\154\004\000\002\154\002\000\002" +
    "\156\003\000\002\156\003\000\002\155\003\000\002\155" +
    "\005\000\002\152\004\000\002\153\006\000\002\160\003" +
    "\000\002\160\003\000\002\160\002\000\002\161\005\000" +
    "\002\163\003\000\002\163\003\000\002\162\003\000\002" +
    "\162\003\000\002\134\007\000\002\136\006\000\002\136" +
    "\006\000\002\025\003\000\002\025\005\000\002\024\003" +
    "\000\002\024\005\000\002\012\004\000\002\012\002\000" +
    "\002\023\003\000\002\023\005\000\002\023\007\000\002" +
    "\220\005\000\002\220\007\000\002\150\003\000\002\150" +
    "\003\000\002\077\003\000\002\077\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0281\000\036\004\005\005\031\006\043\070\uffb3\110" +
    "\016\114\037\126\044\127\042\136\uffb3\137\uffb3\144\030" +
    "\163\010\166\017\167\004\001\002\000\006\164\u0166\165" +
    "\u0167\001\002\000\004\015\u027f\001\002\000\006\067\uffe9" +
    "\077\uffe9\001\002\000\006\067\ufffe\077\ufffe\001\002\000" +
    "\006\164\u0166\165\u0167\001\002\000\006\067\uff8a\077\uff8a" +
    "\001\002\000\006\067\uff71\077\uff71\001\002\000\006\067" +
    "\uffff\077\uffff\001\002\000\006\067\uff74\077\uff74\001\002" +
    "\000\006\067\u027a\077\u027b\001\002\000\014\007\u0219\010" +
    "\u021c\011\u0218\012\u0215\015\u021b\001\002\000\006\164\u0166" +
    "\165\u0167\001\002\000\006\067\ufff8\077\ufff8\001\002\000" +
    "\006\067\ufffc\077\ufffc\001\002\000\006\067\ufff9\077\ufff9" +
    "\001\002\000\006\067\ufffa\077\ufffa\001\002\000\006\067" +
    "\ufffb\077\ufffb\001\002\000\006\067\uff70\077\uff70\001\002" +
    "\000\006\067\uff89\077\uff89\001\002\000\006\067\uffe6\077" +
    "\uffe6\001\002\000\026\070\uffb3\105\uffb3\125\u01fa\127\042" +
    "\140\u01fb\145\uffb3\146\uffb3\147\uffb3\150\uffb3\151\uffb3\001" +
    "\002\000\014\007\u01d4\010\u01d8\011\u01d3\012\u01cf\015\u01d7" +
    "\001\002\000\006\067\uff88\077\uff88\001\002\000\006\067" +
    "\ufffd\077\ufffd\001\002\000\010\070\054\136\u016d\137\u016c" +
    "\001\002\000\006\067\uff73\077\uff73\001\002\000\006\067" +
    "\uff8b\077\uff8b\001\002\000\012\067\ufff2\077\ufff2\164\u0166" +
    "\165\u0167\001\002\000\006\067\uffe7\077\uffe7\001\002\000" +
    "\006\067\uffe8\077\uffe8\001\002\000\004\101\u0161\001\002" +
    "\000\024\007\151\010\152\011\uff61\012\ufee7\015\145\025" +
    "\150\026\uff61\027\uff61\041\153\001\002\000\012\070\uffb3" +
    "\127\042\131\uffb3\132\uffb3\001\002\000\004\002\047\001" +
    "\002\000\006\067\uff72\077\uff72\001\002\000\004\002\001" +
    "\001\002\000\010\070\uffaf\131\051\132\uffaf\001\002\000" +
    "\006\070\uffb0\132\uffb0\001\002\000\006\070\054\132\053" +
    "\001\002\000\004\101\140\001\002\000\024\033\uffac\045" +
    "\uffac\063\uffac\067\uffac\075\132\077\uffac\101\uffac\133\uffac" +
    "\137\uffac\001\002\000\010\045\uffa7\101\057\133\uffa7\001" +
    "\002\000\010\045\uffae\101\uffae\133\uffae\001\002\000\004" +
    "\070\126\001\002\000\006\045\062\133\061\001\002\000" +
    "\004\101\066\001\002\000\004\133\064\001\002\000\006" +
    "\067\uffb5\077\uffb5\001\002\000\006\067\uffa5\077\uffa5\001" +
    "\002\000\006\067\uffa6\077\uffa6\001\002\000\024\042\101" +
    "\045\075\070\070\071\077\072\076\073\067\074\100\101" +
    "\073\136\103\001\002\000\060\016\ufef4\017\ufef4\025\ufef4" +
    "\033\ufef4\034\ufef4\036\ufef4\041\ufef4\057\ufef4\060\ufef4\066" +
    "\ufef4\067\ufef4\076\ufef4\077\ufef4\100\ufef4\102\ufef4\103\ufef4" +
    "\104\ufef4\105\ufef4\106\ufef4\107\ufef4\137\ufef4\160\ufef4\161" +
    "\ufef4\001\002\000\060\016\ufef1\017\ufef1\025\ufef1\033\ufef1" +
    "\034\ufef1\036\ufef1\041\ufef1\057\ufef1\060\ufef1\066\ufef1\067" +
    "\ufef1\076\ufef1\077\ufef1\100\ufef1\102\ufef1\103\ufef1\104\ufef1" +
    "\105\ufef1\106\ufef1\107\ufef1\137\ufef1\160\ufef1\161\ufef1\001" +
    "\002\000\004\102\122\001\002\000\060\016\ufef9\017\ufef9" +
    "\025\ufef9\033\ufef9\034\ufef9\036\ufef9\041\ufef9\057\ufef9\060" +
    "\ufef9\066\ufef9\067\ufef9\076\ufef9\077\ufef9\100\ufef9\102\ufef9" +
    "\103\ufef9\104\ufef9\105\111\106\110\107\ufef9\137\ufef9\160" +
    "\ufef9\161\ufef9\001\002\000\020\070\070\071\077\072\076" +
    "\073\067\074\100\101\073\136\103\001\002\000\006\076" +
    "\116\102\uffa2\001\002\000\004\133\115\001\002\000\060" +
    "\016\ufef5\017\ufef5\025\ufef5\033\ufef5\034\ufef5\036\ufef5\041" +
    "\ufef5\057\ufef5\060\ufef5\066\ufef5\067\ufef5\076\ufef5\077\ufef5" +
    "\100\ufef5\102\ufef5\103\ufef5\104\ufef5\105\ufef5\106\ufef5\107" +
    "\ufef5\137\ufef5\160\ufef5\161\ufef5\001\002\000\060\016\ufef3" +
    "\017\ufef3\025\ufef3\033\ufef3\034\ufef3\036\ufef3\041\ufef3\057" +
    "\ufef3\060\ufef3\066\ufef3\067\ufef3\076\ufef3\077\ufef3\100\ufef3" +
    "\102\ufef3\103\ufef3\104\ufef3\105\ufef3\106\ufef3\107\ufef3\137" +
    "\ufef3\160\ufef3\161\ufef3\001\002\000\060\016\ufef2\017\ufef2" +
    "\025\ufef2\033\ufef2\034\ufef2\036\ufef2\041\ufef2\057\ufef2\060" +
    "\ufef2\066\ufef2\067\ufef2\076\ufef2\077\ufef2\100\ufef2\102\ufef2" +
    "\103\ufef2\104\ufef2\105\ufef2\106\ufef2\107\ufef2\137\ufef2\160" +
    "\ufef2\161\ufef2\001\002\000\006\076\uff9f\102\uff9f\001\002" +
    "\000\060\016\ufef6\017\ufef6\025\ufef6\033\ufef6\034\ufef6\036" +
    "\ufef6\041\ufef6\057\ufef6\060\ufef6\066\ufef6\067\ufef6\076\ufef6" +
    "\077\ufef6\100\ufef6\102\ufef6\103\ufef6\104\ufef6\105\ufef6\106" +
    "\ufef6\107\ufef6\137\ufef6\160\ufef6\161\ufef6\001\002\000\060" +
    "\016\ufef0\017\ufef0\025\ufef0\033\ufef0\034\ufef0\036\ufef0\041" +
    "\ufef0\057\ufef0\060\ufef0\066\ufef0\067\ufef0\076\ufef0\077\ufef0" +
    "\100\ufef0\102\ufef0\103\ufef0\104\ufef0\105\ufef0\106\ufef0\107" +
    "\ufef0\137\ufef0\160\ufef0\161\ufef0\001\002\000\012\076\uff9e" +
    "\102\uff9e\103\105\104\106\001\002\000\020\070\070\071" +
    "\077\072\076\073\067\074\100\101\073\136\103\001\002" +
    "\000\020\070\070\071\077\072\076\073\067\074\100\101" +
    "\073\136\103\001\002\000\060\016\ufefa\017\ufefa\025\ufefa" +
    "\033\ufefa\034\ufefa\036\ufefa\041\ufefa\057\ufefa\060\ufefa\066" +
    "\ufefa\067\ufefa\076\ufefa\077\ufefa\100\ufefa\102\ufefa\103\ufefa" +
    "\104\ufefa\105\111\106\110\107\ufefa\137\ufefa\160\ufefa\161" +
    "\ufefa\001\002\000\020\070\070\071\077\072\076\073\067" +
    "\074\100\101\073\136\103\001\002\000\020\070\070\071" +
    "\077\072\076\073\067\074\100\101\073\136\103\001\002" +
    "\000\060\016\ufef8\017\ufef8\025\ufef8\033\ufef8\034\ufef8\036" +
    "\ufef8\041\ufef8\057\ufef8\060\ufef8\066\ufef8\067\ufef8\076\ufef8" +
    "\077\ufef8\100\ufef8\102\ufef8\103\ufef8\104\ufef8\105\ufef8\106" +
    "\ufef8\107\ufef8\137\ufef8\160\ufef8\161\ufef8\001\002\000\060" +
    "\016\ufef7\017\ufef7\025\ufef7\033\ufef7\034\ufef7\036\ufef7\041" +
    "\ufef7\057\ufef7\060\ufef7\066\ufef7\067\ufef7\076\ufef7\077\ufef7" +
    "\100\ufef7\102\ufef7\103\ufef7\104\ufef7\105\ufef7\106\ufef7\107" +
    "\ufef7\137\ufef7\160\ufef7\161\ufef7\001\002\000\060\016\ufefb" +
    "\017\ufefb\025\ufefb\033\ufefb\034\ufefb\036\ufefb\041\ufefb\057" +
    "\ufefb\060\ufefb\066\ufefb\067\ufefb\076\ufefb\077\ufefb\100\ufefb" +
    "\102\ufefb\103\ufefb\104\ufefb\105\111\106\110\107\ufefb\137" +
    "\ufefb\160\ufefb\161\ufefb\001\002\000\006\076\uffa0\102\uffa0" +
    "\001\002\000\024\042\101\045\075\070\070\071\077\072" +
    "\076\073\067\074\100\101\073\136\103\001\002\000\004" +
    "\102\uffa1\001\002\000\010\102\121\103\105\104\106\001" +
    "\002\000\060\016\ufeef\017\ufeef\025\ufeef\033\ufeef\034\ufeef" +
    "\036\ufeef\041\ufeef\057\ufeef\060\ufeef\066\ufeef\067\ufeef\076" +
    "\ufeef\077\ufeef\100\ufeef\102\ufeef\103\ufeef\104\ufeef\105\ufeef" +
    "\106\ufeef\107\ufeef\137\ufeef\160\ufeef\161\ufeef\001\002\000" +
    "\010\067\uffa4\076\123\077\uffa4\001\002\000\004\101\066" +
    "\001\002\000\006\067\uffa3\077\uffa3\001\002\000\004\102" +
    "\131\001\002\000\014\067\ufeac\076\127\077\ufeac\102\ufeac" +
    "\161\ufeac\001\002\000\004\070\126\001\002\000\012\067" +
    "\ufeab\077\ufeab\102\ufeab\161\ufeab\001\002\000\006\045\uffa8" +
    "\133\uffa8\001\002\000\004\070\133\001\002\000\024\033" +
    "\uffab\045\uffab\063\uffab\067\uffab\075\134\077\uffab\101\uffab" +
    "\133\uffab\137\uffab\001\002\000\004\070\135\001\002\000" +
    "\024\033\uffaa\045\uffaa\063\uffaa\067\uffaa\075\136\077\uffaa" +
    "\101\uffaa\133\uffaa\137\uffaa\001\002\000\004\070\137\001" +
    "\002\000\022\033\uffa9\045\uffa9\063\uffa9\067\uffa9\077\uffa9" +
    "\101\uffa9\133\uffa9\137\uffa9\001\002\000\004\070\141\001" +
    "\002\000\004\076\142\001\002\000\004\074\143\001\002" +
    "\000\004\102\144\001\002\000\010\045\uffad\101\uffad\133" +
    "\uffad\001\002\000\004\070\221\001\002\000\004\012\320" +
    "\001\002\000\010\011\uff5e\026\213\027\214\001\002\000" +
    "\010\011\uff62\026\uff62\027\uff62\001\002\000\004\070\156" +
    "\001\002\000\004\070\155\001\002\000\004\110\154\001" +
    "\002\000\004\012\ufee8\001\002\000\006\067\uff64\077\uff64" +
    "\001\002\000\012\016\160\023\uff6d\067\uff6d\077\uff6d\001" +
    "\002\000\010\023\210\067\uff6b\077\uff6b\001\002\000\006" +
    "\017\162\101\uff69\001\002\000\004\101\163\001\002\000" +
    "\004\101\uff6a\001\002\000\004\020\165\001\002\000\010" +
    "\023\uff6e\067\uff6e\077\uff6e\001\002\000\004\100\166\001" +
    "\002\000\006\070\167\074\170\001\002\000\006\076\ufea0" +
    "\102\ufea0\001\002\000\006\076\ufea1\102\ufea1\001\002\000" +
    "\004\076\172\001\002\000\004\021\173\001\002\000\004" +
    "\100\174\001\002\000\004\074\175\001\002\000\004\076" +
    "\176\001\002\000\004\022\203\001\002\000\004\102\200" +
    "\001\002\000\012\023\uff68\067\uff68\076\201\077\uff68\001" +
    "\002\000\004\101\163\001\002\000\010\023\uff67\067\uff67" +
    "\077\uff67\001\002\000\004\100\204\001\002\000\006\071" +
    "\205\072\206\001\002\000\004\102\uff65\001\002\000\004" +
    "\102\uff66\001\002\000\006\067\uff6f\077\uff6f\001\002\000" +
    "\004\070\211\001\002\000\042\011\uff6c\017\uff6c\025\uff6c" +
    "\037\uff6c\042\uff6c\044\uff6c\045\uff6c\046\uff6c\051\uff6c\057" +
    "\uff6c\060\uff6c\066\uff6c\067\uff6c\076\uff6c\077\uff6c\102\uff6c" +
    "\001\002\000\004\011\215\001\002\000\020\011\uff60\016" +
    "\uff60\067\uff60\076\uff60\077\uff60\101\uff60\102\uff60\001\002" +
    "\000\020\011\uff5f\016\uff5f\067\uff5f\076\uff5f\077\uff5f\101" +
    "\uff5f\102\uff5f\001\002\000\004\070\216\001\002\000\004" +
    "\016\217\001\002\000\004\070\221\001\002\000\004\101" +
    "\226\001\002\000\054\005\ufea6\033\ufea6\043\ufea6\066\ufea6" +
    "\067\ufea6\070\ufea6\075\222\076\ufea6\077\ufea6\101\ufea6\102" +
    "\ufea6\110\ufea6\122\ufea6\124\ufea6\152\ufea6\153\ufea6\154\ufea6" +
    "\156\ufea6\157\ufea6\160\ufea6\161\ufea6\001\002\000\004\070" +
    "\223\001\002\000\054\005\ufea5\033\ufea5\043\ufea5\066\ufea5" +
    "\067\ufea5\070\ufea5\075\224\076\ufea5\077\ufea5\101\ufea5\102" +
    "\ufea5\110\ufea5\122\ufea5\124\ufea5\152\ufea5\153\ufea5\154\ufea5" +
    "\156\ufea5\157\ufea5\160\ufea5\161\ufea5\001\002\000\004\070" +
    "\225\001\002\000\054\005\ufea4\033\ufea4\043\ufea4\066\ufea4" +
    "\067\ufea4\070\ufea4\076\ufea4\077\ufea4\101\ufea4\102\ufea4\107" +
    "\ufea4\110\ufea4\122\ufea4\124\ufea4\152\ufea4\153\ufea4\154\ufea4" +
    "\156\ufea4\157\ufea4\160\ufea4\161\ufea4\001\002\000\004\070" +
    "\227\001\002\000\016\030\313\031\315\067\uff59\076\uff59" +
    "\077\uff59\102\uff59\001\002\000\004\102\231\001\002\000" +
    "\014\016\uff57\032\233\033\uff57\067\uff57\077\uff57\001\002" +
    "\000\012\016\uff55\033\240\067\uff55\077\uff55\001\002\000" +
    "\004\101\234\001\002\000\004\070\126\001\002\000\004" +
    "\102\236\001\002\000\012\016\uff58\033\uff58\067\uff58\077" +
    "\uff58\001\002\000\010\016\305\067\uff3e\077\uff3e\001\002" +
    "\000\020\070\244\071\077\072\076\073\067\074\100\101" +
    "\073\136\103\001\002\000\024\016\uff50\034\uff50\041\uff50" +
    "\067\uff50\076\uff50\077\uff50\102\uff50\160\uff50\161\uff50\001" +
    "\002\000\024\016\uff54\034\300\041\301\067\uff54\076\uff54" +
    "\077\uff54\102\uff54\160\uff54\161\uff54\001\002\000\024\016" +
    "\uff51\034\uff51\041\uff51\067\uff51\076\uff51\077\uff51\102\uff51" +
    "\160\uff51\161\uff51\001\002\000\024\035\260\036\ufef1\075" +
    "\261\100\ufef1\103\ufef1\104\ufef1\105\ufef1\106\ufef1\107\ufef1" +
    "\001\002\000\014\016\uff56\067\uff56\077\uff56\160\uff56\161" +
    "\uff56\001\002\000\010\036\252\100\253\107\251\001\002" +
    "\000\014\036\252\100\253\103\105\104\106\107\251\001" +
    "\002\000\020\070\070\071\077\072\076\073\067\074\100" +
    "\101\073\136\103\001\002\000\020\070\uff45\071\uff45\072" +
    "\uff45\073\uff45\074\uff45\101\uff45\136\uff45\001\002\000\022" +
    "\037\254\070\uff43\071\uff43\072\uff43\073\uff43\074\uff43\101" +
    "\uff43\136\uff43\001\002\000\020\070\uff44\071\uff44\072\uff44" +
    "\073\uff44\074\uff44\101\uff44\136\uff44\001\002\000\020\070" +
    "\uff42\071\uff42\072\uff42\073\uff42\074\uff42\101\uff42\136\uff42" +
    "\001\002\000\030\016\uff47\034\uff47\041\uff47\067\uff47\076" +
    "\uff47\077\uff47\102\uff47\103\105\104\106\160\uff47\161\uff47" +
    "\001\002\000\020\070\070\071\077\072\076\073\067\074" +
    "\100\101\073\136\103\001\002\000\030\016\uff46\034\uff46" +
    "\041\uff46\067\uff46\076\uff46\077\uff46\102\uff46\103\105\104" +
    "\106\160\uff46\161\uff46\001\002\000\004\101\265\001\002" +
    "\000\004\070\262\001\002\000\012\036\ufea3\075\263\100" +
    "\ufea3\107\ufea3\001\002\000\004\070\264\001\002\000\010" +
    "\036\ufea2\100\ufea2\107\ufea2\001\002\000\014\042\274\071" +
    "\272\072\273\073\271\074\267\001\002\000\004\102\277" +
    "\001\002\000\040\011\uff4b\017\uff4b\025\uff4b\037\uff4b\042" +
    "\uff4b\044\uff4b\046\uff4b\051\uff4b\057\uff4b\060\uff4b\066\uff4b" +
    "\067\uff4b\076\uff4b\077\uff4b\102\uff4b\001\002\000\006\076" +
    "\275\102\uff4e\001\002\000\040\011\uff49\017\uff49\025\uff49" +
    "\037\uff49\042\uff49\044\uff49\046\uff49\051\uff49\057\uff49\060" +
    "\uff49\066\uff49\067\uff49\076\uff49\077\uff49\102\uff49\001\002" +
    "\000\040\011\uff4a\017\uff4a\025\uff4a\037\uff4a\042\uff4a\044" +
    "\uff4a\046\uff4a\051\uff4a\057\uff4a\060\uff4a\066\uff4a\067\uff4a" +
    "\076\uff4a\077\uff4a\102\uff4a\001\002\000\040\011\uff4c\017" +
    "\uff4c\025\uff4c\037\uff4c\042\uff4c\044\uff4c\046\uff4c\051\uff4c" +
    "\057\uff4c\060\uff4c\066\uff4c\067\uff4c\076\uff4c\077\uff4c\102" +
    "\uff4c\001\002\000\040\011\uff48\017\uff48\025\uff48\037\uff48" +
    "\042\uff48\044\uff48\046\uff48\051\uff48\057\uff48\060\uff48\066" +
    "\uff48\067\uff48\076\uff48\077\uff48\102\uff48\001\002\000\014" +
    "\042\274\071\272\072\273\073\271\074\267\001\002\000" +
    "\004\102\uff4d\001\002\000\024\016\uff4f\034\uff4f\041\uff4f" +
    "\067\uff4f\076\uff4f\077\uff4f\102\uff4f\160\uff4f\161\uff4f\001" +
    "\002\000\020\070\244\071\077\072\076\073\067\074\100" +
    "\101\073\136\103\001\002\000\020\070\244\071\077\072" +
    "\076\073\067\074\100\101\073\136\103\001\002\000\020" +
    "\016\uff52\067\uff52\076\uff52\077\uff52\102\uff52\160\uff52\161" +
    "\uff52\001\002\000\020\016\uff53\067\uff53\076\uff53\077\uff53" +
    "\102\uff53\160\uff53\161\uff53\001\002\000\006\067\uff63\077" +
    "\uff63\001\002\000\006\017\307\070\306\001\002\000\016" +
    "\011\uff40\067\uff40\076\uff40\077\uff40\101\310\102\uff40\001" +
    "\002\000\014\011\uff3f\067\uff3f\076\uff3f\077\uff3f\102\uff3f" +
    "\001\002\000\004\070\311\001\002\000\004\102\312\001" +
    "\002\000\014\011\uff41\067\uff41\076\uff41\077\uff41\102\uff41" +
    "\001\002\000\012\067\uff5b\076\uff5b\077\uff5b\102\uff5b\001" +
    "\002\000\012\067\uff5d\076\316\077\uff5d\102\uff5d\001\002" +
    "\000\012\067\uff5a\076\uff5a\077\uff5a\102\uff5a\001\002\000" +
    "\004\070\227\001\002\000\010\067\uff5c\077\uff5c\102\uff5c" +
    "\001\002\000\004\070\221\001\002\000\006\043\ufee5\101" +
    "\323\001\002\000\004\043\326\001\002\000\004\070\126" +
    "\001\002\000\004\102\325\001\002\000\004\043\ufee6\001" +
    "\002\000\004\144\030\001\002\000\006\067\ufee9\077\ufee9" +
    "\001\002\000\006\043\332\101\uff3b\001\002\000\004\101" +
    "\334\001\002\000\004\070\333\001\002\000\004\101\uff3c" +
    "\001\002\000\022\011\340\017\uff15\025\uff15\044\346\057" +
    "\uff15\066\uff15\070\336\101\uff15\001\002\000\012\067\uff3a" +
    "\076\u015f\077\uff3a\102\uff3a\001\002\000\014\043\u011d\052" +
    "\u0120\053\u011e\054\u011f\055\u0121\001\002\000\004\102\u011a" +
    "\001\002\000\010\026\213\027\214\101\uff5e\001\002\000" +
    "\012\067\uff35\076\uff35\077\uff35\102\uff35\001\002\000\012" +
    "\067\uff37\076\uff37\077\uff37\102\uff37\001\002\000\012\067" +
    "\uff38\076\uff38\077\uff38\102\uff38\001\002\000\014\017\352" +
    "\025\355\057\351\066\353\101\uff0e\001\002\000\012\067" +
    "\uff36\076\uff36\077\uff36\102\uff36\001\002\000\004\070\347" +
    "\001\002\000\016\017\uff16\025\uff16\057\uff16\060\uff16\066" +
    "\uff16\101\uff16\001\002\000\010\026\213\027\214\101\uff5e" +
    "\001\002\000\004\056\u010f\001\002\000\004\056\u010e\001" +
    "\002\000\022\037\373\070\uff00\071\uff00\072\uff00\073\uff00" +
    "\074\uff00\101\uff00\136\uff00\001\002\000\012\067\ufeee\076" +
    "\ufeee\077\ufeee\102\ufeee\001\002\000\024\011\uff10\016\uff10" +
    "\026\uff10\027\uff10\067\uff10\076\uff10\077\uff10\101\uff10\102" +
    "\uff10\001\002\000\004\101\357\001\002\000\004\070\126" +
    "\001\002\000\004\102\361\001\002\000\004\060\362\001" +
    "\002\000\004\070\363\001\002\000\006\016\uff0a\101\365" +
    "\001\002\000\004\016\370\001\002\000\004\070\126\001" +
    "\002\000\004\102\367\001\002\000\020\011\uff0b\016\uff0b" +
    "\037\uff0b\067\uff0b\076\uff0b\077\uff0b\102\uff0b\001\002\000" +
    "\006\061\377\062\u0100\001\002\000\002\001\002\000\014" +
    "\037\373\067\uff00\076\uff00\077\uff00\102\uff00\001\002\000" +
    "\004\047\375\001\002\000\012\067\ufeec\076\ufeec\077\ufeec" +
    "\102\ufeec\001\002\000\004\050\376\001\002\000\032\011" +
    "\uff01\067\uff01\070\uff01\071\uff01\072\uff01\073\uff01\074\uff01" +
    "\076\uff01\077\uff01\101\uff01\102\uff01\136\uff01\001\002\000" +
    "\010\040\u0102\063\u0104\065\u0101\001\002\000\010\040\u0102" +
    "\063\u0104\065\u0101\001\002\000\020\011\uff04\016\uff04\037" +
    "\uff04\067\uff04\076\uff04\077\uff04\102\uff04\001\002\000\004" +
    "\064\u0107\001\002\000\016\011\uff07\037\uff07\067\uff07\076" +
    "\uff07\077\uff07\102\uff07\001\002\000\006\042\u0106\045\u0105" +
    "\001\002\000\020\011\uff02\016\uff02\037\uff02\067\uff02\076" +
    "\uff02\077\uff02\102\uff02\001\002\000\020\011\uff03\016\uff03" +
    "\037\uff03\067\uff03\076\uff03\077\uff03\102\uff03\001\002\000" +
    "\020\011\uff05\016\uff05\037\uff05\067\uff05\076\uff05\077\uff05" +
    "\102\uff05\001\002\000\020\011\uff09\016\u0109\037\uff09\067" +
    "\uff09\076\uff09\077\uff09\102\uff09\001\002\000\004\062\u010a" +
    "\001\002\000\010\040\u0102\063\u0104\065\u0101\001\002\000" +
    "\016\011\uff08\037\uff08\067\uff08\076\uff08\077\uff08\102\uff08" +
    "\001\002\000\020\070\244\071\077\072\076\073\067\074" +
    "\100\101\073\136\103\001\002\000\012\067\ufeeb\076\ufeeb" +
    "\077\ufeeb\102\ufeeb\001\002\000\024\011\uff11\016\uff11\026" +
    "\uff11\027\uff11\067\uff11\076\uff11\077\uff11\101\uff11\102\uff11" +
    "\001\002\000\006\060\uff0f\101\uff0f\001\002\000\004\101" +
    "\u0111\001\002\000\004\070\227\001\002\000\004\102\u0113" +
    "\001\002\000\014\016\305\067\uff3e\076\uff3e\077\uff3e\102" +
    "\uff3e\001\002\000\012\067\ufeed\076\ufeed\077\ufeed\102\ufeed" +
    "\001\002\000\004\101\u0116\001\002\000\004\070\227\001" +
    "\002\000\004\102\u0118\001\002\000\014\016\305\067\uff3e" +
    "\076\uff3e\077\uff3e\102\uff3e\001\002\000\012\067\ufeea\076" +
    "\ufeea\077\ufeea\102\ufeea\001\002\000\010\016\305\067\uff3e" +
    "\077\uff3e\001\002\000\006\067\uff3d\077\uff3d\001\002\000" +
    "\044\011\uff6b\017\uff6b\023\210\025\uff6b\037\uff6b\042\uff6b" +
    "\044\uff6b\045\uff6b\046\uff6b\051\uff6b\057\uff6b\060\uff6b\066" +
    "\uff6b\067\uff6b\076\uff6b\077\uff6b\102\uff6b\001\002\000\020" +
    "\070\070\071\077\072\076\073\067\074\100\101\073\136" +
    "\103\001\002\000\046\011\uff2f\017\uff2f\023\uff2f\025\uff2f" +
    "\037\uff2f\042\uff2f\044\uff2f\045\uff2f\046\uff2f\051\uff2f\057" +
    "\uff2f\060\uff2f\066\uff2f\067\uff2f\076\uff2f\077\uff2f\101\uff2f" +
    "\102\uff2f\001\002\000\046\011\uff31\017\uff31\023\uff31\025" +
    "\uff31\037\uff31\042\uff31\044\uff31\045\uff31\046\uff31\051\uff31" +
    "\057\uff31\060\uff31\066\uff31\067\uff31\076\uff31\077\uff31\101" +
    "\uff31\102\uff31\001\002\000\046\011\uff32\017\uff32\023\uff32" +
    "\025\uff32\037\uff32\042\uff32\044\uff32\045\uff32\046\uff32\051" +
    "\uff32\057\uff32\060\uff32\066\uff32\067\uff32\076\uff32\077\uff32" +
    "\101\uff32\102\uff32\001\002\000\046\011\uff30\017\uff30\023" +
    "\uff30\025\uff30\037\uff30\042\uff30\044\uff30\045\uff30\046\uff30" +
    "\051\uff30\057\uff30\060\uff30\066\uff30\067\uff30\076\uff30\077" +
    "\uff30\101\uff30\102\uff30\001\002\000\046\011\uff2d\017\uff2d" +
    "\023\uff2d\025\uff2d\037\uff2d\042\uff2d\044\uff2d\045\uff2d\046" +
    "\uff2d\051\uff2d\057\uff2d\060\uff2d\066\uff2d\067\uff2d\076\uff2d" +
    "\077\uff2d\101\u0123\102\uff2d\001\002\000\006\070\u0125\072" +
    "\u0127\001\002\000\044\011\uff33\017\uff33\023\uff33\025\uff33" +
    "\037\uff33\042\uff33\044\uff33\045\uff33\046\uff33\051\uff33\057" +
    "\uff33\060\uff33\066\uff33\067\uff33\076\uff33\077\uff33\102\uff33" +
    "\001\002\000\004\102\uff2a\001\002\000\004\102\u012a\001" +
    "\002\000\006\076\u0128\102\uff2c\001\002\000\004\072\u0129" +
    "\001\002\000\004\102\uff2b\001\002\000\044\011\uff2e\017" +
    "\uff2e\023\uff2e\025\uff2e\037\uff2e\042\uff2e\044\uff2e\045\uff2e" +
    "\046\uff2e\051\uff2e\057\uff2e\060\uff2e\066\uff2e\067\uff2e\076" +
    "\uff2e\077\uff2e\102\uff2e\001\002\000\030\017\352\025\355" +
    "\057\351\060\uff0e\066\u012e\067\ufefc\076\ufefc\077\ufefc\102" +
    "\ufefc\103\105\104\106\001\002\000\022\011\uff5e\016\uff5e" +
    "\026\213\027\214\067\uff5e\076\uff5e\077\uff5e\102\uff5e\001" +
    "\002\000\004\060\u0134\001\002\000\006\037\373\101\uff00" +
    "\001\002\000\012\067\ufefd\076\ufefd\077\ufefd\102\ufefd\001" +
    "\002\000\004\101\u0131\001\002\000\020\070\244\071\077" +
    "\072\076\073\067\074\100\101\073\136\103\001\002\000" +
    "\004\102\u0133\001\002\000\014\011\uff12\067\uff12\076\uff12" +
    "\077\uff12\102\uff12\001\002\000\004\070\u0135\001\002\000" +
    "\024\011\uff0c\016\uff0c\037\uff0c\067\uff0c\075\u013a\076\uff0c" +
    "\077\uff0c\101\uff0c\102\uff0c\001\002\000\022\011\uff0a\016" +
    "\uff0a\037\uff0a\067\uff0a\076\uff0a\077\uff0a\101\365\102\uff0a" +
    "\001\002\000\020\011\uff06\016\370\037\uff06\067\uff06\076" +
    "\uff06\077\uff06\102\uff06\001\002\000\016\011\uff00\037\373" +
    "\067\uff00\076\uff00\077\uff00\102\uff00\001\002\000\014\011" +
    "\uff13\067\uff13\076\uff13\077\uff13\102\uff13\001\002\000\004" +
    "\070\u013b\001\002\000\022\011\uff0d\016\uff0d\037\uff0d\067" +
    "\uff0d\076\uff0d\077\uff0d\101\uff0d\102\uff0d\001\002\000\016" +
    "\011\uff3e\016\305\067\uff3e\076\uff3e\077\uff3e\102\uff3e\001" +
    "\002\000\014\011\uff14\067\uff14\076\uff14\077\uff14\102\uff14" +
    "\001\002\000\042\011\uff28\017\uff28\025\uff28\037\uff28\042" +
    "\uff28\044\uff28\045\u0140\046\uff28\051\uff28\057\uff28\060\uff28" +
    "\066\uff28\067\uff28\076\uff28\077\uff28\102\uff28\001\002\000" +
    "\040\011\uff29\017\uff29\025\uff29\037\uff29\042\uff29\044\uff29" +
    "\046\uff29\051\uff29\057\uff29\060\uff29\066\uff29\067\uff29\076" +
    "\uff29\077\uff29\102\uff29\001\002\000\014\042\274\071\272" +
    "\072\273\073\271\074\267\001\002\000\040\011\uff25\017" +
    "\uff25\025\uff25\037\uff25\042\uff25\044\uff25\046\u0143\051\uff25" +
    "\057\uff25\060\uff25\066\uff25\067\uff25\076\uff25\077\uff25\102" +
    "\uff25\001\002\000\036\011\uff1b\017\uff1b\025\uff1b\037\u014c" +
    "\042\u014e\044\uff1b\051\uff1b\057\uff1b\060\uff1b\066\uff1b\067" +
    "\uff1b\076\uff1b\077\uff1b\102\uff1b\001\002\000\040\011\uff23" +
    "\017\uff23\025\uff23\037\uff23\042\uff23\044\uff23\051\uff23\057" +
    "\uff23\060\uff23\066\uff23\067\uff23\076\uff23\077\uff23\101\u0144" +
    "\102\uff23\001\002\000\006\071\u0146\072\u0147\001\002\000" +
    "\036\011\uff26\017\uff26\025\uff26\037\uff26\042\uff26\044\uff26" +
    "\051\uff26\057\uff26\060\uff26\066\uff26\067\uff26\076\uff26\077" +
    "\uff26\102\uff26\001\002\000\006\076\uff21\102\uff21\001\002" +
    "\000\006\076\uff22\102\uff22\001\002\000\004\076\u0149\001" +
    "\002\000\006\071\u0146\072\u0147\001\002\000\004\102\u014b" +
    "\001\002\000\036\011\uff24\017\uff24\025\uff24\037\uff24\042" +
    "\uff24\044\uff24\051\uff24\057\uff24\060\uff24\066\uff24\067\uff24" +
    "\076\uff24\077\uff24\102\uff24\001\002\000\006\042\u0159\047" +
    "\u0158\001\002\000\032\011\uff19\017\uff19\025\uff19\044\uff19" +
    "\051\u0150\057\uff19\060\uff19\066\uff19\067\uff19\076\uff19\077" +
    "\uff19\102\uff19\001\002\000\032\011\uff20\017\uff20\025\uff20" +
    "\044\uff20\051\uff20\057\uff20\060\uff20\066\uff20\067\uff20\076" +
    "\uff20\077\uff20\102\uff20\001\002\000\030\011\uff17\017\uff15" +
    "\025\uff15\044\346\057\uff15\060\uff15\066\uff15\067\uff17\076" +
    "\uff17\077\uff17\102\uff17\001\002\000\030\011\uff1a\017\uff1a" +
    "\025\uff1a\044\uff1a\057\uff1a\060\uff1a\066\uff1a\067\uff1a\076" +
    "\uff1a\077\uff1a\102\uff1a\001\002\000\014\017\352\025\355" +
    "\057\351\060\uff0e\066\u012e\001\002\000\014\011\u0154\067" +
    "\ufefe\076\ufefe\077\ufefe\102\ufefe\001\002\000\012\067\uff34" +
    "\076\uff34\077\uff34\102\uff34\001\002\000\020\016\uff5e\026" +
    "\213\027\214\067\uff5e\076\uff5e\077\uff5e\102\uff5e\001\002" +
    "\000\014\016\305\067\uff3e\076\uff3e\077\uff3e\102\uff3e\001" +
    "\002\000\012\067\ufeff\076\ufeff\077\ufeff\102\ufeff\001\002" +
    "\000\014\011\uff18\067\uff18\076\uff18\077\uff18\102\uff18\001" +
    "\002\000\004\050\u015a\001\002\000\032\011\uff1f\017\uff1f" +
    "\025\uff1f\044\uff1f\051\uff1f\057\uff1f\060\uff1f\066\uff1f\067" +
    "\uff1f\076\uff1f\077\uff1f\102\uff1f\001\002\000\036\011\uff1c" +
    "\017\uff1c\025\uff1c\037\u015b\042\u015c\044\uff1c\051\uff1c\057" +
    "\uff1c\060\uff1c\066\uff1c\067\uff1c\076\uff1c\077\uff1c\102\uff1c" +
    "\001\002\000\004\042\u015d\001\002\000\032\011\uff1e\017" +
    "\uff1e\025\uff1e\044\uff1e\051\uff1e\057\uff1e\060\uff1e\066\uff1e" +
    "\067\uff1e\076\uff1e\077\uff1e\102\uff1e\001\002\000\032\011" +
    "\uff1d\017\uff1d\025\uff1d\044\uff1d\051\uff1d\057\uff1d\060\uff1d" +
    "\066\uff1d\067\uff1d\076\uff1d\077\uff1d\102\uff1d\001\002\000" +
    "\040\011\uff27\017\uff27\025\uff27\037\uff27\042\uff27\044\uff27" +
    "\046\uff27\051\uff27\057\uff27\060\uff27\066\uff27\067\uff27\076" +
    "\uff27\077\uff27\102\uff27\001\002\000\022\011\340\017\uff15" +
    "\025\uff15\044\346\057\uff15\066\uff15\070\336\101\uff15\001" +
    "\002\000\010\067\uff39\077\uff39\102\uff39\001\002\000\020" +
    "\070\070\071\077\072\076\073\067\074\100\101\073\136" +
    "\103\001\002\000\010\102\u0163\103\105\104\106\001\002" +
    "\000\032\070\uffb1\105\uffb1\130\u0165\131\uffb1\132\uffb1\136" +
    "\uffb1\137\uffb1\145\uffb1\146\uffb1\147\uffb1\150\uffb1\151\uffb1" +
    "\001\002\000\030\070\uffb4\105\uffb4\131\uffb4\132\uffb4\136" +
    "\uffb4\137\uffb4\145\uffb4\146\uffb4\147\uffb4\150\uffb4\151\uffb4" +
    "\001\002\000\030\070\uffb2\105\uffb2\131\uffb2\132\uffb2\136" +
    "\uffb2\137\uffb2\145\uffb2\146\uffb2\147\uffb2\150\uffb2\151\uffb2" +
    "\001\002\000\012\067\ufff5\070\ufff5\077\ufff5\136\ufff5\001" +
    "\002\000\012\067\ufff4\070\ufff4\077\ufff4\136\ufff4\001\002" +
    "\000\012\067\ufff3\070\u0169\077\ufff3\136\u016a\001\002\000" +
    "\006\067\ufff0\077\ufff0\001\002\000\006\067\ufff1\077\ufff1" +
    "\001\002\000\014\033\uff9c\063\uff9c\067\uff9c\077\uff9c\137" +
    "\uff9c\001\002\000\006\070\054\136\u016d\001\002\000\014" +
    "\033\uff9b\063\uff9b\067\uff9b\077\uff9b\137\uff9b\001\002\000" +
    "\014\033\uff8c\063\u0171\067\uff8c\077\uff8c\137\u0172\001\002" +
    "\000\010\033\uff8d\067\uff8d\077\uff8d\001\002\000\010\033" +
    "\240\067\uff55\077\uff55\001\002\000\006\070\u01b9\136\u01bc" +
    "\001\002\000\004\070\221\001\002\000\034\033\uffc8\043" +
    "\u0178\067\uffc8\070\u0177\077\uffc8\101\u0179\152\u017a\153\u017d" +
    "\154\u017b\156\u017c\157\u017f\160\uffc8\161\uffc8\001\002\000" +
    "\014\033\uffca\067\uffca\077\uffca\160\uffca\161\uffca\001\002" +
    "\000\032\033\uffc7\067\uffc7\077\uffc7\101\u0179\102\uffc7\152" +
    "\u017a\153\u017d\154\u017b\156\u017c\157\u017f\160\uffc7\161\uffc7" +
    "\001\002\000\030\033\uffcb\067\uffcb\077\uffcb\101\u0179\152" +
    "\u017a\153\u017d\154\u017b\156\u017c\157\u017f\160\uffcb\161\uffcb" +
    "\001\002\000\036\016\uffd7\033\uffd7\067\uffd7\076\uffd7\077" +
    "\uffd7\101\uffd7\137\uffd7\152\uffd7\153\uffd7\154\uffd7\156\uffd7" +
    "\157\uffd7\160\uffd7\161\uffd7\001\002\000\006\070\u01af\142" +
    "\u01b0\001\002\000\014\152\u017a\153\u017d\154\u017b\156\u017c" +
    "\157\u017f\001\002\000\020\070\uffc1\105\uffc1\145\uffc1\146" +
    "\uffc1\147\uffc1\150\uffc1\151\uffc1\001\002\000\006\152\u01a8" +
    "\155\u01a9\001\002\000\006\152\u01a5\155\u01a6\001\002\000" +
    "\004\152\u01a4\001\002\000\020\070\u0183\105\u0188\145\u0186" +
    "\146\u0185\147\u018b\150\u0184\151\u0187\001\002\000\006\152" +
    "\u0180\155\u0181\001\002\000\020\070\uffbf\105\uffbf\145\uffbf" +
    "\146\uffbf\147\uffbf\150\uffbf\151\uffbf\001\002\000\004\152" +
    "\u0182\001\002\000\020\070\uffc0\105\uffc0\145\uffc0\146\uffc0" +
    "\147\uffc0\150\uffc0\151\uffc0\001\002\000\042\033\uffd9\043" +
    "\uffd9\067\uffd9\070\uffd9\075\u01a2\077\uffd9\101\uffd9\102\uffd9" +
    "\141\u019c\152\uffd9\153\uffd9\154\uffd9\156\uffd9\157\uffd9\160" +
    "\uffd9\161\uffd9\001\002\000\004\101\uffcf\001\002\000\004" +
    "\101\uffd1\001\002\000\004\101\uffd2\001\002\000\004\101" +
    "\uffce\001\002\000\040\033\uffde\043\uffde\067\uffde\070\uffde" +
    "\077\uffde\100\uffde\101\uffde\102\uffde\152\uffde\153\uffde\154" +
    "\uffde\156\uffde\157\uffde\160\uffde\161\uffde\001\002\000\006" +
    "\043\u0178\070\u0177\001\002\000\004\016\u0194\001\002\000" +
    "\004\101\uffd0\001\002\000\004\101\u018e\001\002\000\040" +
    "\033\uffda\043\uffda\067\uffda\070\uffda\077\uffda\100\uffda\101" +
    "\uffda\102\uffda\152\uffda\153\uffda\154\uffda\156\uffda\157\uffda" +
    "\160\uffda\161\uffda\001\002\000\020\070\070\071\077\072" +
    "\076\073\067\074\100\101\073\136\103\001\002\000\004" +
    "\102\u0193\001\002\000\012\076\u0191\102\uffcd\103\105\104" +
    "\106\001\002\000\020\070\070\071\077\072\076\073\067" +
    "\074\100\101\073\136\103\001\002\000\004\102\uffcc\001" +
    "\002\000\040\033\uffd3\043\uffd3\067\uffd3\070\uffd3\077\uffd3" +
    "\100\uffd3\101\uffd3\102\uffd3\152\uffd3\153\uffd3\154\uffd3\156" +
    "\uffd3\157\uffd3\160\uffd3\161\uffd3\001\002\000\020\070\u0195" +
    "\105\u0188\145\u0186\146\u0185\147\u018b\150\u0184\151\u0187\001" +
    "\002\000\012\075\u019d\100\uffd9\107\ufea6\141\u019c\001\002" +
    "\000\004\100\u019a\001\002\000\004\107\u0198\001\002\000" +
    "\004\070\221\001\002\000\032\033\uffc2\067\uffc2\077\uffc2" +
    "\101\uffc2\102\uffc2\152\uffc2\153\uffc2\154\uffc2\156\uffc2\157" +
    "\uffc2\160\uffc2\161\uffc2\001\002\000\020\070\u0183\105\u0188" +
    "\145\u0186\146\u0185\147\u018b\150\u0184\151\u0187\001\002\000" +
    "\032\033\uffc3\067\uffc3\077\uffc3\101\uffc3\102\uffc3\152\uffc3" +
    "\153\uffc3\154\uffc3\156\uffc3\157\uffc3\160\uffc3\161\uffc3\001" +
    "\002\000\004\070\u01a0\001\002\000\006\070\u019e\105\u019f" +
    "\001\002\000\010\075\224\100\uffdc\107\ufea5\001\002\000" +
    "\040\033\uffdd\043\uffdd\067\uffdd\070\uffdd\077\uffdd\100\uffdd" +
    "\101\uffdd\102\uffdd\152\uffdd\153\uffdd\154\uffdd\156\uffdd\157" +
    "\uffdd\160\uffdd\161\uffdd\001\002\000\040\033\uffdb\043\uffdb" +
    "\067\uffdb\070\uffdb\077\uffdb\100\uffdb\101\uffdb\102\uffdb\152" +
    "\uffdb\153\uffdb\154\uffdb\156\uffdb\157\uffdb\160\uffdb\161\uffdb" +
    "\001\002\000\010\016\uffdf\076\uffdf\137\uffdf\001\002\000" +
    "\006\070\u01a3\105\u019f\001\002\000\036\033\uffdc\043\uffdc" +
    "\067\uffdc\070\uffdc\077\uffdc\101\uffdc\102\uffdc\152\uffdc\153" +
    "\uffdc\154\uffdc\156\uffdc\157\uffdc\160\uffdc\161\uffdc\001\002" +
    "\000\020\070\uffba\105\uffba\145\uffba\146\uffba\147\uffba\150" +
    "\uffba\151\uffba\001\002\000\020\070\uffbc\105\uffbc\145\uffbc" +
    "\146\uffbc\147\uffbc\150\uffbc\151\uffbc\001\002\000\004\152" +
    "\u01a7\001\002\000\020\070\uffbb\105\uffbb\145\uffbb\146\uffbb" +
    "\147\uffbb\150\uffbb\151\uffbb\001\002\000\020\070\uffbe\105" +
    "\uffbe\145\uffbe\146\uffbe\147\uffbe\150\uffbe\151\uffbe\001\002" +
    "\000\004\152\u01aa\001\002\000\020\070\uffbd\105\uffbd\145" +
    "\uffbd\146\uffbd\147\uffbd\150\uffbd\151\uffbd\001\002\000\020" +
    "\101\u0179\102\u01ad\152\u017a\153\u017d\154\u017b\156\u017c\157" +
    "\u017f\001\002\000\004\102\u01ae\001\002\000\016\033\uffc5" +
    "\067\uffc5\077\uffc5\102\uffc5\160\uffc5\161\uffc5\001\002\000" +
    "\016\033\uffc4\067\uffc4\077\uffc4\102\uffc4\160\uffc4\161\uffc4" +
    "\001\002\000\036\016\uffd8\033\uffd8\067\uffd8\076\uffd8\077" +
    "\uffd8\101\uffd8\137\uffd8\152\uffd8\153\uffd8\154\uffd8\156\uffd8" +
    "\157\uffd8\160\uffd8\161\uffd8\001\002\000\004\070\u01b1\001" +
    "\002\000\006\070\u01b1\143\uffd5\001\002\000\004\143\u01b3" +
    "\001\002\000\036\016\uffd6\033\uffd6\067\uffd6\076\uffd6\077" +
    "\uffd6\101\uffd6\137\uffd6\152\uffd6\153\uffd6\154\uffd6\156\uffd6" +
    "\157\uffd6\160\uffd6\161\uffd6\001\002\000\004\143\uffd4\001" +
    "\002\000\014\033\uffc9\067\uffc9\077\uffc9\160\uffc9\161\uffc9" +
    "\001\002\000\016\033\uffc6\067\uffc6\077\uffc6\102\uffc6\160" +
    "\uffc6\161\uffc6\001\002\000\014\033\uff97\067\uff97\076\uff97" +
    "\077\uff97\137\uff97\001\002\000\012\033\uff8c\067\uff8c\077" +
    "\uff8c\137\u0172\001\002\000\006\100\u01c3\134\u01c2\001\002" +
    "\000\014\033\uff98\067\uff98\076\uff98\077\uff98\137\uff98\001" +
    "\002\000\014\033\uff9a\067\uff9a\076\u01c9\077\uff9a\137\uff9a" +
    "\001\002\000\006\100\u01be\134\u01bd\001\002\000\020\070" +
    "\070\071\077\072\076\073\067\074\100\101\073\136\103" +
    "\001\002\000\020\070\u01bf\071\077\072\076\073\067\074" +
    "\100\101\073\136\103\001\002\000\030\033\ufef1\067\ufef1" +
    "\076\ufef1\077\ufef1\100\u01c3\103\ufef1\104\ufef1\105\ufef1\106" +
    "\ufef1\134\u01c2\137\ufef1\001\002\000\014\033\uff90\067\uff90" +
    "\076\uff90\077\uff90\137\uff90\001\002\000\020\033\uff92\067" +
    "\uff92\076\uff92\077\uff92\103\105\104\106\137\uff92\001\002" +
    "\000\020\070\070\071\077\072\076\073\067\074\100\101" +
    "\073\136\103\001\002\000\024\042\u01c5\045\u01c4\070\070" +
    "\071\077\072\076\073\067\074\100\101\073\136\103\001" +
    "\002\000\014\033\uff95\067\uff95\076\uff95\077\uff95\137\uff95" +
    "\001\002\000\014\033\uff94\067\uff94\076\uff94\077\uff94\137" +
    "\uff94\001\002\000\020\033\uff96\067\uff96\076\uff96\077\uff96" +
    "\103\105\104\106\137\uff96\001\002\000\020\033\uff93\067" +
    "\uff93\076\uff93\077\uff93\103\105\104\106\137\uff93\001\002" +
    "\000\020\033\uff91\067\uff91\076\uff91\077\uff91\103\105\104" +
    "\106\137\uff91\001\002\000\006\070\u01b9\136\u01bc\001\002" +
    "\000\012\033\uff99\067\uff99\077\uff99\137\uff99\001\002\000" +
    "\010\033\240\067\uff55\077\uff55\001\002\000\006\067\uff9d" +
    "\077\uff9d\001\002\000\006\067\uff8e\077\uff8e\001\002\000" +
    "\006\067\uff8f\077\uff8f\001\002\000\006\013\u01db\070\ufea7" +
    "\001\002\000\006\067\uff83\077\uff83\001\002\000\006\067" +
    "\uff84\077\uff84\001\002\000\006\067\uff85\077\uff85\001\002" +
    "\000\006\013\u01db\070\ufea7\001\002\000\006\013\u01db\070" +
    "\ufea7\001\002\000\006\067\uff81\077\uff81\001\002\000\006" +
    "\067\uff82\077\uff82\001\002\000\006\013\u01db\070\ufea7\001" +
    "\002\000\006\013\u01db\070\ufea7\001\002\000\006\067\uff86" +
    "\077\uff86\001\002\000\004\070\u01dd\001\002\000\004\014" +
    "\u01dc\001\002\000\004\070\ufea8\001\002\000\006\067\uff7d" +
    "\077\uff7d\001\002\000\004\070\221\001\002\000\010\067" +
    "\ufeaa\076\u01e1\077\ufeaa\001\002\000\006\067\uff7f\077\uff7f" +
    "\001\002\000\004\070\221\001\002\000\006\067\ufea9\077" +
    "\ufea9\001\002\000\004\070\126\001\002\000\006\067\uff80" +
    "\077\uff80\001\002\000\004\070\u01e6\001\002\000\006\016" +
    "\u01e9\075\u01ea\001\002\000\006\067\uff7c\077\uff7c\001\002" +
    "\000\006\067\uff7b\077\uff7b\001\002\000\004\070\221\001" +
    "\002\000\004\070\u01eb\001\002\000\012\067\uff78\075\u01ed" +
    "\076\u01ec\077\uff78\001\002\000\004\070\u01f0\001\002\000" +
    "\004\070\u01ee\001\002\000\010\067\uff77\076\u01ef\077\uff77" +
    "\001\002\000\004\070\u01f0\001\002\000\004\075\u01ea\001" +
    "\002\000\006\067\uff75\077\uff75\001\002\000\006\067\uff76" +
    "\077\uff76\001\002\000\010\067\uff7a\076\u01f4\077\uff7a\001" +
    "\002\000\004\070\u01f5\001\002\000\004\016\u01e9\001\002" +
    "\000\006\067\uff79\077\uff79\001\002\000\004\070\221\001" +
    "\002\000\006\067\uff7e\077\uff7e\001\002\000\022\070\uffb3" +
    "\105\uffb3\127\042\145\uffb3\146\uffb3\147\uffb3\150\uffb3\151" +
    "\uffb3\001\002\000\022\070\uffe3\105\uffe3\127\uffe3\145\uffe3" +
    "\146\uffe3\147\uffe3\150\uffe3\151\uffe3\001\002\000\022\070" +
    "\uffe2\105\uffe2\127\uffe2\145\uffe2\146\uffe2\147\uffe2\150\uffe2" +
    "\151\uffe2\001\002\000\020\070\u0183\105\u0188\145\u0186\146" +
    "\u0185\147\u018b\150\u0184\151\u0187\001\002\000\004\137\u0172" +
    "\001\002\000\006\076\u01ff\137\uffe1\001\002\000\020\070" +
    "\u0183\105\u0188\145\u0186\146\u0185\147\u018b\150\u0184\151\u0187" +
    "\001\002\000\004\137\uffe0\001\002\000\014\033\240\067" +
    "\uff55\077\uff55\160\uff55\161\uff55\001\002\000\012\067\uffb8" +
    "\077\uffb8\160\u0203\161\uffb8\001\002\000\004\162\u0209\001" +
    "\002\000\010\067\uffb6\077\uffb6\161\u0205\001\002\000\004" +
    "\162\u0207\001\002\000\006\067\uffe4\077\uffe4\001\002\000" +
    "\004\070\227\001\002\000\006\067\uffb7\077\uffb7\001\002" +
    "\000\004\070\126\001\002\000\010\067\uffb9\077\uffb9\161" +
    "\uffb9\001\002\000\020\070\u0183\105\u0188\145\u0186\146\u0185" +
    "\147\u018b\150\u0184\151\u0187\001\002\000\004\137\u0172\001" +
    "\002\000\014\033\240\067\uff55\077\uff55\160\uff55\161\uff55" +
    "\001\002\000\012\067\uffb8\077\uffb8\160\u0203\161\uffb8\001" +
    "\002\000\010\067\uffb6\077\uffb6\161\u0205\001\002\000\006" +
    "\067\uffe5\077\uffe5\001\002\000\012\067\uffef\070\u0212\077" +
    "\uffef\136\u0213\001\002\000\006\067\uffed\077\uffed\001\002" +
    "\000\006\067\uffee\077\uffee\001\002\000\006\067\ufee3\077" +
    "\ufee3\001\002\000\004\070\221\001\002\000\006\067\ufee2" +
    "\077\ufee2\001\002\000\006\067\ufee1\077\ufee1\001\002\000" +
    "\006\070\u0270\125\u026f\001\002\000\006\024\u0247\070\u0245" +
    "\001\002\000\006\067\ufee4\077\ufee4\001\002\000\004\070" +
    "\221\001\002\000\004\070\u021f\001\002\000\006\067\ufedf" +
    "\077\ufedf\001\002\000\006\067\ufee0\077\ufee0\001\002\000" +
    "\006\067\ufec8\077\ufec8\001\002\000\014\005\u0225\066\u0228" +
    "\110\u0221\122\u022a\124\u0223\001\002\000\004\123\u0236\001" +
    "\002\000\004\044\u0232\001\002\000\004\044\ufeb2\001\002" +
    "\000\006\067\ufec7\077\ufec7\001\002\000\012\013\ufeb5\044" +
    "\u022e\070\ufeb5\123\u022d\001\002\000\006\067\ufec5\077\ufec5" +
    "\001\002\000\006\067\ufec3\077\ufec3\001\002\000\004\044" +
    "\ufeb3\001\002\000\006\067\ufec4\077\ufec4\001\002\000\022" +
    "\011\340\017\uff15\025\uff15\044\346\057\uff15\066\uff15\070" +
    "\336\101\uff15\001\002\000\006\067\ufec6\077\ufec6\001\002" +
    "\000\006\067\ufeb9\077\ufeb9\001\002\000\006\013\ufeb6\070" +
    "\ufeb6\001\002\000\006\013\ufeb7\070\ufeb7\001\002\000\006" +
    "\013\u01db\070\ufea7\001\002\000\004\070\126\001\002\000" +
    "\006\067\ufeb8\077\ufeb8\001\002\000\006\070\126\125\u0234" +
    "\001\002\000\006\067\ufeb0\077\ufeb0\001\002\000\006\067" +
    "\ufeb1\077\ufeb1\001\002\000\006\067\ufeb4\077\ufeb4\001\002" +
    "\000\016\005\u0237\052\u0120\053\u011e\054\u011f\055\u0121\122" +
    "\u023a\001\002\000\006\037\ufebc\051\ufebc\001\002\000\014" +
    "\023\210\037\uff6b\042\uff6b\067\uff6b\077\uff6b\001\002\000" +
    "\006\037\u023b\051\u023c\001\002\000\006\037\ufebd\051\ufebd" +
    "\001\002\000\004\047\u023e\001\002\000\006\067\ufebb\077" +
    "\ufebb\001\002\000\006\067\ufec1\077\ufec1\001\002\000\004" +
    "\050\u023f\001\002\000\006\067\ufeba\077\ufeba\001\002\000" +
    "\012\037\u0242\042\u0243\067\ufebe\077\ufebe\001\002\000\006" +
    "\067\ufec2\077\ufec2\001\002\000\004\042\u0244\001\002\000" +
    "\006\067\ufec0\077\ufec0\001\002\000\006\067\ufebf\077\ufebf" +
    "\001\002\000\014\023\ufeca\063\ufeca\067\ufeca\077\ufeca\122" +
    "\ufeca\001\002\000\014\023\210\063\u024a\067\uff6b\077\uff6b" +
    "\122\u0249\001\002\000\014\023\ufec9\063\ufec9\067\ufec9\077" +
    "\ufec9\122\ufec9\001\002\000\006\067\ufedd\077\ufedd\001\002" +
    "\000\004\021\u025e\001\002\000\006\111\u024e\113\u024d\001" +
    "\002\000\006\067\ufede\077\ufede\001\002\000\006\067\ufedb" +
    "\077\ufedb\001\002\000\006\115\u025d\121\u025c\001\002\000" +
    "\006\045\u0252\112\u0253\001\002\000\010\067\ufed4\076\u0250" +
    "\077\ufed4\001\002\000\004\063\u024a\001\002\000\006\067" +
    "\ufed3\077\ufed3\001\002\000\006\116\u0259\117\u025b\001\002" +
    "\000\004\016\u0254\001\002\000\004\114\u0255\001\002\000" +
    "\006\016\u0257\120\u0258\001\002\000\010\067\ufed2\076\ufed2" +
    "\077\ufed2\001\002\000\010\067\ufecc\076\ufecc\077\ufecc\001" +
    "\002\000\010\067\ufecb\076\ufecb\077\ufecb\001\002\000\010" +
    "\067\ufecd\076\ufecd\077\ufecd\001\002\000\010\067\ufed1\076" +
    "\ufed1\077\ufed1\001\002\000\010\067\ufece\076\ufece\077\ufece" +
    "\001\002\000\010\067\ufed0\076\ufed0\077\ufed0\001\002\000" +
    "\010\067\ufecf\076\ufecf\077\ufecf\001\002\000\004\101\u025f" +
    "\001\002\000\004\020\u0264\001\002\000\010\067\ufeda\076" +
    "\u0262\077\ufeda\001\002\000\006\067\ufedc\077\ufedc\001\002" +
    "\000\004\101\u025f\001\002\000\006\067\ufed9\077\ufed9\001" +
    "\002\000\004\100\u0265\001\002\000\006\070\167\074\170" +
    "\001\002\000\006\076\u0268\102\ufed5\001\002\000\004\102" +
    "\u026e\001\002\000\006\021\u026a\022\203\001\002\000\004" +
    "\102\ufed6\001\002\000\004\100\u026b\001\002\000\004\074" +
    "\u026c\001\002\000\004\076\176\001\002\000\004\102\ufed7" +
    "\001\002\000\010\067\ufed8\076\ufed8\077\ufed8\001\002\000" +
    "\004\016\u0273\001\002\000\004\016\u0271\001\002\000\004" +
    "\070\221\001\002\000\006\067\ufead\077\ufead\001\002\000" +
    "\004\070\221\001\002\000\006\067\ufeae\077\ufeae\001\002" +
    "\000\006\043\ufee5\101\323\001\002\000\004\043\u0277\001" +
    "\002\000\004\144\030\001\002\000\006\067\ufeaf\077\ufeaf" +
    "\001\002\000\004\002\000\001\002\000\004\002\ufe9e\001" +
    "\002\000\004\002\ufe9f\001\002\000\004\136\u027d\001\002" +
    "\000\010\067\ufff7\070\u027e\077\ufff7\001\002\000\006\067" +
    "\ufff6\077\ufff6\001\002\000\004\070\221\001\002\000\006" +
    "\067\uff87\077\uff87\001\002\000\012\067\uffec\070\u0282\077" +
    "\uffec\136\u0283\001\002\000\006\067\uffea\077\uffea\001\002" +
    "\000\006\067\uffeb\077\uffeb\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0281\000\062\002\044\003\014\004\012\005\006\006" +
    "\032\007\020\010\005\011\040\015\026\016\037\017\035" +
    "\020\010\021\025\022\031\034\013\035\034\036\045\037" +
    "\011\040\024\164\033\224\023\225\022\226\021\227\017" +
    "\001\001\000\004\230\u0280\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\230\u027b\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\077\u0278\001\001\000\016\131\u0219" +
    "\132\u0213\133\u0215\134\u0216\135\u021d\136\u021c\001\001\000" +
    "\004\230\u0210\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\164\u01fb\203\u01f8\001\001\000\016\026\u01d1\027\u01d0\030" +
    "\u01cf\031\u01d5\032\u01d4\033\u01d8\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\170\u016a\176\u016d\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\230\u0167\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\050\146\112\145\001\001\000\004\164\047\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\166\051\001\001\000\002\001\001\000\006\167\054" +
    "\170\055\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\171\057\001\001\000\002\001\001\000\004\025\124" +
    "\001\001\000\004\175\062\001\001\000\004\172\064\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\125\103\126\071\127\101\173" +
    "\070\174\073\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\125\117\126" +
    "\071\127\101\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\126\113\127\101\001\001\000\006\126" +
    "\106\127\101\001\001\000\002\001\001\000\004\127\112" +
    "\001\001\000\004\127\111\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\125\103\126\071\127\101\173\116\174\073\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\172\123\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\025\127\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\023\327\001\001\000\002\001\001\000\004\051" +
    "\211\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\041\156\001\001\000\004\042\206\001\001" +
    "\000\004\043\160\001\001\000\004\044\163\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\150\170\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\013\176\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\044\201\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\023\217\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\054\227\001" +
    "\001\000\004\055\313\001\001\000\002\001\001\000\004" +
    "\053\231\001\001\000\004\047\236\001\001\000\002\001" +
    "\001\000\004\025\234\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\052\303\001\001\000\022\056\244\057" +
    "\241\062\242\063\240\125\246\126\071\127\101\220\245" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\066\255" +
    "\001\001\000\004\066\247\001\001\000\010\125\254\126" +
    "\071\127\101\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\125\256\126\071\127\101\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\064\267\065\265" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\064\267\065\275\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\056\302\057\241" +
    "\062\242\063\240\125\246\126\071\127\101\220\245\001" +
    "\001\000\022\056\301\057\241\062\242\063\240\125\246" +
    "\126\071\127\101\220\245\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\054\316\001\001\000\002\001" +
    "\001\000\004\023\320\001\001\000\004\113\321\001\001" +
    "\000\002\001\001\000\004\025\323\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\010\326\001\001\000\002" +
    "\001\001\000\004\060\330\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\061\342\071\334" +
    "\072\336\074\341\075\344\076\340\110\343\001\001\000" +
    "\002\001\001\000\006\073\u011b\121\u0121\001\001\000\002" +
    "\001\001\000\004\051\u0114\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\116\347\117\355" +
    "\130\353\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\051\u010f\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\105\u010b\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\025\357" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\111\363\001\001\000\004\122\370\001\001" +
    "\000\004\025\365\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\123\371\001\001\000\004" +
    "\105\373\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\124\u0107\001\001" +
    "\000\004\124\u0102\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\124\u010a\001\001\000\002\001\001" +
    "\000\022\056\u010c\057\241\062\242\063\240\125\246\126" +
    "\071\127\101\220\245\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\054" +
    "\u0111\001\001\000\002\001\001\000\004\052\u0113\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\054\u0116\001" +
    "\001\000\002\001\001\000\004\052\u0118\001\001\000\002" +
    "\001\001\000\004\052\u011a\001\001\000\002\001\001\000" +
    "\004\042\u013d\001\001\000\010\125\u012a\126\071\127\101" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\104\u0123\001\001\000\004" +
    "\014\u0125\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\114\u012e\116\u012b\117" +
    "\u012c\001\001\000\004\051\u013b\001\001\000\002\001\001" +
    "\000\004\105\u012f\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\056\u0131\057\241\062\242\063\240\125\246" +
    "\126\071\127\101\220\245\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\120\u0135\001\001\000\002\001\001" +
    "\000\004\111\u0136\001\001\000\004\122\u0137\001\001\000" +
    "\004\105\u0138\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\052\u013c\001\001\000\002\001" +
    "\001\000\006\067\u0140\070\u013e\001\001\000\002\001\001" +
    "\000\004\064\u015d\001\001\000\004\100\u0141\001\001\000" +
    "\004\102\u014c\001\001\000\004\101\u0144\001\001\000\004" +
    "\106\u0147\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\106\u0149\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\103\u014e\001\001\000\002\001\001\000\006\107\u0151" +
    "\110\u0150\001\001\000\002\001\001\000\010\114\u0156\116" +
    "\u012b\117\u012c\001\001\000\004\115\u0152\001\001\000\002" +
    "\001\001\000\004\051\u0154\001\001\000\004\052\u0155\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\061\342\071\334\072\u015f\074\341\075\344\076\340\110" +
    "\343\001\001\000\002\001\001\000\010\125\u0161\126\071" +
    "\127\101\001\001\000\002\001\001\000\004\165\u0163\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\170\u016a\176\u01cd" +
    "\001\001\000\002\001\001\000\006\214\u016e\223\u016f\001" +
    "\001\000\002\001\001\000\004\047\u01cc\001\001\000\012" +
    "\177\u01b7\200\u01ba\201\u01b9\202\u01b6\001\001\000\004\023" +
    "\u0172\001\001\000\012\207\u0175\215\u0173\216\u0174\217\u017d" +
    "\001\001\000\002\001\001\000\010\215\u01b5\216\u0174\217" +
    "\u017d\001\001\000\010\215\u01b4\216\u0174\217\u017d\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\216\u01aa\217" +
    "\u017d\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\205\u0189\206\u0188\211" +
    "\u018c\212\u018b\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\207\u01a0\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\125\u018f\126\071\127\101\213\u018e\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\125\u018f" +
    "\126\071\127\101\213\u0191\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\023\u0196\206\u0195\211\u018c\212\u018b" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\023\u0198\001\001\000\002\001\001\000\010" +
    "\206\u019a\211\u018c\212\u018b\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\215\u01ab\216\u0174" +
    "\217\u017d\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\210\u01b1\001\001" +
    "\000\004\210\u01b3\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\214\u016e\223\u01ca\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\125\u01c7\126\071\127\101\001\001\000" +
    "\012\125\u01c0\126\071\127\101\201\u01bf\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\125" +
    "\u01c6\126\071\127\101\001\001\000\010\125\u01c5\126\071" +
    "\127\101\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\177\u01c9\200\u01ba\201\u01b9\202\u01b6\001\001\000\002\001" +
    "\001\000\004\047\u01cb\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\012\u01f6\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\012\u01e4\001\001\000\004\012\u01e2\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\012\u01dd\001\001\000\004" +
    "\012\u01d9\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\023\u01de\024\u01df\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\023\u01de\024\u01e1\001\001\000\002\001\001" +
    "\000\004\025\u01e3\001\001\000\002\001\001\000\006\045" +
    "\u01e6\046\u01e7\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\023\u01f2\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\046\u01f1\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\046\u01f0\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\045\u01f5\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\023\u01de\024\u01f7\001\001\000\002" +
    "\001\001\000\004\164\u020a\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\204\u01fc\205\u01fd\206\u0188\211\u018c" +
    "\212\u018b\001\001\000\004\214\u0200\001\001\000\002\001" +
    "\001\000\014\204\u01ff\205\u01fd\206\u0188\211\u018c\212\u018b" +
    "\001\001\000\002\001\001\000\004\047\u0201\001\001\000" +
    "\004\221\u0203\001\001\000\002\001\001\000\004\222\u0205" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\054" +
    "\u0207\001\001\000\002\001\001\000\004\025\u0209\001\001" +
    "\000\002\001\001\000\014\204\u020b\205\u01fd\206\u0188\211" +
    "\u018c\212\u018b\001\001\000\004\214\u020c\001\001\000\004" +
    "\047\u020d\001\001\000\004\221\u020e\001\001\000\004\222" +
    "\u020f\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\023" +
    "\u0274\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\137\u0245\001\001\000\002\001\001\000" +
    "\004\023\u021f\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\151\u022a\152" +
    "\u0225\153\u0228\157\u0223\161\u0226\163\u0221\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\160\u022e\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\061" +
    "\342\071\334\072\u022b\074\341\075\344\076\340\110\343" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\012\u022f\001\001\000\004" +
    "\025\u0230\001\001\000\002\001\001\000\006\025\u0232\162" +
    "\u0234\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\073\u0237\121\u0121\156\u0238\001\001\000" +
    "\002\001\001\000\004\042\u023f\001\001\000\004\155\u023c" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\154\u0240\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\042\u0247\140\u024a\141\u024b\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\142\u024e" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\141\u0250" +
    "\001\001\000\002\001\001\000\004\143\u0259\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\144\u0255\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\145\u0260\146\u025f\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\145\u0262\146\u025f\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\150\u0265\001\001\000\006\013\u0268" +
    "\147\u0266\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\013\u026c\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\023\u0271\001\001" +
    "\000\002\001\001\000\004\023\u0273\001\001\000\002\001" +
    "\001\000\004\113\u0275\001\001\000\002\001\001\000\004" +
    "\010\u0277\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\023\u027f\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;

    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 355: // FIN ::= Go 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FIN",61, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 354: // FIN ::= Punto_Coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FIN",61, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 353: // NAME ::= Id 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NAME",102, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 352: // NAME ::= String 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NAME",102, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 351: // TABLENAME_3 ::= Id Punto Id Punto Id 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TABLENAME_3",142, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 350: // TABLENAME_3 ::= Id Punto Id 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TABLENAME_3",142, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 349: // TABLENAME ::= Id Punto Id Punto Id 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TABLENAME",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 348: // TABLENAME ::= Id Punto Id 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TABLENAME",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 347: // TABLENAME ::= Id 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TABLENAME",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 346: // IF_EXISTS ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_EXISTS",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 345: // IF_EXISTS ::= If Exists 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_EXISTS",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 344: // TABLE_NAMES ::= TABLENAME Coma TABLE_NAMES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TABLE_NAMES",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 343: // TABLE_NAMES ::= TABLENAME 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TABLE_NAMES",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 342: // DATABASE_NAMES ::= Id Coma DATABASE_NAMES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DATABASE_NAMES",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 341: // DATABASE_NAMES ::= Id 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DATABASE_NAMES",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 340: // A_INDEX ::= Index Id On TABLENAME 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("A_INDEX",92, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 339: // A_INDEX ::= Index All On TABLENAME 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("A_INDEX",92, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 338: // A_VIEW ::= View TABLENAME COLUMN_NAMES As SELECT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("A_VIEW",90, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 337: // ALL ::= DATABASE_NAMES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ALL",112, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 336: // ALL ::= All 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ALL",112, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 335: // NOCHECK ::= Nocheck 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NOCHECK",113, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 334: // NOCHECK ::= Check 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NOCHECK",113, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 333: // CHECK_CONSTRAINT ::= NOCHECK Constraint ALL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CHECK_CONSTRAINT",111, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 332: // CONSTRAINT_2 ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONSTRAINT_2",110, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 331: // CONSTRAINT_2 ::= Column 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONSTRAINT_2",110, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 330: // CONSTRAINT_2 ::= Constraint 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONSTRAINT_2",110, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 329: // DROP_CONSTRAINT ::= Drop CONSTRAINT_2 IF_EXISTS DATABASE_NAMES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DROP_CONSTRAINT",105, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 328: // ADD_COLUMN ::= Add C_TABLE_OPTIONS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ADD_COLUMN",104, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 327: // ROWGUID_REPLICATION ::= Not For Replication 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ROWGUID_REPLICATION",107, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 326: // ROWGUID_REPLICATION ::= Rowguidcol 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ROWGUID_REPLICATION",107, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 325: // ADD_DROP ::= Drop 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ADD_DROP",108, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 324: // ADD_DROP ::= Add 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ADD_DROP",108, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 323: // NULL_OR_NOT ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NULL_OR_NOT",106, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 322: // NULL_OR_NOT ::= Not Null 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NULL_OR_NOT",106, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 321: // NULL_OR_NOT ::= Null 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NULL_OR_NOT",106, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 320: // ALTER_COLUMN ::= Alter Column ADD_DROP ROWGUID_REPLICATION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ALTER_COLUMN",103, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 319: // ALTER_COLUMN ::= Alter Column DATA_TYPE COLLATE NULL_OR_NOT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ALTER_COLUMN",103, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 318: // ALTER_TABLE_OPTIONS ::= CHECK_CONSTRAINT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ALTER_TABLE_OPTIONS",109, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 317: // ALTER_TABLE_OPTIONS ::= DROP_CONSTRAINT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ALTER_TABLE_OPTIONS",109, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 316: // ALTER_TABLE_OPTIONS ::= ADD_COLUMN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ALTER_TABLE_OPTIONS",109, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 315: // ALTER_TABLE_OPTIONS ::= ALTER_COLUMN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ALTER_TABLE_OPTIONS",109, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 314: // A_TABLE ::= Table TABLENAME ALTER_TABLE_OPTIONS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("A_TABLE",89, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 313: // A_USER ::= User Id 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("A_USER",91, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 312: // ID_CURRENT ::= Current 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ID_CURRENT",93, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 311: // ID_CURRENT ::= Id 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ID_CURRENT",93, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 310: // ON_OFF ::= Off 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ON_OFF",98, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 309: // ON_OFF ::= On 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ON_OFF",98, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 308: // LOCAL_GLOBAL ::= Global 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LOCAL_GLOBAL",97, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 307: // LOCAL_GLOBAL ::= Local 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LOCAL_GLOBAL",97, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 306: // SET_OPTIONS ::= Read Write 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SET_OPTIONS",96, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 305: // SET_OPTIONS ::= Read Only 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SET_OPTIONS",96, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 304: // SET_OPTIONS ::= Cursor Default LOCAL_GLOBAL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SET_OPTIONS",96, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 303: // SET_OPTIONS ::= Cursor Close On Commit ON_OFF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SET_OPTIONS",96, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 302: // SET ::= Set SET_OPTIONS Coma SET 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SET",95, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 301: // SET ::= Set SET_OPTIONS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SET",95, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 300: // FILENAME ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FILENAME",101, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 299: // FILENAME ::= SIZE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FILENAME",101, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 298: // FILENAME ::= Coma File Igual String SIZE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FILENAME",101, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 297: // FILESPEC_2 ::= Parentesis_a Names Igual NAME FILENAME Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FILESPEC_2",100, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 296: // ADD_FILE ::= FILESPEC_2 Coma ADD_FILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ADD_FILE",99, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 295: // ADD_FILE ::= FILESPEC_2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ADD_FILE",99, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 294: // ALTER_DATABASE_OPTIONS ::= SET 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ALTER_DATABASE_OPTIONS",94, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 293: // ALTER_DATABASE_OPTIONS ::= Add File ADD_FILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ALTER_DATABASE_OPTIONS",94, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 292: // ALTER_DATABASE_OPTIONS ::= COLLATE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ALTER_DATABASE_OPTIONS",94, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 291: // A_DATABASE ::= Database ID_CURRENT ALTER_DATABASE_OPTIONS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("A_DATABASE",88, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 290: // A_SENTENCE ::= A_INDEX 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("A_SENTENCE",87, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 289: // A_SENTENCE ::= A_USER 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("A_SENTENCE",87, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 288: // A_SENTENCE ::= A_VIEW 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("A_SENTENCE",87, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 287: // A_SENTENCE ::= A_TABLE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("A_SENTENCE",87, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 286: // A_SENTENCE ::= A_DATABASE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("A_SENTENCE",87, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 285: // ALTER ::= Alter A_SENTENCE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ALTER",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 284: // COLUMN_NAMES ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COLUMN_NAMES",73, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 283: // COLUMN_NAMES ::= Parentesis_a DATABASE_NAMES Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COLUMN_NAMES",73, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 282: // OR_ALTER ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OR_ALTER",72, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 281: // OR_ALTER ::= Or Alter 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OR_ALTER",72, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 280: // C_VIEW ::= Create OR_ALTER View TABLENAME COLUMN_NAMES As SELECT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("C_VIEW",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 279: // TABLE_INDEX ::= Index CLUSTERED Parentesis_a COLUMN_NAMES_ASC Parentesis_c ON 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TABLE_INDEX",60, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 278: // TABLE_CONSTRAINT_DEFINITION ::= Check NOT_FOR_REPLICATION FILTER 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TABLE_CONSTRAINT_DEFINITION",86, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 277: // TABLE_CONSTRAINT_DEFINITION ::= FOREIGN_KEY Parentesis_a DATABASE_NAMES Parentesis_c References Id REF_COLUMN ON_DELETE ON_UPDATE NOT_FOR_REPLICATION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TABLE_CONSTRAINT_DEFINITION",86, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 276: // TABLE_CONSTRAINT_DEFINITION ::= PRIMARY_UNIQUE CLUSTERED Parentesis_a COLUMN_NAMES_ASC Parentesis_c ON 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TABLE_CONSTRAINT_DEFINITION",86, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 275: // TABLE_CONSTRAINT ::= CONSTRAINT_O_NO TABLE_CONSTRAINT_DEFINITION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TABLE_CONSTRAINT",59, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 274: // F ::= Parentesis_a COLUMN_EXPRESION Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("F",85, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 273: // F ::= Var 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("F",85, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 272: // F ::= Id 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("F",85, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 271: // F ::= String 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("F",85, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 270: // F ::= Bit 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("F",85, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 269: // F ::= Float 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("F",85, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 268: // F ::= Int 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("F",85, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 267: // T ::= F 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("T",84, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 266: // T ::= T Dividir F 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("T",84, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 265: // T ::= T Asterisco F 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("T",84, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 264: // COLUMN_EXPRESION ::= T 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COLUMN_EXPRESION",83, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 263: // COLUMN_EXPRESION ::= COLUMN_EXPRESION Menos T 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COLUMN_EXPRESION",83, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 262: // COLUMN_EXPRESION ::= COLUMN_EXPRESION Mas T 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COLUMN_EXPRESION",83, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 261: // COMPUTED_DEFINITION ::= Id As COLUMN_EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COMPUTED_DEFINITION",58, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 260: // COMPUTED_DEFINITION ::= Id As COLUMN_EXPRESION CONSTRAINT_DEFINITION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COMPUTED_DEFINITION",58, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 259: // COLUMN_INDEX ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COLUMN_INDEX",75, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 258: // COLUMN_INDEX ::= Index CLUSTERED ON 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COLUMN_INDEX",75, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 257: // NOT_FOR_REPLICATION ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NOT_FOR_REPLICATION",67, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 256: // NOT_FOR_REPLICATION ::= Not For Replication 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NOT_FOR_REPLICATION",67, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 255: // ON_OPTIONS ::= Set Default 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ON_OPTIONS",82, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 254: // ON_OPTIONS ::= Set Null 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ON_OPTIONS",82, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 253: // ON_OPTIONS ::= Cascade 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ON_OPTIONS",82, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 252: // ON_OPTIONS ::= No Action 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ON_OPTIONS",82, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 251: // ON_DELETE ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ON_DELETE",80, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 250: // ON_DELETE ::= On Update ON_OPTIONS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ON_DELETE",80, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 249: // ON_DELETE ::= On Delete ON_OPTIONS On Update ON_OPTIONS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ON_DELETE",80, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 248: // ON_DELETE ::= On Delete ON_OPTIONS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ON_DELETE",80, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 247: // REF_COLUMN ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("REF_COLUMN",71, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 246: // REF_COLUMN ::= Parentesis_a DATABASE_NAMES Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("REF_COLUMN",71, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 245: // SCHEMA ::= Id 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SCHEMA",78, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 244: // SCHEMA ::= Id Punto Id 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SCHEMA",78, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 243: // FOREIGN_KEY ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOREIGN_KEY",77, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 242: // FOREIGN_KEY ::= Foreign Key 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOREIGN_KEY",77, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // PRIMARY_UNIQUE ::= Unique 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PRIMARY_UNIQUE",76, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // PRIMARY_UNIQUE ::= Primary Key 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PRIMARY_UNIQUE",76, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // CONSTRAINT_DEFINITION ::= Check NOT_FOR_REPLICATION Parentesis_a FILTER Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONSTRAINT_DEFINITION",74, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // CONSTRAINT_DEFINITION ::= FOREIGN_KEY References SCHEMA REF_COLUMN ON_DELETE NOT_FOR_REPLICATION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONSTRAINT_DEFINITION",74, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // CONSTRAINT_DEFINITION ::= PRIMARY_UNIQUE CLUSTERED ON 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONSTRAINT_DEFINITION",74, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // CONSTRAINT_O_NO ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONSTRAINT_O_NO",70, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // CONSTRAINT_O_NO ::= Constraint Id 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONSTRAINT_O_NO",70, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // COLUMN_CONS ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COLUMN_CONS",69, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // COLUMN_CONS ::= CONSTRAINT_O_NO CONSTRAINT_DEFINITION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COLUMN_CONS",69, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // ROWGUIDCOL ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ROWGUIDCOL",65, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // ROWGUIDCOL ::= Rowguidcol 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ROWGUIDCOL",65, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // NOT_NULL ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NOT_NULL",64, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // NOT_NULL ::= Not For Replication 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NOT_NULL",64, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // NOT_NULL ::= Not For Replication Not Null 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NOT_NULL",64, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // NOT_NULL ::= Not For Replication Null 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NOT_NULL",64, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // NOT_NULL ::= Not Null 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NOT_NULL",64, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // NOT_NULL ::= Null 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NOT_NULL",64, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // ENTERO ::= Bit 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ENTERO",68, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // ENTERO ::= Int 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ENTERO",68, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // SEED ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SEED",63, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // SEED ::= Parentesis_a ENTERO Coma ENTERO Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SEED",63, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // IDENTITY ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IDENTITY",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // IDENTITY ::= Identity SEED 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IDENTITY",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // DEFAULT ::= Default CONSTANT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DEFAULT",54, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // CONSTRAINT ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONSTRAINT",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // CONSTRAINT ::= DEFAULT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONSTRAINT",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // TAMAÑO ::= Id 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TAMAÑO",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // TAMAÑO ::= Int Coma Int 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TAMAÑO",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // TAMAÑO ::= Int 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TAMAÑO",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // TYPE_SIZE ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TYPE_SIZE",66, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // TYPE_SIZE ::= Parentesis_a TAMAÑO Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TYPE_SIZE",66, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // TYPE ::= BitR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TYPE",79, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // TYPE ::= Varchar 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TYPE",79, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // TYPE ::= FloatR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TYPE",79, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // TYPE ::= IntR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TYPE",79, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // DATA_TYPE ::= TYPE TYPE_SIZE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DATA_TYPE",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // COLUMN_DEFINITION ::= Id DATA_TYPE COLLATE CONSTRAINT IDENTITY NOT_NULL ROWGUIDCOL COLUMN_CONS COLUMN_INDEX 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COLUMN_DEFINITION",47, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // C_TABLE_OPTION ::= TABLE_INDEX 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("C_TABLE_OPTION",55, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // C_TABLE_OPTION ::= TABLE_CONSTRAINT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("C_TABLE_OPTION",55, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // C_TABLE_OPTION ::= COMPUTED_DEFINITION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("C_TABLE_OPTION",55, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // C_TABLE_OPTION ::= COLUMN_DEFINITION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("C_TABLE_OPTION",55, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // C_TABLE_OPTIONS ::= C_TABLE_OPTION Coma C_TABLE_OPTIONS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("C_TABLE_OPTIONS",56, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // C_TABLE_OPTIONS ::= C_TABLE_OPTION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("C_TABLE_OPTIONS",56, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // AS ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AS",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // AS ::= As Id 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AS",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // C_TABLE ::= Create Table TABLENAME AS Parentesis_a C_TABLE_OPTIONS Parentesis_c ON 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("C_TABLE",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // ON ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ON",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // ON ::= On Primary 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ON",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // ON ::= On Id 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ON",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // ON ::= On Id Parentesis_a Id Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ON",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // COMPARADOR ::= Is Not 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COMPARADOR",52, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // COMPARADOR ::= Is 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COMPARADOR",52, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // COMPARADOR ::= Igual 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COMPARADOR",52, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // COMPARADOR ::= Comparador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COMPARADOR",52, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // COMPARACION ::= TABLENAME_3 COMPARADOR COLUMN_EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COMPARACION",49, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // COMPARACION ::= COLUMN_EXPRESION COMPARADOR COLUMN_EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COMPARACION",49, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // CONSTANT ::= Null 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONSTANT",50, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // CONSTANT ::= Float 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONSTANT",50, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // CONSTANT ::= Bit 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONSTANT",50, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // CONSTANT ::= String 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONSTANT",50, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // CONSTANT ::= Int 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONSTANT",50, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // CONSTANTS ::= CONSTANT Coma CONSTANTS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONSTANTS",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // CONSTANTS ::= CONSTANT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONSTANTS",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // DISJUNCT ::= Id In Parentesis_a CONSTANTS Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DISJUNCT",48, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // CONJUNCT ::= COMPARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONJUNCT",45, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // CONJUNCT ::= DISJUNCT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONJUNCT",45, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // FILTER ::= CONJUNCT Or FILTER 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FILTER",44, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // FILTER ::= CONJUNCT And FILTER 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FILTER",44, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // FILTER ::= CONJUNCT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FILTER",44, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // WHERE_INDEX ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WHERE_INDEX",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // WHERE_INDEX ::= Where FILTER 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WHERE_INDEX",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // INCLUDE ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INCLUDE",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // INCLUDE ::= Include Parentesis_a DATABASE_NAMES Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INCLUDE",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // ASC ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASC",43, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // ASC ::= Desc 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASC",43, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // ASC ::= Asc 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASC",43, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // COLUMN_NAMES_ASC ::= Id ASC Coma COLUMN_NAMES_ASC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COLUMN_NAMES_ASC",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // COLUMN_NAMES_ASC ::= Id ASC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COLUMN_NAMES_ASC",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // CLUSTERED ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CLUSTERED",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // CLUSTERED ::= Nonclustered 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CLUSTERED",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // CLUSTERED ::= Clustered 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CLUSTERED",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // UNIQUE ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("UNIQUE",38, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // UNIQUE ::= Unique 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("UNIQUE",38, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // C_INDEX ::= Create UNIQUE CLUSTERED Index Id On TABLENAME Parentesis_a COLUMN_NAMES_ASC Parentesis_c INCLUDE WHERE_INDEX ON 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("C_INDEX",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-12)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // C_USER ::= Create User Id 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("C_USER",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // SIZE ::= Coma Size Igual Bit 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SIZE",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // SIZE ::= Coma Size Igual Int 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SIZE",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // FILESPEC ::= Parentesis_a Names Igual NAME Coma File Igual String SIZE Parentesis_c Coma FILESPEC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FILESPEC",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-11)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // FILESPEC ::= Parentesis_a Names Igual NAME Coma File Igual String SIZE Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FILESPEC",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // PRIMARY ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PRIMARY",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // PRIMARY ::= Primary 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PRIMARY",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // COLLATE ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COLLATE",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // COLLATE ::= Collate Id 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COLLATE",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // DATABASE_ON ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DATABASE_ON",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // DATABASE_ON ::= On PRIMARY FILESPEC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DATABASE_ON",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // C_DATABASE ::= Create Database Id DATABASE_ON COLLATE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("C_DATABASE",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // CREATE ::= C_USER 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CREATE",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // CREATE ::= C_TABLE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CREATE",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // CREATE ::= C_VIEW 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CREATE",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // CREATE ::= C_INDEX 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CREATE",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // CREATE ::= C_DATABASE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CREATE",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // INDEX_SIN_ON ::= Id Punto Id Punto Id Coma INDEX_SIN_ON 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INDEX_SIN_ON",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // INDEX_SIN_ON ::= Id Punto Id Coma INDEX_SIN_ON 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INDEX_SIN_ON",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // INDEX_SIN_ON ::= Id Punto Id Punto Id 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INDEX_SIN_ON",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // INDEX_SIN_ON ::= Id Punto Id 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INDEX_SIN_ON",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // INDEX_ON ::= Id On TABLENAME Coma INDEX_ON 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INDEX_ON",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // INDEX_ON ::= Id On TABLENAME 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INDEX_ON",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // D_INDEX ::= Index IF_EXISTS INDEX_SIN_ON 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("D_INDEX",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // D_INDEX ::= Index IF_EXISTS INDEX_ON 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("D_INDEX",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // D_USER ::= User IF_EXISTS Id 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("D_USER",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // D_VIEW ::= View IF_EXISTS TABLE_NAMES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("D_VIEW",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // D_TABLE ::= Table IF_EXISTS TABLE_NAMES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("D_TABLE",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // D_DATABASE ::= Database IF_EXISTS DATABASE_NAMES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("D_DATABASE",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // D_SENTENCE ::= D_TABLE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("D_SENTENCE",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // D_SENTENCE ::= D_USER 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("D_SENTENCE",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // D_SENTENCE ::= D_VIEW 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("D_SENTENCE",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // D_SENTENCE ::= D_INDEX 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("D_SENTENCE",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // D_SENTENCE ::= D_DATABASE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("D_SENTENCE",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // DROP ::= Drop D_SENTENCE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DROP",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // TRUNCATE ::= Truncate Table TABLENAME 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TRUNCATE",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // DDL ::= ALTER 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DDL",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // DDL ::= CREATE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DDL",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // DDL ::= TRUNCATE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DDL",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // DDL ::= DROP 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DDL",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // FROM_2 ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FROM_2",145, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // FROM_2 ::= FROM 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FROM_2",145, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // DELETE ::= TOP VAR_TABLENAME FROM_2 WHERE_INDEX 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DELETE",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // DELETE ::= TOP From VAR_TABLENAME 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DELETE",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // SET_VAR ::= Var Igual SET_COLUMN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SET_VAR",128, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // SET_VAR ::= Var Incrementador COLUMN_EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SET_VAR",128, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // SET_VAR ::= Var Igual COLUMN_EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SET_VAR",128, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // SET_COLUMN ::= Id Incrementador COLUMN_EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SET_COLUMN",127, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // SET_COLUMN ::= Id Igual Null 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SET_COLUMN",127, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // SET_COLUMN ::= Id Igual Default 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SET_COLUMN",127, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // SET_COLUMN ::= Id Igual COLUMN_EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SET_COLUMN",127, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // ASIGNAR ::= SET_VAR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNAR",126, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // ASIGNAR ::= SET_COLUMN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNAR",126, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // ASIGNAR_2 ::= ASIGNAR Coma ASIGNAR_2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNAR_2",125, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // ASIGNAR_2 ::= ASIGNAR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNAR_2",125, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // VAR_TABLENAME ::= Var 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VAR_TABLENAME",124, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // VAR_TABLENAME ::= TABLENAME_2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VAR_TABLENAME",124, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // UPDATE ::= TOP VAR_TABLENAME Set ASIGNAR_2 FROM_2 WHERE_INDEX 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("UPDATE",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // VALUES_OPTION ::= COLUMN_EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VALUES_OPTION",122, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // VALUES_OPTION ::= Null 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VALUES_OPTION",122, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // VALUES_OPTION ::= Default Values 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VALUES_OPTION",122, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // VALUES_OPTIONS ::= VALUES_OPTION Coma VALUES_OPTIONS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VALUES_OPTIONS",121, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // VALUES_OPTIONS ::= VALUES_OPTION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VALUES_OPTIONS",121, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // VALUES ::= Parentesis_a VALUES_OPTIONS Parentesis_c Coma VALUES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VALUES",120, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // VALUES ::= Parentesis_a VALUES_OPTIONS Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VALUES",120, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // VALUES_2 ::= Default Values 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VALUES_2",123, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // VALUES_2 ::= Values VALUES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VALUES_2",123, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // COLUMN_LIST ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COLUMN_LIST",119, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // COLUMN_LIST ::= Parentesis_a DATABASE_NAMES Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COLUMN_LIST",119, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // TABLENAME_2 ::= Id Punto Id Punto Id Punto Id 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TABLENAME_2",118, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // TABLENAME_2 ::= Id Punto Id Punto Id 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TABLENAME_2",118, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // TABLENAME_2 ::= Id Punto Id 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TABLENAME_2",118, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // TABLENAME_2 ::= Id 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TABLENAME_2",118, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // OBJECT ::= Openquery Parentesis_a Id Coma String Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OBJECT",117, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // OBJECT ::= TABLENAME_2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OBJECT",117, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // INTO ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INTO",116, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // INTO ::= Into 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INTO",116, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // PERCENT ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PERCENT",115, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // PERCENT ::= Percent 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PERCENT",115, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // TOP ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TOP",114, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // TOP ::= Top Parentesis_a COLUMN_EXPRESION Parentesis_c PERCENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TOP",114, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // INSERT ::= Insert TOP INTO OBJECT COLUMN_LIST VALUES_2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSERT",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // ORDER_BY ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ORDER_BY",144, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // ORDER_BY ::= Order By COLUMN_NAMES_ASC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ORDER_BY",144, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // GROUP_BY ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("GROUP_BY",143, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // GROUP_BY ::= Group By DATABASE_NAMES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("GROUP_BY",143, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // JOIN_TYPE ::= Inner Join 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("JOIN_TYPE",141, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // JOIN_TYPE ::= Right Outer Join 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("JOIN_TYPE",141, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // JOIN_TYPE ::= Right Join 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("JOIN_TYPE",141, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // JOIN_TYPE ::= Left Outer Join 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("JOIN_TYPE",141, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // JOIN_TYPE ::= Left Join 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("JOIN_TYPE",141, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // JOIN_TYPE ::= Full Join 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("JOIN_TYPE",141, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // JOIN_TYPE ::= Full Outer Join 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("JOIN_TYPE",141, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // JOIN_TYPE ::= Join 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("JOIN_TYPE",141, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // JOIN ::= JOIN_TYPE CAMPO_AS On TABLENAME Comparador TABLENAME 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("JOIN",140, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // JOIN ::= JOIN_TYPE CAMPO_AS On CAMPO Igual CAMPO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("JOIN",140, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // JOINS ::= Parentesis_a JOIN JOINS Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("JOINS",139, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // JOINS ::= Parentesis_a JOIN Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("JOINS",139, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // JOINS ::= JOIN JOINS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("JOINS",139, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // JOINS ::= JOIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("JOINS",139, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // FROM ::= From TABLENAME 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FROM",138, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // FROM ::= From TABLENAME ALIAS JOINS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FROM",138, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // FROM ::= From TABLENAME JOINS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FROM",138, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // FROM ::= From TABLENAME ALIAS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FROM",138, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // PARAMETROS ::= COLUMN_EXPRESION Coma PARAMETROS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROS",137, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // PARAMETROS ::= COLUMN_EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROS",137, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // METHOD_NAME ::= Sum 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("METHOD_NAME",136, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // METHOD_NAME ::= Count 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("METHOD_NAME",136, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // METHOD_NAME ::= Max 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("METHOD_NAME",136, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // METHOD_NAME ::= Min 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("METHOD_NAME",136, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // METHOD_NAME ::= Avg 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("METHOD_NAME",136, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // METHOD ::= METHOD_NAME Parentesis_a PARAMETROS Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("METHOD",135, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // ID_M ::= Id ID_M 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ID_M",134, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // ID_M ::= Id 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ID_M",134, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // ALIAS ::= As Bracket_a ID_M Bracket_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ALIAS",133, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // ALIAS ::= Id 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ALIAS",133, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // ALIAS ::= As Id 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ALIAS",133, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // CAMPO ::= Id 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CAMPO",132, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // CAMPO ::= METHOD 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CAMPO",132, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // CAMPO ::= Id Cuadro Id 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CAMPO",132, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // CAMPO ::= Id Punto Id 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CAMPO",132, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // CAMPO ::= Id Punto Asterisco 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CAMPO",132, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // CAMPO ::= Asterisco 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CAMPO",132, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // CAMPO_AS ::= CAMPO ALIAS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CAMPO_AS",131, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // SELECT_LIST ::= CAMPO_AS Coma SELECT_LIST 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SELECT_LIST",130, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // SELECT_LIST ::= CAMPO_AS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SELECT_LIST",130, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ALL_DISTINCT ::= Distinct 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ALL_DISTINCT",129, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ALL_DISTINCT ::= All 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ALL_DISTINCT",129, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // SELECT ::= Select TOP SELECT_LIST FROM WHERE_INDEX GROUP_BY ORDER_BY 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SELECT",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // SELECT ::= Select ALL_DISTINCT TOP SELECT_LIST FROM WHERE_INDEX GROUP_BY ORDER_BY 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SELECT",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // DML ::= INSERT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DML",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // DML ::= UPDATE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DML",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // DML ::= DELETE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DML",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // DML ::= SELECT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DML",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // SAVEPOINT ::= Save TRAN Id 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SAVEPOINT",149, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // SAVEPOINT ::= Save TRAN Var 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SAVEPOINT",149, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // SAVEPOINT ::= Save TRAN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SAVEPOINT",149, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // ROLLBACK ::= Rollback TRAN Id 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ROLLBACK",148, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // ROLLBACK ::= Rollback TRAN Var 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ROLLBACK",148, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // ROLLBACK ::= Rollback TRAN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ROLLBACK",148, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // COMMIT ::= Commit TRAN Id 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COMMIT",147, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // COMMIT ::= Commit TRAN Var 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COMMIT",147, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // COMMIT ::= Commit 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COMMIT",147, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // COMMIT ::= Commit TRAN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COMMIT",147, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // TRAN ::= Transaction 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TRAN",150, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // TRAN ::= Tran 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TRAN",150, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // BEGIN ::= Begin TRAN Var Id 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BEGIN",146, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // BEGIN ::= Begin TRAN Var 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BEGIN",146, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // TCL ::= SAVEPOINT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TCL",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // TCL ::= ROLLBACK 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TCL",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // TCL ::= COMMIT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TCL",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // TCL ::= BEGIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TCL",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // SENTENCIA ::= TSQL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // SENTENCIA ::= TCL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // SENTENCIA ::= DDL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // SENTENCIA ::= DML 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= SENTENCIA FIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

