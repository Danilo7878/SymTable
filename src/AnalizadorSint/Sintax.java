
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat Nov 16 15:25:51 CST 2019
//----------------------------------------------------

package AnalizadorSint;

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sat Nov 16 15:25:51 CST 2019
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\224\000\002\002\004\000\002\002\004\000\002\003" +
    "\003\000\002\003\003\000\002\003\003\000\002\003\003" +
    "\000\002\006\003\000\002\006\003\000\002\006\003\000" +
    "\002\006\003\000\002\065\005\000\002\065\006\000\002" +
    "\071\003\000\002\071\003\000\002\066\004\000\002\066" +
    "\003\000\002\066\005\000\002\066\005\000\002\067\004" +
    "\000\002\067\005\000\002\067\005\000\002\070\004\000" +
    "\002\070\005\000\002\070\005\000\002\004\003\000\002" +
    "\010\012\000\002\010\011\000\002\045\003\000\002\045" +
    "\003\000\002\046\003\000\002\046\005\000\002\047\004" +
    "\000\002\050\003\000\002\050\005\000\002\050\005\000" +
    "\002\050\005\000\002\050\003\000\002\050\003\000\002" +
    "\051\004\000\002\051\003\000\002\051\006\000\002\052" +
    "\003\000\002\052\004\000\002\053\006\000\002\054\003" +
    "\000\002\054\003\000\002\054\003\000\002\054\003\000" +
    "\002\054\003\000\002\055\003\000\002\055\005\000\002" +
    "\056\005\000\002\056\005\000\002\056\006\000\002\056" +
    "\004\000\002\057\003\000\002\057\004\000\002\057\005" +
    "\000\002\057\006\000\002\060\010\000\002\060\010\000" +
    "\002\061\003\000\002\061\005\000\002\061\004\000\002" +
    "\061\004\000\002\061\005\000\002\061\004\000\002\061" +
    "\005\000\002\061\004\000\002\063\005\000\002\063\002" +
    "\000\002\064\005\000\002\064\002\000\002\017\004\000" +
    "\002\017\006\000\002\011\003\000\002\011\003\000\002" +
    "\011\002\000\002\012\010\000\002\033\007\000\002\033" +
    "\002\000\002\034\003\000\002\034\002\000\002\035\003" +
    "\000\002\035\002\000\002\036\003\000\002\036\010\000" +
    "\002\037\003\000\002\037\005\000\002\037\007\000\002" +
    "\037\011\000\002\040\005\000\002\040\002\000\002\044" +
    "\004\000\002\044\004\000\002\044\003\000\002\041\005" +
    "\000\002\041\007\000\002\042\003\000\002\042\005\000" +
    "\002\043\004\000\002\043\003\000\002\043\003\000\002" +
    "\005\003\000\002\013\005\000\002\015\003\000\002\015" +
    "\005\000\002\014\003\000\002\014\005\000\002\014\007" +
    "\000\002\062\005\000\002\062\007\000\002\016\004\000" +
    "\002\016\002\000\002\020\003\000\002\020\005\000\002" +
    "\020\005\000\002\021\003\000\002\021\003\000\002\022" +
    "\007\000\002\025\003\000\002\025\005\000\002\024\003" +
    "\000\002\024\003\000\002\024\003\000\002\024\003\000" +
    "\002\024\003\000\002\023\005\000\002\023\005\000\002" +
    "\026\003\000\002\026\003\000\002\026\003\000\002\026" +
    "\004\000\002\030\005\000\002\030\005\000\002\030\003" +
    "\000\002\031\005\000\002\031\005\000\002\031\003\000" +
    "\002\032\003\000\002\032\003\000\002\032\003\000\002" +
    "\032\003\000\002\032\003\000\002\032\003\000\002\032" +
    "\005\000\002\027\003\000\002\027\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\370\000\016\004\005\074\023\076\024\107\006\112" +
    "\013\113\004\001\002\000\006\110\350\111\351\001\002" +
    "\000\004\005\366\001\002\000\006\110\350\111\351\001" +
    "\002\000\006\030\ufffe\040\ufffe\001\002\000\006\030\uff9a" +
    "\040\uff9a\001\002\000\006\030\uffff\040\uffff\001\002\000" +
    "\006\030\361\040\362\001\002\000\006\110\350\111\351" +
    "\001\002\000\006\030\ufffc\040\ufffc\001\002\000\006\030" +
    "\ufff8\040\ufff8\001\002\000\006\030\ufff9\040\ufff9\001\002" +
    "\000\006\030\ufffa\040\ufffa\001\002\000\006\030\ufffb\040" +
    "\ufffb\001\002\000\006\030\uffe9\040\uffe9\001\002\000\006" +
    "\030\ufffd\040\ufffd\001\002\000\012\030\ufff2\040\ufff2\110" +
    "\350\111\351\001\002\000\012\031\uffb1\077\027\101\uffb1" +
    "\102\uffb1\001\002\000\004\002\026\001\002\000\004\002" +
    "\001\001\002\000\004\042\343\001\002\000\010\031\uffad" +
    "\101\031\102\uffad\001\002\000\006\031\uffae\102\uffae\001" +
    "\002\000\006\031\034\102\033\001\002\000\004\042\336" +
    "\001\002\000\014\021\uffaa\036\330\042\uffaa\060\uffaa\103" +
    "\uffaa\001\002\000\012\021\uffa5\042\037\060\uffa5\103\uffa5" +
    "\001\002\000\012\021\uffac\042\uffac\060\uffac\103\uffac\001" +
    "\002\000\004\031\275\001\002\000\010\021\041\060\043" +
    "\103\042\001\002\000\004\103\325\001\002\000\004\042" +
    "\311\001\002\000\026\031\uffb1\046\uffb1\054\050\061\uffb1" +
    "\062\uffb1\063\uffb1\064\uffb1\065\uffb1\075\047\077\027\001" +
    "\002\000\006\030\uffa2\040\uffa2\001\002\000\006\030\uffb3" +
    "\040\uffb3\001\002\000\022\031\uffb1\046\uffb1\061\uffb1\062" +
    "\uffb1\063\uffb1\064\uffb1\065\uffb1\077\027\001\002\000\022" +
    "\031\uffe6\046\uffe6\061\uffe6\062\uffe6\063\uffe6\064\uffe6\065" +
    "\uffe6\077\uffe6\001\002\000\022\031\uffe5\046\uffe5\061\uffe5" +
    "\062\uffe5\063\uffe5\064\uffe5\065\uffe5\077\uffe5\001\002\000" +
    "\020\031\052\046\060\061\056\062\054\063\063\064\053" +
    "\065\057\001\002\000\042\011\uffdc\020\uffdc\030\uffdc\031" +
    "\uffdc\036\300\040\uffdc\042\uffdc\043\uffdc\055\170\066\uffdc" +
    "\067\uffdc\070\uffdc\072\uffdc\073\uffdc\104\uffdc\105\uffdc\001" +
    "\002\000\004\042\uffd2\001\002\000\004\042\uffd4\001\002" +
    "\000\004\053\133\001\002\000\004\042\uffd5\001\002\000" +
    "\004\042\uffd1\001\002\000\040\011\uffe1\020\uffe1\030\uffe1" +
    "\031\uffe1\040\uffe1\041\uffe1\042\uffe1\043\uffe1\066\uffe1\067" +
    "\uffe1\070\uffe1\072\uffe1\073\uffe1\104\uffe1\105\uffe1\001\002" +
    "\000\006\020\122\031\121\001\002\000\006\037\117\053" +
    "\uffe4\001\002\000\004\042\uffd3\001\002\000\040\011\uffdd" +
    "\020\uffdd\030\uffdd\031\uffdd\040\uffdd\041\uffdd\042\uffdd\043" +
    "\uffdd\066\uffdd\067\uffdd\070\uffdd\072\uffdd\073\uffdd\104\uffdd" +
    "\105\uffdd\001\002\000\004\042\066\001\002\000\020\031" +
    "\070\032\074\033\073\034\067\035\075\042\072\052\100" +
    "\001\002\000\040\012\uff75\014\uff75\016\uff75\030\uff75\037" +
    "\uff75\040\uff75\041\uff75\043\uff75\044\uff75\045\uff75\046\uff75" +
    "\047\uff75\050\uff75\104\uff75\105\uff75\001\002\000\040\012" +
    "\uff72\014\uff72\016\uff72\030\uff72\037\uff72\040\uff72\041\uff72" +
    "\043\uff72\044\uff72\045\uff72\046\uff72\047\uff72\050\uff72\104" +
    "\uff72\105\uff72\001\002\000\040\012\uff7a\014\uff7a\016\uff7a" +
    "\030\uff7a\037\uff7a\040\uff7a\041\uff7a\043\uff7a\044\uff7a\045" +
    "\uff7a\046\110\047\107\050\uff7a\104\uff7a\105\uff7a\001\002" +
    "\000\020\031\070\032\074\033\073\034\067\035\075\042" +
    "\072\052\100\001\002\000\040\012\uff76\014\uff76\016\uff76" +
    "\030\uff76\037\uff76\040\uff76\041\uff76\043\uff76\044\uff76\045" +
    "\uff76\046\uff76\047\uff76\050\uff76\104\uff76\105\uff76\001\002" +
    "\000\040\012\uff74\014\uff74\016\uff74\030\uff74\037\uff74\040" +
    "\uff74\041\uff74\043\uff74\044\uff74\045\uff74\046\uff74\047\uff74" +
    "\050\uff74\104\uff74\105\uff74\001\002\000\040\012\uff73\014" +
    "\uff73\016\uff73\030\uff73\037\uff73\040\uff73\041\uff73\043\uff73" +
    "\044\uff73\045\uff73\046\uff73\047\uff73\050\uff73\104\uff73\105" +
    "\uff73\001\002\000\040\012\uff77\014\uff77\016\uff77\030\uff77" +
    "\037\uff77\040\uff77\041\uff77\043\uff77\044\uff77\045\uff77\046" +
    "\uff77\047\uff77\050\uff77\104\uff77\105\uff77\001\002\000\004" +
    "\043\114\001\002\000\040\012\uff71\014\uff71\016\uff71\030" +
    "\uff71\037\uff71\040\uff71\041\uff71\043\uff71\044\uff71\045\uff71" +
    "\046\uff71\047\uff71\050\uff71\104\uff71\105\uff71\001\002\000" +
    "\012\037\104\043\uffd0\044\102\045\103\001\002\000\020" +
    "\031\070\032\074\033\073\034\067\035\075\042\072\052" +
    "\100\001\002\000\020\031\070\032\074\033\073\034\067" +
    "\035\075\042\072\052\100\001\002\000\020\031\070\032" +
    "\074\033\073\034\067\035\075\042\072\052\100\001\002" +
    "\000\004\043\uffcf\001\002\000\040\012\uff7b\014\uff7b\016" +
    "\uff7b\030\uff7b\037\uff7b\040\uff7b\041\uff7b\043\uff7b\044\uff7b" +
    "\045\uff7b\046\110\047\107\050\uff7b\104\uff7b\105\uff7b\001" +
    "\002\000\020\031\070\032\074\033\073\034\067\035\075" +
    "\042\072\052\100\001\002\000\020\031\070\032\074\033" +
    "\073\034\067\035\075\042\072\052\100\001\002\000\040" +
    "\012\uff79\014\uff79\016\uff79\030\uff79\037\uff79\040\uff79\041" +
    "\uff79\043\uff79\044\uff79\045\uff79\046\uff79\047\uff79\050\uff79" +
    "\104\uff79\105\uff79\001\002\000\040\012\uff78\014\uff78\016" +
    "\uff78\030\uff78\037\uff78\040\uff78\041\uff78\043\uff78\044\uff78" +
    "\045\uff78\046\uff78\047\uff78\050\uff78\104\uff78\105\uff78\001" +
    "\002\000\040\012\uff7c\014\uff7c\016\uff7c\030\uff7c\037\uff7c" +
    "\040\uff7c\041\uff7c\043\uff7c\044\uff7c\045\uff7c\046\110\047" +
    "\107\050\uff7c\104\uff7c\105\uff7c\001\002\000\040\011\uffd6" +
    "\020\uffd6\030\uffd6\031\uffd6\040\uffd6\041\uffd6\042\uffd6\043" +
    "\uffd6\066\uffd6\067\uffd6\070\uffd6\072\uffd6\073\uffd6\104\uffd6" +
    "\105\uffd6\001\002\000\010\043\116\044\102\045\103\001" +
    "\002\000\040\012\uff70\014\uff70\016\uff70\030\uff70\037\uff70" +
    "\040\uff70\041\uff70\043\uff70\044\uff70\045\uff70\046\uff70\047" +
    "\uff70\050\uff70\104\uff70\105\uff70\001\002\000\020\031\052" +
    "\046\060\061\056\062\054\063\063\064\053\065\057\001" +
    "\002\000\004\053\uffe3\001\002\000\036\006\uffda\011\uffda" +
    "\030\uffda\037\uffda\040\uffda\042\uffda\053\uffda\066\uffda\067" +
    "\uffda\070\uffda\072\uffda\073\uffda\104\uffda\105\uffda\001\002" +
    "\000\006\031\125\056\124\001\002\000\010\006\uffe2\037" +
    "\uffe2\053\uffe2\001\002\000\004\031\126\001\002\000\036" +
    "\006\uffdb\011\uffdb\030\uffdb\037\uffdb\040\uffdb\042\uffdb\053" +
    "\uffdb\066\uffdb\067\uffdb\070\uffdb\072\uffdb\073\uffdb\104\uffdb" +
    "\105\uffdb\001\002\000\006\031\126\057\uffd8\001\002\000" +
    "\004\057\130\001\002\000\036\006\uffd9\011\uffd9\030\uffd9" +
    "\037\uffd9\040\uffd9\042\uffd9\053\uffd9\066\uffd9\067\uffd9\070" +
    "\uffd9\072\uffd9\073\uffd9\104\uffd9\105\uffd9\001\002\000\004" +
    "\057\uffd7\001\002\000\014\011\213\030\uff90\040\uff90\104" +
    "\uff90\105\uff90\001\002\000\004\031\135\001\002\000\034" +
    "\011\uffcb\020\122\030\uffcb\031\121\040\uffcb\042\145\066" +
    "\146\067\151\070\147\072\150\073\153\104\uffcb\105\uffcb" +
    "\001\002\000\040\011\uff96\020\uff96\030\uff96\031\uff96\036" +
    "\136\040\uff96\042\uff96\043\uff96\066\uff96\067\uff96\070\uff96" +
    "\072\uff96\073\uff96\104\uff96\105\uff96\001\002\000\004\031" +
    "\137\001\002\000\040\011\uff95\020\uff95\030\uff95\031\uff95" +
    "\036\140\040\uff95\042\uff95\043\uff95\066\uff95\067\uff95\070" +
    "\uff95\072\uff95\073\uff95\104\uff95\105\uff95\001\002\000\004" +
    "\031\141\001\002\000\040\011\uff94\020\uff94\030\uff94\031" +
    "\uff94\040\uff94\042\uff94\043\uff94\050\uff94\066\uff94\067\uff94" +
    "\070\uff94\072\uff94\073\uff94\104\uff94\105\uff94\001\002\000" +
    "\014\011\uffcd\030\uffcd\040\uffcd\104\uffcd\105\uffcd\001\002" +
    "\000\032\011\uffca\030\uffca\040\uffca\042\145\043\uffca\066" +
    "\146\067\151\070\147\072\150\073\153\104\uffca\105\uffca" +
    "\001\002\000\030\011\uffce\030\uffce\040\uffce\042\145\066" +
    "\146\067\151\070\147\072\150\073\153\104\uffce\105\uffce" +
    "\001\002\000\014\066\146\067\151\070\147\072\150\073" +
    "\153\001\002\000\020\031\uffc4\046\uffc4\061\uffc4\062\uffc4" +
    "\063\uffc4\064\uffc4\065\uffc4\001\002\000\006\066\201\071" +
    "\202\001\002\000\006\066\176\071\177\001\002\000\004" +
    "\066\175\001\002\000\020\031\052\046\060\061\056\062" +
    "\054\063\063\064\053\065\057\001\002\000\006\066\154" +
    "\071\155\001\002\000\020\031\uffc2\046\uffc2\061\uffc2\062" +
    "\uffc2\063\uffc2\064\uffc2\065\uffc2\001\002\000\004\066\156" +
    "\001\002\000\020\031\uffc3\046\uffc3\061\uffc3\062\uffc3\063" +
    "\uffc3\064\uffc3\065\uffc3\001\002\000\004\006\160\001\002" +
    "\000\020\031\161\046\060\061\056\062\054\063\063\064" +
    "\053\065\057\001\002\000\012\036\171\041\uffdc\050\uff96" +
    "\055\170\001\002\000\004\041\166\001\002\000\004\050" +
    "\164\001\002\000\004\031\135\001\002\000\032\011\uffc5" +
    "\030\uffc5\040\uffc5\042\uffc5\043\uffc5\066\uffc5\067\uffc5\070" +
    "\uffc5\072\uffc5\073\uffc5\104\uffc5\105\uffc5\001\002\000\020" +
    "\031\052\046\060\061\056\062\054\063\063\064\053\065" +
    "\057\001\002\000\032\011\uffc6\030\uffc6\040\uffc6\042\uffc6" +
    "\043\uffc6\066\uffc6\067\uffc6\070\uffc6\072\uffc6\073\uffc6\104" +
    "\uffc6\105\uffc6\001\002\000\004\031\174\001\002\000\006" +
    "\031\172\046\173\001\002\000\010\036\140\041\uffdf\050" +
    "\uff95\001\002\000\040\011\uffe0\020\uffe0\030\uffe0\031\uffe0" +
    "\040\uffe0\041\uffe0\042\uffe0\043\uffe0\066\uffe0\067\uffe0\070" +
    "\uffe0\072\uffe0\073\uffe0\104\uffe0\105\uffe0\001\002\000\040" +
    "\011\uffde\020\uffde\030\uffde\031\uffde\040\uffde\041\uffde\042" +
    "\uffde\043\uffde\066\uffde\067\uffde\070\uffde\072\uffde\073\uffde" +
    "\104\uffde\105\uffde\001\002\000\020\031\uffbd\046\uffbd\061" +
    "\uffbd\062\uffbd\063\uffbd\064\uffbd\065\uffbd\001\002\000\020" +
    "\031\uffbf\046\uffbf\061\uffbf\062\uffbf\063\uffbf\064\uffbf\065" +
    "\uffbf\001\002\000\004\066\200\001\002\000\020\031\uffbe" +
    "\046\uffbe\061\uffbe\062\uffbe\063\uffbe\064\uffbe\065\uffbe\001" +
    "\002\000\020\031\uffc1\046\uffc1\061\uffc1\062\uffc1\063\uffc1" +
    "\064\uffc1\065\uffc1\001\002\000\004\066\203\001\002\000" +
    "\020\031\uffc0\046\uffc0\061\uffc0\062\uffc0\063\uffc0\064\uffc0" +
    "\065\uffc0\001\002\000\020\042\145\043\206\066\146\067" +
    "\151\070\147\072\150\073\153\001\002\000\004\043\207" +
    "\001\002\000\016\011\uffc8\030\uffc8\040\uffc8\043\uffc8\104" +
    "\uffc8\105\uffc8\001\002\000\016\011\uffc7\030\uffc7\040\uffc7" +
    "\043\uffc7\104\uffc7\105\uffc7\001\002\000\014\011\uffcc\030" +
    "\uffcc\040\uffcc\104\uffcc\105\uffcc\001\002\000\016\011\uffc9" +
    "\030\uffc9\040\uffc9\043\uffc9\104\uffc9\105\uffc9\001\002\000" +
    "\012\030\uffbb\040\uffbb\104\257\105\uffbb\001\002\000\020" +
    "\031\217\032\074\033\073\034\067\035\075\042\072\052" +
    "\100\001\002\000\016\012\uff8b\016\uff8b\030\uff8b\040\uff8b" +
    "\104\uff8b\105\uff8b\001\002\000\016\012\253\016\254\030" +
    "\uff8f\040\uff8f\104\uff8f\105\uff8f\001\002\000\016\012\uff8c" +
    "\016\uff8c\030\uff8c\040\uff8c\104\uff8c\105\uff8c\001\002\000" +
    "\024\013\233\014\uff72\036\234\041\uff72\044\uff72\045\uff72" +
    "\046\uff72\047\uff72\050\uff72\001\002\000\012\030\uff91\040" +
    "\uff91\104\uff91\105\uff91\001\002\000\010\014\225\041\226" +
    "\050\224\001\002\000\014\014\225\041\226\044\102\045" +
    "\103\050\224\001\002\000\020\031\070\032\074\033\073" +
    "\034\067\035\075\042\072\052\100\001\002\000\020\031" +
    "\uff80\032\uff80\033\uff80\034\uff80\035\uff80\042\uff80\052\uff80" +
    "\001\002\000\022\015\227\031\uff7e\032\uff7e\033\uff7e\034" +
    "\uff7e\035\uff7e\042\uff7e\052\uff7e\001\002\000\020\031\uff7f" +
    "\032\uff7f\033\uff7f\034\uff7f\035\uff7f\042\uff7f\052\uff7f\001" +
    "\002\000\020\031\uff7d\032\uff7d\033\uff7d\034\uff7d\035\uff7d" +
    "\042\uff7d\052\uff7d\001\002\000\022\012\uff82\016\uff82\030" +
    "\uff82\040\uff82\044\102\045\103\104\uff82\105\uff82\001\002" +
    "\000\020\031\070\032\074\033\073\034\067\035\075\042" +
    "\072\052\100\001\002\000\022\012\uff81\016\uff81\030\uff81" +
    "\040\uff81\044\102\045\103\104\uff81\105\uff81\001\002\000" +
    "\004\042\240\001\002\000\004\031\235\001\002\000\012" +
    "\014\uff93\036\236\041\uff93\050\uff93\001\002\000\004\031" +
    "\237\001\002\000\010\014\uff92\041\uff92\050\uff92\001\002" +
    "\000\014\017\247\032\245\033\246\034\244\035\242\001" +
    "\002\000\004\043\252\001\002\000\006\037\uff86\043\uff86" +
    "\001\002\000\006\037\250\043\uff89\001\002\000\006\037" +
    "\uff84\043\uff84\001\002\000\006\037\uff85\043\uff85\001\002" +
    "\000\006\037\uff87\043\uff87\001\002\000\006\037\uff83\043" +
    "\uff83\001\002\000\014\017\247\032\245\033\246\034\244" +
    "\035\242\001\002\000\004\043\uff88\001\002\000\016\012" +
    "\uff8a\016\uff8a\030\uff8a\040\uff8a\104\uff8a\105\uff8a\001\002" +
    "\000\020\031\217\032\074\033\073\034\067\035\075\042" +
    "\072\052\100\001\002\000\020\031\217\032\074\033\073" +
    "\034\067\035\075\042\072\052\100\001\002\000\012\030" +
    "\uff8d\040\uff8d\104\uff8d\105\uff8d\001\002\000\012\030\uff8e" +
    "\040\uff8e\104\uff8e\105\uff8e\001\002\000\004\106\273\001" +
    "\002\000\010\030\uffb9\040\uffb9\105\261\001\002\000\004" +
    "\106\263\001\002\000\006\030\uffe7\040\uffe7\001\002\000" +
    "\004\031\264\001\002\000\014\007\266\010\270\030\uffb4" +
    "\037\uffb4\040\uffb4\001\002\000\006\030\uffba\040\uffba\001" +
    "\002\000\010\030\uffb6\037\uffb6\040\uffb6\001\002\000\010" +
    "\030\uffb8\037\271\040\uffb8\001\002\000\010\030\uffb5\037" +
    "\uffb5\040\uffb5\001\002\000\004\031\264\001\002\000\006" +
    "\030\uffb7\040\uffb7\001\002\000\004\031\275\001\002\000" +
    "\010\030\uffbc\040\uffbc\105\uffbc\001\002\000\014\030\uff98" +
    "\037\276\040\uff98\043\uff98\105\uff98\001\002\000\004\031" +
    "\275\001\002\000\012\030\uff97\040\uff97\043\uff97\105\uff97" +
    "\001\002\000\006\031\301\046\173\001\002\000\036\011" +
    "\uffdf\020\uffdf\030\uffdf\031\uffdf\040\uffdf\042\uffdf\043\uffdf" +
    "\066\uffdf\067\uffdf\070\uffdf\072\uffdf\073\uffdf\104\uffdf\105" +
    "\uffdf\001\002\000\020\031\052\046\060\061\056\062\054" +
    "\063\063\064\053\065\057\001\002\000\004\053\133\001" +
    "\002\000\014\011\213\030\uff90\040\uff90\104\uff90\105\uff90" +
    "\001\002\000\012\030\uffbb\040\uffbb\104\257\105\uffbb\001" +
    "\002\000\010\030\uffb9\040\uffb9\105\261\001\002\000\006" +
    "\030\uffe8\040\uffe8\001\002\000\006\030\uffa4\040\uffa4\001" +
    "\002\000\024\017\315\021\314\031\070\032\074\033\073" +
    "\034\067\035\075\042\072\052\100\001\002\000\004\043" +
    "\322\001\002\000\006\037\320\043\uff9f\001\002\000\004" +
    "\103\317\001\002\000\006\037\uff9c\043\uff9c\001\002\000" +
    "\012\037\uff9b\043\uff9b\044\102\045\103\001\002\000\006" +
    "\037\uff9d\043\uff9d\001\002\000\024\017\315\021\314\031" +
    "\070\032\074\033\073\034\067\035\075\042\072\052\100" +
    "\001\002\000\004\043\uff9e\001\002\000\010\030\uffa1\037" +
    "\323\040\uffa1\001\002\000\004\042\311\001\002\000\006" +
    "\030\uffa0\040\uffa0\001\002\000\006\030\uffa3\040\uffa3\001" +
    "\002\000\004\043\327\001\002\000\010\021\uffa6\060\uffa6" +
    "\103\uffa6\001\002\000\004\031\331\001\002\000\014\021" +
    "\uffa9\036\332\042\uffa9\060\uffa9\103\uffa9\001\002\000\004" +
    "\031\333\001\002\000\014\021\uffa8\036\334\042\uffa8\060" +
    "\uffa8\103\uffa8\001\002\000\004\031\335\001\002\000\012" +
    "\021\uffa7\042\uffa7\060\uffa7\103\uffa7\001\002\000\004\031" +
    "\337\001\002\000\004\037\340\001\002\000\004\035\341" +
    "\001\002\000\004\043\342\001\002\000\012\021\uffab\042" +
    "\uffab\060\uffab\103\uffab\001\002\000\020\031\070\032\074" +
    "\033\073\034\067\035\075\042\072\052\100\001\002\000" +
    "\010\043\345\044\102\045\103\001\002\000\026\031\uffaf" +
    "\046\uffaf\061\uffaf\062\uffaf\063\uffaf\064\uffaf\065\uffaf\100" +
    "\347\101\uffaf\102\uffaf\001\002\000\024\031\uffb2\046\uffb2" +
    "\061\uffb2\062\uffb2\063\uffb2\064\uffb2\065\uffb2\101\uffb2\102" +
    "\uffb2\001\002\000\024\031\uffb0\046\uffb0\061\uffb0\062\uffb0" +
    "\063\uffb0\064\uffb0\065\uffb0\101\uffb0\102\uffb0\001\002\000" +
    "\012\030\ufff5\031\ufff5\040\ufff5\052\ufff5\001\002\000\012" +
    "\030\ufff4\031\ufff4\040\ufff4\052\ufff4\001\002\000\012\030" +
    "\ufff3\031\353\040\ufff3\052\354\001\002\000\006\030\ufff0" +
    "\040\ufff0\001\002\000\006\030\ufff1\040\ufff1\001\002\000" +
    "\012\030\uffef\031\356\040\uffef\052\357\001\002\000\006" +
    "\030\uffed\040\uffed\001\002\000\006\030\uffee\040\uffee\001" +
    "\002\000\004\002\000\001\002\000\004\002\uff6e\001\002" +
    "\000\004\002\uff6f\001\002\000\004\052\364\001\002\000" +
    "\010\030\ufff7\031\365\040\ufff7\001\002\000\006\030\ufff6" +
    "\040\ufff6\001\002\000\004\031\135\001\002\000\006\030" +
    "\uff99\040\uff99\001\002\000\012\030\uffec\031\371\040\uffec" +
    "\052\372\001\002\000\006\030\uffea\040\uffea\001\002\000" +
    "\006\030\uffeb\040\uffeb\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\370\000\032\002\024\003\011\004\010\005\006\006" +
    "\021\007\013\012\020\013\007\065\017\066\016\067\015" +
    "\070\014\001\001\000\004\071\367\001\001\000\002\001" +
    "\001\000\004\071\362\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\027\357\001\001\000" +
    "\004\071\354\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\071\351\001\001" +
    "\000\004\033\027\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\035\031\001\001\000\002" +
    "\001\001\000\006\036\034\037\035\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\040\037\001\001\000\002" +
    "\001\001\000\004\015\325\001\001\000\006\010\043\044" +
    "\044\001\001\000\002\001\001\000\004\041\307\001\001" +
    "\000\006\033\050\045\045\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\033\301\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\046\054\047\061\050\060\053" +
    "\063\054\064\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\056\131\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\051\122" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\030\100\031\070\032\075" +
    "\055\076\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\030\114\031\070\032\075\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\031\112\032\075\001\001\000\006\031" +
    "\105\032\075\001\001\000\012\030\100\031\070\032\075" +
    "\055\104\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\032\111\001\001\000\004\032\110\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\046\117" +
    "\047\061\050\060\053\063\054\064\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\052\126\001\001\000\002\001\001\000\004\052" +
    "\130\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\016\211\001\001\000\004\014\133\001" +
    "\001\000\012\051\143\057\141\060\142\061\151\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\057\210\060\142\061\151\001\001\000\010\057\207\060" +
    "\142\061\151\001\001\000\006\060\203\061\151\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\047\156\050\060\053\063\054\064" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\014\162" +
    "\050\161\053\063\054\064\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\014\164\001\001" +
    "\000\002\001\001\000\010\050\166\053\063\054\064\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\057\204\060\142\061\151\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\063\257\001\001\000\022" +
    "\020\217\021\214\022\215\023\213\030\221\031\070\032" +
    "\075\062\220\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\026\230\001\001\000\004\026\222\001\001\000\010" +
    "\030\227\031\070\032\075\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\030\231\031\070\032\075\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\024" +
    "\242\025\240\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\024\242\025\250" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\020" +
    "\255\021\214\022\215\023\213\030\221\031\070\032\075" +
    "\062\220\001\001\000\022\020\254\021\214\022\215\023" +
    "\213\030\221\031\070\032\075\062\220\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\064" +
    "\261\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\017\264\001\001\000\004\011\266\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\017\271\001\001\000\002\001\001\000\004\015" +
    "\273\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\015\276\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\046\302\047\061\050\060\053\063" +
    "\054\064\001\001\000\004\056\303\001\001\000\004\016" +
    "\304\001\001\000\004\063\305\001\001\000\004\064\306" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\030" +
    "\315\031\070\032\075\042\311\043\312\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\030\315" +
    "\031\070\032\075\042\320\043\312\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\041\323\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\030\343\031\070\032" +
    "\075\001\001\000\002\001\001\000\004\034\345\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\014\366\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;

    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // FIN ::= Go 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FIN",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // FIN ::= Punto_Coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FIN",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // F ::= Parentesis_a COLUMN_EXPRESION Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("F",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // F ::= Var 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("F",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // F ::= Id 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("F",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // F ::= String 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("F",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // F ::= Bit 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("F",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // F ::= Float 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("F",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // F ::= Int 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("F",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // T ::= F 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("T",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // T ::= T Dividir F 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("T",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // T ::= T Asterisco F 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("T",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // COLUMN_EXPRESION ::= T 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COLUMN_EXPRESION",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // COLUMN_EXPRESION ::= COLUMN_EXPRESION Menos T 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COLUMN_EXPRESION",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // COLUMN_EXPRESION ::= COLUMN_EXPRESION Mas T 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COLUMN_EXPRESION",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // COMPARADOR ::= Is Not 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COMPARADOR",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // COMPARADOR ::= Is 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COMPARADOR",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // COMPARADOR ::= Igual 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COMPARADOR",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // COMPARADOR ::= Comparador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COMPARADOR",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // COMPARACION ::= TABLENAME_3 COMPARADOR COLUMN_EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COMPARACION",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // COMPARACION ::= COLUMN_EXPRESION COMPARADOR COLUMN_EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COMPARACION",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // CONSTANT ::= Null 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONSTANT",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // CONSTANT ::= Float 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONSTANT",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // CONSTANT ::= Bit 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONSTANT",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // CONSTANT ::= String 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONSTANT",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // CONSTANT ::= Int 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONSTANT",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // CONSTANTS ::= CONSTANT Coma CONSTANTS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONSTANTS",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // CONSTANTS ::= CONSTANT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONSTANTS",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // DISJUNCT ::= Id In Parentesis_a CONSTANTS Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DISJUNCT",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // CONJUNCT ::= COMPARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONJUNCT",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // CONJUNCT ::= DISJUNCT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONJUNCT",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // FILTER ::= CONJUNCT Or FILTER 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FILTER",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // FILTER ::= CONJUNCT And FILTER 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FILTER",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // FILTER ::= CONJUNCT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FILTER",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // WHERE_INDEX ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WHERE_INDEX",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // WHERE_INDEX ::= Where FILTER 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WHERE_INDEX",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // TABLENAME_3 ::= Id Punto Id Punto Id 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TABLENAME_3",48, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // TABLENAME_3 ::= Id Punto Id 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TABLENAME_3",48, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // TABLENAME ::= Id Punto Id Punto Id 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TABLENAME",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // TABLENAME ::= Id Punto Id 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TABLENAME",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // TABLENAME ::= Id 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TABLENAME",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // DATABASE_NAMES ::= Id Coma DATABASE_NAMES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DATABASE_NAMES",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // DATABASE_NAMES ::= Id 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DATABASE_NAMES",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // TRUNCATE ::= Truncate Table TABLENAME 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TRUNCATE",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // DDL ::= TRUNCATE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DDL",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // VALUES_OPTION ::= COLUMN_EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VALUES_OPTION",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // VALUES_OPTION ::= Null 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VALUES_OPTION",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // VALUES_OPTION ::= Default Values 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VALUES_OPTION",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // VALUES_OPTIONS ::= VALUES_OPTION Coma VALUES_OPTIONS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VALUES_OPTIONS",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // VALUES_OPTIONS ::= VALUES_OPTION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VALUES_OPTIONS",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // VALUES ::= Parentesis_a VALUES_OPTIONS Parentesis_c Coma VALUES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VALUES",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // VALUES ::= Parentesis_a VALUES_OPTIONS Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VALUES",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // VALUES_2 ::= SELECT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VALUES_2",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // VALUES_2 ::= Default Values 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VALUES_2",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // VALUES_2 ::= Values VALUES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VALUES_2",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // COLUMN_LIST ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COLUMN_LIST",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // COLUMN_LIST ::= Parentesis_a DATABASE_NAMES Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COLUMN_LIST",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // TABLENAME_2 ::= Id Punto Id Punto Id Punto Id 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TABLENAME_2",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // TABLENAME_2 ::= Id Punto Id Punto Id 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TABLENAME_2",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // TABLENAME_2 ::= Id Punto Id 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TABLENAME_2",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // TABLENAME_2 ::= Id 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TABLENAME_2",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // OBJECT ::= Openquery Parentesis_a Id Coma String Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OBJECT",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // OBJECT ::= TABLENAME_2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OBJECT",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // INTO ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INTO",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // INTO ::= Into 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INTO",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // PERCENT ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PERCENT",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // PERCENT ::= Percent 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PERCENT",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // TOP ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TOP",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // TOP ::= Top Parentesis_a COLUMN_EXPRESION Parentesis_c PERCENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TOP",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // INSERT ::= Insert TOP INTO OBJECT COLUMN_LIST VALUES_2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSERT",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // ASC ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASC",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // ASC ::= Desc 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASC",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // ASC ::= Asc 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASC",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // COLUMN_NAMES_ASC ::= Id ASC Coma COLUMN_NAMES_ASC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COLUMN_NAMES_ASC",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // COLUMN_NAMES_ASC ::= Id ASC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COLUMN_NAMES_ASC",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // ORDER_BY ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ORDER_BY",50, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // ORDER_BY ::= Order By COLUMN_NAMES_ASC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ORDER_BY",50, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // GROUP_BY ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("GROUP_BY",49, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // GROUP_BY ::= Group By DATABASE_NAMES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("GROUP_BY",49, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // JOIN_TYPE ::= Inner Join 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("JOIN_TYPE",47, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // JOIN_TYPE ::= Right Outer Join 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("JOIN_TYPE",47, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // JOIN_TYPE ::= Right Join 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("JOIN_TYPE",47, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // JOIN_TYPE ::= Left Outer Join 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("JOIN_TYPE",47, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // JOIN_TYPE ::= Left Join 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("JOIN_TYPE",47, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // JOIN_TYPE ::= Full Join 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("JOIN_TYPE",47, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // JOIN_TYPE ::= Full Outer Join 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("JOIN_TYPE",47, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // JOIN_TYPE ::= Join 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("JOIN_TYPE",47, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // JOIN ::= JOIN_TYPE CAMPO_AS On TABLENAME Comparador TABLENAME 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("JOIN",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // JOIN ::= JOIN_TYPE CAMPO_AS On CAMPO Igual CAMPO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("JOIN",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // JOINS ::= Parentesis_a JOIN JOINS Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("JOINS",45, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // JOINS ::= Parentesis_a JOIN Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("JOINS",45, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // JOINS ::= JOIN JOINS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("JOINS",45, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // JOINS ::= JOIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("JOINS",45, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // FROM ::= From TABLENAME 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FROM",44, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // FROM ::= From TABLENAME ALIAS JOINS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FROM",44, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // FROM ::= From TABLENAME JOINS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FROM",44, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // FROM ::= From TABLENAME ALIAS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FROM",44, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // PARAMETROS ::= COLUMN_EXPRESION Coma PARAMETROS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROS",43, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // PARAMETROS ::= COLUMN_EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROS",43, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // METHOD_NAME ::= Sum 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("METHOD_NAME",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // METHOD_NAME ::= Count 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("METHOD_NAME",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // METHOD_NAME ::= Max 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("METHOD_NAME",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // METHOD_NAME ::= Min 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("METHOD_NAME",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // METHOD_NAME ::= Avg 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("METHOD_NAME",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // METHOD ::= METHOD_NAME Parentesis_a PARAMETROS Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("METHOD",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // ID_M ::= Id ID_M 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ID_M",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // ID_M ::= Id 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ID_M",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // ALIAS ::= As Bracket_a ID_M Bracket_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ALIAS",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // ALIAS ::= Id 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ALIAS",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // ALIAS ::= As Id 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ALIAS",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // CAMPO ::= Id 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CAMPO",38, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // CAMPO ::= METHOD 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CAMPO",38, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // CAMPO ::= Id Cuadro Id 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CAMPO",38, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // CAMPO ::= Id Punto Id 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CAMPO",38, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // CAMPO ::= Id Punto Asterisco 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CAMPO",38, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // CAMPO ::= Asterisco 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CAMPO",38, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // CAMPO_AS ::= CAMPO ALIAS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CAMPO_AS",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // SELECT_LIST ::= CAMPO_AS Coma SELECT_LIST 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SELECT_LIST",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // SELECT_LIST ::= CAMPO_AS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SELECT_LIST",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ALL_DISTINCT ::= Distinct 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ALL_DISTINCT",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ALL_DISTINCT ::= All 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ALL_DISTINCT",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // SELECT ::= Select TOP SELECT_LIST FROM WHERE_INDEX GROUP_BY ORDER_BY 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SELECT",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // SELECT ::= Select ALL_DISTINCT TOP SELECT_LIST FROM WHERE_INDEX GROUP_BY ORDER_BY 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SELECT",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // DML ::= INSERT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DML",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // SAVEPOINT ::= Save TRAN Id 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SAVEPOINT",54, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // SAVEPOINT ::= Save TRAN Var 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SAVEPOINT",54, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // SAVEPOINT ::= Save TRAN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SAVEPOINT",54, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // ROLLBACK ::= Rollback TRAN Id 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ROLLBACK",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // ROLLBACK ::= Rollback TRAN Var 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ROLLBACK",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // ROLLBACK ::= Rollback TRAN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ROLLBACK",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // COMMIT ::= Commit TRAN Id 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COMMIT",52, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // COMMIT ::= Commit TRAN Var 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COMMIT",52, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // COMMIT ::= Commit 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COMMIT",52, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // COMMIT ::= Commit TRAN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COMMIT",52, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // TRAN ::= Transaction 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TRAN",55, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // TRAN ::= Tran 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TRAN",55, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // BEGIN ::= Begin TRAN Var Id 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BEGIN",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // BEGIN ::= Begin TRAN Var 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BEGIN",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // TCL ::= SAVEPOINT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TCL",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // TCL ::= ROLLBACK 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TCL",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // TCL ::= COMMIT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TCL",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // TCL ::= BEGIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TCL",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // SENTENCIA ::= TSQL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // SENTENCIA ::= TCL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // SENTENCIA ::= DDL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // SENTENCIA ::= DML 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= SENTENCIA FIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

